// ГМ2 = Глобавльный Модуль для Ветис 2.*
// В модуле находятся функции для взамиодействия с Ветис 2.*
//
// ===============================================================
//Авторы:
// Синявский Филипп phsin@kb99.pro
// Жуков Дмитрий zhukov@kb99.pro

Перем ТаблицаПереопределенныхФункций;

Функция ПолучитьПартии2( спПараметрыФункции ) Экспорт Далее
Функция ПолучитьИмяФайла_МаршрутДоставки(Док) Экспорт Далее
Функция ПолучитьИмяФайлаРегионализация( Док ) Экспорт Далее
Функция НайтиПлощадку(Guid, Обновить=1) Экспорт Далее	

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Процедура Конструктор()

	//Служебная таблица для перекрытия переопределенных функций
	ТаблицаПереопределенныхФункций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПереопределенныхФункций.НоваяКолонка("НаименованиеФункции");
	ТаблицаПереопределенныхФункций.НоваяКолонка("Объект");

	глМеркурийИнтеграция_2 = СоздатьОбъект("МеркурийИнтеграция_2");
    глМеркурийИнтеграция_2.Инициализация(Сам());

КонецПроцедуры

Процедура Деструктор()
КонецПроцедуры
//
Процедура СообщитьОтладку(сообщение) Экспорт
	
	Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
		Сообщить(сообщение, "i");
	КонецЕсли;
	
КонецПроцедуры

Процедура Инициализация(ГлобавльныйМодуль) Экспорт
	ГМ = ГлобавльныйМодуль;
КонецПроцедуры

//{======= ФУНКЦИИ ПО РАБОТЕ С ПЕРЕОПРЕДЕЛЕННЫМИ ФУНКЦИЯМИ ==============
// Автор Анисимов Михаил mbIkola
Функция ПереопределитьФункцию(ИмяФункции,Объект) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);
		
	Если ТаблицаПереопределенныхФункций.НайтиЗначение(ИмяФункции,НС,"НаименованиеФункции")=0 Тогда
		ТаблицаПереопределенныхФункций.НоваяСтрока();
		ТаблицаПереопределенныхФункций.НаименованиеФункции 	= темп;
		ТаблицаПереопределенныхФункций.Объект 				= Объект;
		
		СообщитьОтладку("Выполняется переопределение функции <"+ИмяФункции+"> ");
		
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		ТаблицаПереопределенныхФункций.Объект 		= Объект;
	КонецЕсли;

	Возврат 1;
КонецФункции // ПереопределитьФункцию(ИмяФункции,Объект)

Функция ПроверитьПереопределениеФункции(ИмяФункции) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ТаблицаПереопределенныхФункций.НайтиЗначение(темп,НС,"НаименованиеФункции")=0 Тогда
		Возврат "";
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		Возврат ТаблицаПереопределенныхФункций.Объект;
	КонецЕсли;
КонецФункции // МодульВыполнения
//}======================================================================

//{Упаковки
Функция НайтиФормуУпаковки(guid, name, uuid = "", КодУпаковки = "") Экспорт

	Рез="";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Если НЕ(СокрЛП(name) = СокрЛП(Спр.Наименование)) Тогда
				Сообщить("ВСД_ФормыУпаковки "+ Спр.Наименование +" изменилось Наименование на ["+name+"] перезаписано");
				Спр.Наименование = name;
				Спр.Записать();
			КонецЕсли;
			Спр.СнятьПометкуУдаления();
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Попытка Спр.КодУпаковки = КодУпаковки; Исключение КонецПопытки; //Нет ревизита
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(Рез)=1 Тогда
		//Сообщить("Форма упаковки не определена "+guid+" = "+name,"!");
	КонецЕсли;

	Возврат Рез;

КонецФункции

//======= ВСПОМОГАЛЬНЫЕ ФУНКЦИИ ==============

Функция УровниУпаковки_из_XML(PList) Экспорт
	//Список физической упаковки. vd:packageList
	// С уровнями
	//   Уровни <dt:level>
	//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
	//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
	//3 	Промежуточный уровень. Уровень упаковки, Если он существует, который находится между потребительским И торговым уровнем.
	//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты И доставки. Это согласованный между ритейлером И изготовителем (ИЛИ другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается И доставляется.
	//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому ИЛИ транспортному уровню.
	//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа.

	// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
	//UNDEFINED 	Класс неопределен. Это значение используется По умолчанию.
	//BN 	Номер производственной партии.
	//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
	//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
	//EAN8 	Маркировка в соответствии с EAN-8.
	//EAN13 	Маркировка в соответствии с EAN-13.
	//EAN128 	Маркировка в соответствии с EAN-128.
	//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете.
	ТЗУровни = Создатьобъект("ТаблицаЗначений");
	ТЗУровни.НоваяКолонка("НомерУровня","Число",1,0,,2);
	ТЗУровни.НоваяКолонка("Упаковка","Справочник.ВСД_ФормыУпаковки");
	ТЗУровни.НоваяКолонка("КолВо","Число",9,0,,5);
	ТЗУровни.НоваяКолонка("Маркировки");

	Попытка
	    Для l1 = 0 По PList.length - 1 Цикл
			Узел = PList.item(l1);
			ТЗУровни.НоваяСтрока();
			ТЗУровни.НомерУровня = Узел.selectSingleNode("dt:level").text;   // Уровень упаковки
			//Попытка	ПГУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:guid").text; Исключение ПГУИД = ""; КонецПопытки;
			//Попытка	ПУИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:uuid").text; Исключение ПУИД = "";	КонецПопытки;
			//dt:globalID  	Уникальный идентификатор упаковки.
			//Попытка ГлИД = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:globalID").text;Исключение	ГлИД = "";	КонецПопытки;
			// <dt:name>  	Наименование упаковки.
			//Попытка	ПакИмя = Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:name").text;Исключение ПакИмя = ""; КонецПопытки;
			// dt:quantity  	Количество единиц упаковки.
			Попытка ТЗУровни.КолВо = Число(Узел.selectSingleNode("dt:quantity").text);Исключение  КонецПопытки;

			Попытка ТЗУровни.Упаковка = НайтиФормуУпаковки( Узел.selectSingleNode("dt:packingType").selectSingleNode("bs:guid").text, Узел.selectSingleNode("dt:packingType").selectSingleNode("dt:name").text); Исключение  КонецПопытки;

			СзМаркировки = СоздатьОбъект("Списокзначений");
			//Маркировка партии продукции. Например
			//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
                //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks>
			Попытка
               	Маркировки = Узел.selectNodes("dt:productMarks");

				Для кк =0 По Маркировки.length - 1 Цикл
					МаркН = Маркировки.item(кк);
					МаркЗнач = МаркН.text;
					МаркКласс = МаркН.getattribute("class");
					СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
				КонецЦикла;
			Исключение КонецПопытки;
		    Если СзМаркировки.РазмерСписка()>0 Тогда
		        ТЗУровни.Маркировки = ЗначениеВСтроку(СзМаркировки);
		    КонецЕсли;
		КонецЦикла;
	Исключение	КонецПопытки;

	Если ТЗУровни.КоличествоСтрок()>0 Тогда
        //Возврат ЗначениеВСтроку(ТЗУровни);
		Возврат ТЗУровни;
	Иначе
		Возврат "";
    КонецЕсли;
КонецФункции
//}
Функция СвязанныеДокументы_из_XML(DocList) Экспорт
	// Связанные документы - м.б. несколько, для гашения в тестовой версии достаточно ТТН
	// другие связанные документы не нашел куда включать в запросе на гашение
    // На всякий случай считаем их в ТЗ

    // ТипОтношенияДок
	//1 	Сопроводительный документ. 	Complementary accompanying document.
	//2 	Предшествующий документ. 	Preceding document (Ancestor).
	//3 	Следующий документ. 	Subsequent/following document (Child).
	//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
	//5 	Документ, заменяющий текущий документ. 	Replaced by document.
	//6 	Связанный документ. 	Related document.

	ТзСвДокументов = СоздатьОбъект("ТаблицаЗначений");
	ТзСвДокументов.НоваяКолонка("ТипДокумента","Число");
	ТзСвДокументов.НоваяКолонка("НомерДокумента","Строка");
	ТзСвДокументов.НоваяКолонка("СерияДокумента","Строка");
	ТзСвДокументов.НоваяКолонка("ДатаДокумента","Строка");
	ТзСвДокументов.НоваяКолонка("ТипОтношенияДок","Число");

	Попытка
	    Для l1 = 0 По DocList.length - 1 Цикл
			Узел = DocList.item(l1);
			ТЗСвДокументов.НоваяСтрока();
            Попытка ТЗСвДокументов.ТипДокумента = 		Узел.selectSingleNode("vd:type").text; Исключение КонецПопытки;
            Попытка ТЗСвДокументов.НомерДокумента =		Узел.selectSingleNode("vd:issueNumber").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.СерияДокумента =  	Узел.selectSingleNode("vd:issueSeries").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.ДатаДокумента =  	Узел.selectSingleNode("vd:issueDate").text; Исключение КонецПопытки;
			Попытка ТЗСвДокументов.ТипОтношенияДок =	Узел.selectSingleNode("vd:relationshipType").text; Исключение КонецПопытки;
		КонецЦикла;
	Исключение КонецПопытки;

	Если ТЗСвДокументов.КоличествоСтрок()>0 Тогда
	    //Возврат ЗначениеВСтроку(ТЗСвДокументов);
		Возврат ТзСвДокументов;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция СписокНомеровПартий_из_XML(batchList) Экспорт
	// Номер Партии - м.б. несколько
	СпНомераПартий =  СоздатьОбъект("СписокЗначений");
	Попытка
	    Для l1 = 0 По batchList.length - 1 Цикл
			//НомерПартии = batchList.item(l1).selectSingleNode("vd:batchID").text;
			СпНомераПартий.ДобавитьЗначение(batchList.item(l1).text);
		КонецЦикла;
	Исключение 	КонецПопытки;
	Возврат ЗначениеВСтроку(СпНомераПартий);
КонецФункции

Функция СоздатьТзМаршрутСледования() Экспорт
	//Порядок колонок имеет значние при сохранинии в Файл => структура должна быть единообразна

	ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
	ТзТочкиМаршрута.НоваяКолонка("ВыбХС","Справочник.ВСД_ХозСубъект");
	ТзТочкиМаршрута.НоваяКолонка("ВыбПлощадка","Справочник.ВСД_Площадка",,,"Площадка",20);
	ТзТочкиМаршрута.НоваяКолонка("Страна","Справочник.ВСД_Страна");
	ТзТочкиМаршрута.НоваяКолонка("Регион","Справочник.ВСД_Регион");
	ТзТочкиМаршрута.НоваяКолонка("Район","Справочник.ВСД_Район");
	ТзТочкиМаршрута.НоваяКолонка("Город","Справочник.ВСД_Город");
	ТзТочкиМаршрута.НоваяКолонка("НасПункт",);
	ТзТочкиМаршрута.НоваяКолонка("Улица","Справочник.ВСД_Улица");
	ТзТочкиМаршрута.НоваяКолонка("Дом","Строка");
	ТзТочкиМаршрута.НоваяКолонка("Строение","Строка");
	ТзТочкиМаршрута.НоваяКолонка("Помещение","Строка");
	ТзТочкиМаршрута.НоваяКолонка("Перегрузка","Число",1,0,); //будем считать, что отмечаются только пункты перегрузки = true
	ТзТочкиМаршрута.НоваяКолонка("ТипТранспорта","Число",2,0,"Тип транспорта",5);
	ТзТочкиМаршрута.НоваяКолонка("НомерТС","Строка",50,,"Номер ТС",10);  // ЖД Что это за реквизит???
	ТзТочкиМаршрута.НоваяКолонка("номерАвто");
	ТзТочкиМаршрута.НоваяКолонка("номерКонтейнера");
	ТзТочкиМаршрута.НоваяКолонка("номерВагона");
	ТзТочкиМаршрута.НоваяКолонка("номерПрицепа");
	ТзТочкиМаршрута.НоваяКолонка("НазваниеСудна");
	ТзТочкиМаршрута.НоваяКолонка("НомерАвиарейса");
	ТзТочкиМаршрута.НоваяКолонка("UUID",); //ТзТочкиМаршрута.НоваяКолонка("UUID","Строка",36, ,"UUID",10);
	ТзТочкиМаршрута.НоваяКолонка("НомерТочки");//ТзТочкиМаршрута.НоваяКолонка("НомерТочки","Число",3,0,"Номер точки",5);
	ТзТочкиМаршрута.НоваяКолонка("Название");

	Возврат ТзТочкиМаршрута;
КонецФункции

Функция МаршрутСледования_из_XML(Routelist) Экспорт
    // Упрощенная схема - выбраны Площадки, а не ручная запись адреса
	тзТочкиМаршрута = СоздатьТзМаршрутСледования();
	Площадка_GUID = "";
	
	Попытка
	    Для l1 = 0 По Routelist.length - 1 Цикл
			Узел = Routelist.item(l1);
			ТЗточкиМаршрута.НоваяСтрока();
            Попытка ТЗточкиМаршрута.UUID					 = 		Узел.selectSingleNode("bs:uuid").text; Исключение КонецПопытки;
            Попытка ТЗточкиМаршрута.НомерТочки				 =		Узел.selectSingleNode("vd:sqnId").text; Исключение КонецПопытки;
			Попытка Площадка_GUID = Узел.selectSingleNode("vd:enterprise").selectSingleNode("bs:guid").text; Исключение КонецПопытки;
			Попытка
				Если ПустоеЗначение(Площадка_GUID)=0 Тогда 
					ТЗточкиМаршрута.ВыбПлощадка = НайтиПлощадку( Площадка_GUID ); 
				КонецЕсли;
			Исключение КонецПопытки;			
            Попытка ТЗточкиМаршрута.Перегрузка				 = 		?(Узел.selectSingleNode("vd:transshipment").text = "true",1,0); Исключение КонецПопытки;
            Попытка ТЗточкиМаршрута.ТипТранспорта			 = 		Число(Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportType").text); Исключение КонецПопытки;

			Если ТЗточкиМаршрута.ТипТранспорта = 1 Тогда
				Попытка ТЗточкиМаршрута.номеравто 			= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:vehicleNumber").text; Исключение КонецПопытки;
				Попытка ТЗточкиМаршрута.номерПрицепа 	= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:trailerNumber").text; Исключение КонецПопытки;;
				Попытка ТЗточкиМаршрута.номерКонтейнера 	= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:containerNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 2 Тогда
				Попытка ТЗточкиМаршрута.номерВагона 			= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:wagonNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 3 Тогда
				Попытка ТЗточкиМаршрута.НомерАвиарейса 			= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:flightNumber").text; Исключение КонецПопытки;
			Иначеесли (ТЗточкиМаршрута.ТипТранспорта = 4) ИЛИ (ТЗточкиМаршрута.ТипТранспорта = 5) ИЛИ (ТЗточкиМаршрута.ТипТранспорта = 6) Тогда
				Попытка ТЗточкиМаршрута.НазваниеСудна 			= Узел.selectSingleNode("vd:nextTransport").selectSingleNode("vd:transportNumber").selectSingleNode("vd:shipName").text; Исключение КонецПопытки;
//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;

			КонецЕсли;
            ТЗточкиМаршрута.НомерТС = СокрЛП(ТЗточкиМаршрута.номеравто) + СокрЛП(ТЗточкиМаршрута.номерВагона) + СокрЛП(ТЗточкиМаршрута.НомерАвиарейса)+ СокрЛП(ТЗточкиМаршрута.НазваниеСудна);; //Что-то тут не так
		КонецЦикла;
	Исключение КонецПопытки;

	ТЗточкиМаршрута.Сортировать("+НомерТочки");

	Если ТЗточкиМаршрута.КоличествоСтрок()>0 Тогда
	    Возврат тзТочкиМаршрута;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции


Функция Производители_из_XML(ProducerList) Экспорт
	//Информация о предприятиях-производителях продукции.
   	//Если предприятие было задано из справочника, то вернутся uuid И guid
   	//Если предприятие было указано текстом, то вернется name

	ТзПроизводителей = СоздатьОбъект("ТаблицаЗначений");
	ТзПроизводителей.НоваяКолонка("Площадка","Справочник.ВСД_Площадка");
	ТзПроизводителей.НоваяКолонка("Роль","Строка",15);
	ТзПроизводителей.НоваяКолонка("Имя","Строка",50);
	Попытка
	    Для l1 = 0 По ProducerList.length - 1 Цикл
			ГУидПроизводителя = ProducerList.item(l1).selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text;
			ТзПроизводителей.НоваяСтрока();
			ТзПроизводителей.Площадка = НайтиПлощадку(ГУидПроизводителя);
			Попытка ТзПроизводителей.Роль =  ProducerList.item(l1).selectSingleNode("dt:role").text; Исключение ТзПроизводителей.Роль = "PRODUCER"; КонецПопытки;
			Попытка ТзПроизводителей.Имя =  ProducerList.item(l1).selectSingleNode("dt:name").text; Исключение ТзПроизводителей.Имя = ""; КонецПопытки;

		КонецЦикла;
	Исключение 	
	КонецПопытки;
	//Возврат  ЗначениеВСтроку(ТзПроизводителей);
	Возврат  ТзПроизводителей;
КонецФункции

Процедура Фасовка_из_XML(packaging,ФасовкаНаименование="",ФасовкаФормаУпаковки="",ФасовкаКоличество="",ФасовкаОбъем="",ФасовкаЕдиницаИзм="") Экспорт
	//<dt:packaging> Фасовка.
	// Фасовка м.б. указана По требованию сети, Параметры фасовки привязаны к ВД_ПродукцияЭлемент
		// 	Тип упаковки.
		//Попытка	ТипФасовки = packaging.selectSingleNode("dt:packagingType").text; Исключение ТипФасовки ="";	КонецПопытки;
		// 	Идентификатор версии типа упаковки.
		//Попытка ФасУИД =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:uuid").text; Исключение КонецПопытки;

	Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение 	КонецПопытки;
	Попытка ФасовкаФормаУпаковки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
	//  	Уникальный идентификатор упаковки.
	//Попытка	ФасУН =  packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:globalID").text; Исключение КонецПопытки;
	//  	Количество единиц упаковки.
	Попытка	ФасовкаКоличество = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
	// Объём единицы упаковки товара.
	Попытка	ФасовкаОбъем = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
	// 	Глобальный идентификатор единицы измерения. , есть uuid И имя - <dt:name>
	Попытка	ФасовкаЕдиницаИзм = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;
КонецПроцедуры

// =========== Общие функции ==================

//https://htmlweb.ru/html/symbols.php
Функция ЗаменитьСпецСимволы(Стр) Экспорт
    Рез = СокрЛП(Стр);
	Рез = СтрЗаменить(Рез,"&" ,"&amp;" );
	Рез = СтрЗаменить(Рез,"""","&quot;");
	Рез = СтрЗаменить(Рез,"<" ,"&lt;"  );
	Рез = СтрЗаменить(Рез,">" ,"&gt;"  );
	Рез = СтрЗаменить(Рез,"'" ,"&#039;");
	Рез = СтрЗаменить(Рез,"№" ,"&#8470;");
	//Рез = СтрЗаменить(Рез,"/" ,"//");
	Возврат Рез;
КонецФункции

// Поиск СПРАВОЧНИКА ВСД_Док По uuid
Функция НайтиВСДпоUUID( uuid, ВидДокумента="ВСД_Док", СоздаватьДокумент = 1 ) Экспорт

	Если ПустоеЗначение(UUID)=1 Тогда
		Возврат "";
	КонецЕсли;

	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ГМ.ЭтоSQL=1 Тогда
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();

		ТекстЗапроса = "
		|select
	    | ДокВСД.id [id $Справочник."+ВидДокумента+"]
	    |from $Справочник."+ВидДокумента+" as ДокВСД (NOLOCK)
	  	|where
	  	|	( $ДокВСД.UUID = :uuid)
	  	|";
		RS.УстановитьТекстовыйПараметр("uuid", uuid);
		Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			RS.Отладка(1);
		КонецЕсли;		
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		Запрос = ГМ.базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    | ДокВСД.id [id $Справочник."+ВидДокумента+"]
	    |from [Справочник."+ВидДокумента+"] as ДокВСД
	  	|where
	  	|	( ДокВСД.UUID = :uuid)
	  	|";
		Запрос.Подставлять("uuid", uuid);
		Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Запрос.Отладка();
		КонецЕсли;		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	ВсдОбъект = СоздатьОбъект("Справочник."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда
		Если  СоздаватьДокумент = 1 Тогда
			ВсдОбъект.Новый();
			ГМ.СообщитьИнфо("Создан новый "+ВидДокумента+" № "+ВсдОбъект.Код, ВсдОбъект);
		КонецЕсли;
	Иначе		
		ВсдОбъект.НайтиЭлемент( тз.ПолучитьЗначение(1,1) );
		ВсдОбъект.СнятьПометкуУдаления();
		Состояние("Найден "+ВсдОбъект.ТекущийЭлемент());
	КонецЕсли;

	Возврат ВсдОбъект;
КонецФункции

// Поиск документа По ууид
Функция НайтиДокументВСДпоUUID( uuid, ВидДокумента, СоздаватьДокумент = 1 ) Экспорт

	Если ПустоеЗначение(UUID)=1 Тогда
		Возврат "";
	КонецЕсли;

	тз = СоздатьОбъект("ТаблицаЗначений");		
	Если ГМ.ЭтоSQL=1 Тогда
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();

		ТекстЗапроса = "
		|select
	    | ДокВСД.idDoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД (NOLOCK)
	  	|where
	  	|	( $ДокВСД.UUID = :uuid)
	  	|";
		RS.УстановитьТекстовыйПараметр("uuid", uuid);
		Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			RS.Отладка(1);
		КонецЕсли;		
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		Запрос = ГМ.базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    | ДокВСД.idDoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД
	  	|where
	  	|	( ДокВСД.UUID = :uuid)
	  	|";
		Запрос.Подставлять("uuid", uuid);
		Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Запрос.Отладка();
		КонецЕсли;		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	
	ВсдОбъект = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда
		Если  СоздаватьДокумент = 1 Тогда
			ВсдОбъект.Новый();
			ГМ.СообщитьИнфо("Создан новый "+ВидДокумента+" № "+ВсдОбъект.НомерДок, ВсдОбъект);
		КонецЕсли;

	Иначе
		ВсдОбъект.НайтиДокумент(тз.ПолучитьЗначение(1,1));
		ВсдОбъект.СделатьНеПроведенным();

		Состояние("Найден "+ВсдОбъект.ТекущийДокумент());
	КонецЕсли;

	Возврат ВсдОбъект;
КонецФункции


//{================= Партии ============================

// найдем документ ВСД_АктуальныеПартии на основании докСсылка
Функция НайтиДокПартий(докСсылка)
	
	докОбъект = "";
		
	Если ГМ.ПолучитьКонстанту("КонтрольОстатковПоРегистру")=1 Тогда 
	
		Если ПустоеЗначение(докСсылка)=1 Тогда 		
			
			докОбъект = СоздатьОбъект("Документ.ВСД_АктуальныеПартии");
			докОбъект.Новый();
			докОбъект.ДатаДок = Текущаядата();
			докОбъект.Отправитель_ХозСубъект = ГМ.ПолучитьКонстанту("Отправитель_ХозСубъект");
			докОбъект.Отправитель_Площадка = ГМ.ПолучитьКонстанту("Отправитель_Площадка");
			докОбъект.applicationID = ГМ.Компонента.ApplicationId;
			//докОбъект.Статус = ;
			Попытка докОбъект.Автор = ГМ.ПолучитьАвтора(); Исключение КонецПопытки;
			Попытка докОбъект.Фирма = докСсылка.Фирма; Исключение КонецПопытки;
					
			докОбъект.ДокОснование = докСсылка;
			докОбъект.Записать();	
			
			Возврат докОбъект;
	
		ИначеЕсли (докСсылка.Вид() = "ВСД_АктуальныеПартии") Тогда 
			докОбъект = СоздатьОбъект("Документ");
			докОбъект.НайтиДокумент( докСсылка );			
			
			Возврат докОбъект;
			
		ИначеЕсли (докСсылка.Вид() = "ВСД2_Инвентаризация") ИЛИ 
				(докСсылка.Вид() = "ВСД2_Производство") ИЛИ
				(докСсылка.Вид() = "ВСД2_Транзакция") ИЛИ
				(докСсылка.Вид() = "ВСД2") ИЛИ
				(докСсылка.Вид() = "ВСД2_ОбъединениеПартий") Тогда 
			
			ВыбДок = "";
			Док = СоздатьОбъект("Документ");
			Док.ВыбратьПодчиненныеДокументы(докСсылка.ДатаДок, КонГода(докСсылка.ДатаДок), докСсылка);
			Пока Док.ПолучитьДокумент() = 1 Цикл
				Если Док.ПометкаУдаления() = 1 Тогда
					Продолжить;
				КонецЕсли;
				Если (Док.Вид()="ВСД_АктуальныеПартии") Тогда
					Док.СделатьНеПроведенным();
					Док.УдалитьСтроки();
					Док.Записать();
					ВыбДок = Док.ТекущийДокумент();
				КонецЕсли;
			КонецЦикла;
			
			Если ПустоеЗначение( ВыбДок )=1 Тогда 
			
				докОбъект = СоздатьОбъект("Документ.ВСД_АктуальныеПартии");
				докОбъект.Новый();
				докОбъект.ДатаДок = Текущаядата();
				докОбъект.Отправитель_ХозСубъект = ГМ.ПолучитьКонстанту("Отправитель_ХозСубъект");
				докОбъект.Отправитель_Площадка = ГМ.ПолучитьКонстанту("Отправитель_Площадка");
				докОбъект.applicationID = ГМ.Компонента.ApplicationId;
				//докОбъект.Статус = ;
				Попытка докОбъект.Автор = ГМ.ПолучитьАвтора(); Исключение КонецПопытки;						
				Попытка докОбъект.Фирма = докСсылка.Фирма; Исключение КонецПопытки;
						
				докОбъект.ДокОснование = докСсылка;
				докОбъект.Записать();	
			Иначе
				докОбъект = СоздатьОбъект("Документ");
				докОбъект.НайтиДокумент( ВыбДок );			
				
			КонецЕсли;
			
			Возврат докОбъект;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат докОбъект;

КонецФункции

Функция ПолучитьИмяФайла_УровниУпаковки(Объект) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИмяФайла_УровниУпаковки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИмяФайла_УровниУпаковки(Объект);
	КонецЕсли;
	//}

	Каталог = ГМ.ПолучитьКонстанту("КаталогМодуля")+"Levels\";
	Если ФС.СуществуетФайл(Каталог) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(Каталог);
		Исключение
			Предупреждение("Не создан каталог Levels"); Возврат "";
		КонецПопытки;
	КонецЕсли;
    Если ТипЗначения(Объект) = 12 Тогда  //документ
   		Рез = Каталог+Объект.uuid+".mrk";
	Иначе
		Рез = Каталог+Объект.guid+".mrk";
    КонецЕсли;

	Возврат Рез;
КонецФункции

Функция ПолучитьИмяФайла_Партия_XML( Объект ) 
	
	Каталог = ГМ.ПолучитьКонстанту("КаталогМодуля")+"batch\";
	Если ФС.СуществуетФайл(Каталог) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(Каталог);
		Исключение
			Предупреждение("Не создан каталог batch"); Возврат "";
		КонецПопытки;
	КонецЕсли;

	Рез = Каталог+"batch_"+Объект.guid+".xml";

	Возврат Рез;	
КонецФункции

Функция ЗаписатьПартию2( stockEntry ) 

	//стандартное поведение функции
		active = stockEntry.selectSingleNode("bs:active").text;
		last = stockEntry.selectSingleNode("bs:last").text;
		uuid = stockEntry.selectSingleNode("bs:uuid").text;
		guid = stockEntry.selectSingleNode("bs:guid").text;
		st = stockEntry.selectSingleNode("bs:status").text;
		
		Партия = ГМ.НайтиПартиюПоGUID(guid);

		Попытка Партия.active = ?( active="true",1,0) Исключение	КонецПопытки;
		Попытка Партия.last = ?( last="true",1,0) Исключение	КонецПопытки;
		
		Если st="201" Тогда
			active="false";
			Партия.Статус = st;
			Партия.active = 0;
		КонецЕсли;
			
		Если active="false" Тогда
			Сообщить("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна","i");
			Если Партия.Выбран()=1 Тогда 
				Партия.Записать();
			КонецЕсли;
			Партия.Удалить(0);
			Возврат Партия;
		КонецЕсли;

		
		entryNumber = stockEntry.selectSingleNode("vd:entryNumber").text;
		updateDate = stockEntry.selectSingleNode("bs:updateDate").text;
		createDate = stockEntry.selectSingleNode("bs:createDate").text;

		ГМ.СообщитьИнфо(" ВСД_Партия от "+createDate+" # "+entryNumber, Партия.ТекущийЭлемент() );

		Партия.ВсдДата = ГМ.СтрокаВДату(createDate);
		Партия.ДатаИзменения = ГМ.СтрокаВДату( updateDate );
		Партия.Статус = st;
		Партия.GUID = guid;
		Партия.UUID = uuid;
		Партия.НомерЗаписи = entryNumber;


		batch = stockEntry.selectSingleNode("vd:batch");

		product 	= batch.selectSingleNode("vd:product").selectSingleNode("bs:guid").text;
		subProduct 	= batch.selectSingleNode("vd:subProduct").selectSingleNode("bs:guid").text;
		Попытка	productItem = batch.selectSingleNode("*[local-name()='productItem'] ");	Исключение	productItem = "";	КонецПопытки;

		Партия.Продукция 	= ГМ.НайтиПродукцию(product);
		Партия.ВидПродукции = ГМ.НайтиВидПродукции(subProduct);

		Партия.Продукция_Элемент = ГМ.Найти_Продукция_Элемент2(productItem, Партия.Продукция, Партия.ВидПродукции);
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
		Партия.НаименованиеПродукции = Партия.Продукция_Элемент.Наименование;

		volume 		= batch.selectSingleNode("vd:volume").text;
		Попытка	unitGuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:guid").text;Исключение	unitGuid = "";	КонецПопытки;
		Попытка	unitUuid	= batch.selectSingleNode("vd:unit").selectSingleNode("bs:uuid").text;Исключение	unitUuid = ""; КонецПопытки;
		
		Партия.Количество 	= Число(volume);
		Партия.ЕдиницаИзмерения = ГМ.НайтиЕдИзмерения( unitGuid, unitUUID );;

		ДатаИзготовления1=""; ДатаИзготовления2="";	ДатаИзготовления="";
		Попытка dateOfProduction = batch.selectSingleNode("vd:dateOfProduction"); исключение КонецПопытки;
		ГМ.Дата_из_XML(dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления);
		Партия.ДатаИзготовления1 = ДатаИзготовления1;
		Партия.ДатаИзготовления2 = ДатаИзготовления2;
		Партия.ДатаИзготовления =  ДатаИзготовления;

		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		Попытка expiryDate = batch.selectSingleNode("vd:expiryDate"); исключение КонецПопытки;
		ГМ.Дата_из_XML(expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности);
		Партия.ДатаСрокГодности = ДатаСрокГодности;
		Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
		Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
		
		Попытка
			НомераПартий = СписокНомеровПартий_из_XML(batch.selectNodes("vd:batchID"));
			ВремНомераПартий = ЗначениеизСтроки(НомераПартий);
			Если ВремНомераПартий.РазмерСписка() = 1 Тогда
				Партия.НомерПартии = ВремНомераПартий.ПолучитьЗначение(1);
			Иначе
				СписокСтрокойСразделителями = "";
				Для _нп =1 По ВремНомераПартий.РазмерСписка() Цикл
					СписокСтрокойСразделителями = СписокСтрокойСразделителями + ВремНомераПартий.ПолучитьЗначение(_нп)+";";
				КонецЦикла;
				Партия.НомерПартии = СписокСтрокойСразделителями;
			КонецЕсли;
		Исключение
			Ошибка = "Не удалось прочитать список № Партий для записи в справочник ";
			ГМ.СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(524)");;
		КонецПопытки;

	 //	Попытка	Скоропортящийся = batch.selectSingleNode("vd:perishable").text; Исключение	Скоропортящийся = ""; КонецПопытки;

		// <vd:origin> 	vd:BatchOrigin 	[0..1] 	Сведения о происхождении продукции.
		//		vd:productItem> 	dt:ProductItem 	[1..1] 	Наименование продукции в номенклатуре производителя.
		//			<bs:uuid> 	bs:UUID 	[0..1] 	Идентификатор версии номенклатуры продукции.
		//			<dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. 	<dt:globalID>85672854</dt:globalID>
		//			<dt:name> 	bs:String255 	[1..1] 	Наименование продукции.
		//			<dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		//		<vd:country> 	dt:Country 	[1..1] 	Страна происхождения партии продукции.
		// сведения о стране

		//Информация о предприятие-производителе продукции.
		Попытка 
			сзПроизводителей = Производители_из_XML(batch.selectSingleNode("vd:origin").selectNodes("vd:producer")); 
		   	Если сзПроизводителей.КоличествоСтрок()>0 Тогда
	   			Партия.Производитель_Площадка = сзПроизводителей.ПолучитьЗначение(1,1);
	   		КонецЕсли;
	   	Исключение КонецПопытки;

		//Попытка Некач = batch.selectSingleNode("vd:lowGradeCargo").text; Исключение	Некач = "";	КонецПопытки;
	//Список физической упаковки. vd:packageList
	// С уровнями
	
	// !!!!
		Попытка package = batch.selectSingleNode("vd:packageList").selectNodes("dt:package"); Исключение package = ""; КонецПопытки;
		УровниУпаковки = УровниУпаковки_из_XML( package );

		Если ПустоеЗначение(УровниУпаковки) = 0 Тогда
			ИмяФайла = ПолучитьИмяФайла_УровниУпаковки(Партия);
			ЗначениеВФайл(ИмяФайла,УровниУпаковки);
			Попытка Партия.ИмяФайлаУровниУпаковки = ИмяФайла Исключение 	КонецПопытки;
		Иначе
			Попытка Партия.ИмяФайлаУровниУпаковки = ""; Исключение 	КонецПопытки;
        КонецЕсли;


		//Попытка Партия.Получатель_ХозСубъект = ГМ.НайтиХСпоGUID( batch.selectSingleNode("vd:owner").selectSingleNode("bs:guid").text); Исключение	КонецПопытки;
		Партия.Получатель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		Партия.Получатель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");

		Если ПустоеЗначение(Партия.Автор)=1 Тогда
			Партия.Автор = ГМ.ПолучитьАвтора();
		КонецЕсли;

		Попытка Партия.Филиал = Партия.Автор.Филиал; Исключение КонецПопытки;

		Если Партия.Количество=0 Тогда

			Если ( ПустоеЗначение( Партия.ТекущийЭлемент() ) =0 ) Тогда
				ГМ.СообщитьИнфо("Партия guid ["+guid+"] uuid ["+uuid+"] Количество = 0. Партия удалена. ", Партия.ТекущийЭлемент());
				Партия.Удалить(0);
			Иначе
				Сообщить("Партия guid ["+guid+"] uuid ["+uuid+"] Количество = 0. Партия пропущена. ");
				Возврат "";
			КонецЕсли;
		КонецЕсли;

        // "105" Запись была создана после аннулирования ВСД ИЛИ транзакции, ссылающихся на запись журнала, 
        // помеченную для переноса в архив ИЛИ перенесённую в архив. 
        //{[+]serpent, 14.08.2019
        Если СокрЛП(Партия.Статус) = "105" Тогда
            Сообщить("Партия guid ["+guid+"] uuid ["+uuid+"]  помечена для переноса в архив И не может быть использована. Партия удалена. ","!");
            Партия.Удалить(0);
        КонецЕсли;
        //}[+]_
		
		Попытка
			ВСД_UUID = stockEntry.selectSingleNode("vd:vetDocument").selectSingleNode("bs:uuid").text;
			ДокВсдОбъект = НайтиВСДпоUUID( ВСД_UUID, "ВСД_Док", 0 );
			Партия.документВСД = ДокВсдОбъект.ТекущийЭлемент();
		Исключение КонецПопытки;
		
		Партия.ИмяФайлаXML = ПолучитьИмяФайла_Партия_XML( Партия.ТекущийЭлемент() );	
    	objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
		objDom.appendChild( stockEntry );
		objDom.save( Партия.ИмяФайлаXML );			
		
		Партия.Записать();		
		
		Возврат Партия.ТекущийЭлемент();
КонецФункции // ЗаписатьПартию2


Функция ЗагрузитьXML_Партии2(имяФайла, докОснование="", Смещение = 0, НачПериода = "", КонПериода = "" ) Экспорт

	Ответ = "";
	
	//стандартное поведение функции
    Сообщить("Загрузка XML-файла: "+ИмяФайла);

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

    objDom.setProperty("SelectionNamespaces", "
		|xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|xmlns:my='http://api.vetrf.ru/schema/cdm/application'
		|" );

    stockEntryList = objDom.selectNodes("//*[local-name() = 'stockEntry']") ;
	//stockEntryList = objDom.selectNodes("//merc:stockEntry") ;

	ГМ.СообщитьИнфо("Получено "+stockEntryList.length+" партий","");
	// ЖД посмотрим, сколько пришло партий
	Попытка ПришлоПартий = Число(stockEntryList.length); исключение ПришлоПартий = 1; КонецПопытки;
	
	Если stockEntryList.length>0 Тогда 
		докПартии = НайтиДокПартий( докОснование );			
	КонецЕсли;
		
    Для i1 = 0 По stockEntryList.length - 1 Цикл
		
        stockEntry=stockEntryList.item(i1);

		Партия = ЗаписатьПартию2( stockEntry );

		Попытка			
			Если (Партия<>"") Тогда
				
				Если ( Партия.active=1 ) Тогда 					
					докПартии.НоваяСтрока();
					докПартии.Партия = Партия.ТекущийЭлемент();
					докПартии.Количество = Партия.Количество;
				КонецЕсли;			
				
				Ответ = Партия;
				
			КонецЕсли;
		Исключение
		КонецПопытки;		
		
	КонецЦикла;
	
	//Если ПустоеЗначение(докПартии)=0 Тогда
	Попытка		
		докПартии.Записать();
		докПартии.Провести();
	Исключение
	КонецПопытки;
		
	//КонецЕсли;
	
	//Рекурсивный вызов
	Если ПришлоПартий = 1000 Тогда
		ГМ.УдалитьXML( имяФайла ); //На случай рекурсивного вызова
		
		спПараметры = СоздатьОбъект("СписокЗначений");	
		спПараметры.Установить("Отправитель_Площадка", ГМ.ПолучитьКонстанту("Отправитель_Площадка"));
		спПараметры.Установить("Отправитель_ХозСубъект", ГМ.ПолучитьКонстанту("Отправитель_ХозСубъект"));
		спПараметры.Установить("Смещение", Смещение+1000);
		спПараметры.Установить("УдалятьПартии", 0 );		
		спПараметры.Установить("ПартияНачПериода", НачПериода);
		спПараметры.Установить("ПартияКонПериода", КонПериода);
		
		ПолучитьПартии2( спПараметры );
	КонецЕсли;

	//Возвращает последнюю созданную партию = для гашения 1 запрос/документ = 1 партия
	Возврат Ответ;
	
КонецФункции


Функция Партии_ПоGUID_Запрос( ВыбПартия )
	
	Запрос = "
	|<SOAP-ENV:Envelope 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|<SOAP-ENV:Header/>
	|<SOAP-ENV:Body>
	|<apldef:submitApplicationRequest>	
	|<apldef:apiKey>"+ ГМ.ПолучитьКонстанту("param_api_key") +"</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ ГМ.ПолучитьКонстанту("param_issuer_id") +"</apl:issuerId>
	|<apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>	
	|<apl:data>
	|<merc:getStockEntryByGuidRequest>
	|<merc:localTransactionId>[GUID]</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ ГМ.ПолучитьКонстанту("param_intiator_login") +"</vd:login>
	|</merc:initiator>
	|<bs:guid>"+ ВыбПартия.guid +"</bs:guid>
	|<dt:enterpriseGuid>"+ВыбПартия.Получатель_Площадка.GUID+"</dt:enterpriseGuid>
	|</merc:getStockEntryByGuidRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";	
	Возврат Запрос;
КонецФункции

Функция Партии_ПолучитьПоGUID( ВыбПартия ) Экспорт
	t1 = ГМ.Старт();	
	
	Сообщить("Отправляем запрос партий По GUID "+ВыбПартия);
	ЗапросXML = Партии_ПоGUID_Запрос( ВыбПартия );	
	Service = "platform/services/2.1/ApplicationManagementService";
	Action = "submitApplicationRequest";	
	
	метод = ГМ.Компонента.GetMethod();
    метод.Service = Service;
    метод.Action = Action;

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Если ПустоеЗначение(appID)=0 Тогда
		Результат = "";
		Для А=1 По 10 Цикл
			Если ((Результат="IN_PROCESS") ИЛИ (ПустоеЗначение(Результат)=1)) Тогда

				ГМ.Пауза( );

				Сообщить("Отправляем запрос на получение ответа [партии По GUID]" );
				Результат = ГМ.ПолучитьРезультатСервер( appID );
				Сообщить("Результат = "+Результат);

				ЗагрузитьXML_Партии2( ГМ.Компонента.LogFilename );

				ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "ПолучитьПартии", );
	
	Возврат appID;
КонецФункции
//}

//{================= Загрузить ВСД ======================

//создает струутуру ТаблицыЗначений для загрузки списка ВСД
Функция СтруктураТзВСД2() Экспорт
	
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СтруктураТзВСД2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СтруктураТзВСД2();
	КонецЕсли;
	//}
	
	тзВСД = СоздатьОбъект("ТаблицаЗначений");
	//тзВСД.НоваяКолонка("сЦвет",,,,,,);
	тзВСД.НоваяКолонка("Пометка",,,,"V",5,);
	//тзВСД.НоваяКолонка("ВладелецХС",,,,"Владелец ХозСубъект",20,);  //1С Элемент справочника. owner
	тзВСД.НоваяКолонка("Отправитель_ХозСубъект",,,,"Отправитель ХозСубъект",20,);  //1С Элемент справочника. owner
	тзВСД.НоваяКолонка("НаименованиеПродукции","Строка",,,"Продукция");
	тзВСД.НоваяКолонка("Количество","Число",15,3,"Объем", 10);
	тзВСД.НоваяКолонка("КоличествоПринять","Число",15,3,"Принять", 10);
	тзВСД.НоваяКолонка("КоличествоВозврат","Число",15,3,"Вернуть", 5);
	
	тзВСД.НоваяКолонка("Продукция_Элемент",,,,"Продукция_Элемент",10);
	тзВСД.НоваяКолонка("Номенклатура",,,,"Номенклатура",10);

	//тзВСД.НоваяКолонка("ПлощадкаИзПЭ","Справочник.ВСД_Площадка",,,"Площадка П/Э",10,);  //1С Элемент справочника
	//тзВСД.НоваяКолонка("ПлощадкаИзВСД","Справочник.ВСД_Площадка",,,"Площадка ВСД",10,);  //1С Элемент справочника
	
	тзВСД.НоваяКолонка("ТтнНомер",,,,"№ ТТН",10);
	тзВСД.НоваяКолонка("ВсдДата",,,,"Дата ВСД",10);
	
	тзВСД.НоваяКолонка("ДокВСД");
	тзВСД.НоваяКолонка("ВСД_ЭкземплярКласса");
	
	тзВСД.НоваяКолонка("ДокОснование","Документ",,,"Док основание",10);
	тзВСД.НоваяКолонка("uuid","Строка",,,"UUID документа");
	тзВСД.НоваяКолонка("Партия",);
	
	тзВСД.НоваяКолонка("ФормаВСД");
	тзВСД.НоваяКолонка("Статус");
	тзВСД.НоваяКолонка("СтатусВСД");
	тзВСД.НоваяКолонка("типВСД");	
	
	тзВСД.НоваяКолонка("ВсдСерия");
	тзВСД.НоваяКолонка("ВсдНомер");
	
	
	тзВСД.НоваяКолонка("GTIN",,,,"Штрихкод / GTIN",10);
	тзВСД.НоваяКолонка("Артикул",,,,"Артикул",10);
	тзВСД.НоваяКолонка("ФасовкаФормаУпаковки");
	тзВСД.НоваяКолонка("ФасовкаНаименование");
	тзВСД.НоваяКолонка("ФасовкаКоличество");
	тзВСД.НоваяКолонка("ФасовкаЕдиницаИзм");
	тзВСД.НоваяКолонка("ФасовкаОбъем");
	
	тзВСД.НоваяКолонка("ДатаДок");
	тзВСД.НоваяКолонка("Отправитель_ХозСубъект");
	тзВСД.НоваяКолонка("Отправитель_Площадка");
	тзВСД.НоваяКолонка("Получатель_ХозСубъект");
	тзВСД.НоваяКолонка("Получатель_Площадка");
	тзВСД.НоваяКолонка("Производитель_Площадка");	
	тзВСД.НоваяКолонка("Продукция");
	тзВСД.НоваяКолонка("ВидПродукции");
	
	тзВСД.НоваяКолонка("ЕдиницаИзмерения");
	тзВСД.НоваяКолонка("ДатаИзготовления1",,,,"ДатаИзготовления1",10);
	тзВСД.НоваяКолонка("ДатаИзготовления");
	тзВСД.НоваяКолонка("ДатаИзготовления2",,,,"ДатаИзготовления2",10);
	тзВСД.НоваяКолонка("ДатаСрокГодности1",,,,"ДатаСрокГодности1",10);
	тзВСД.НоваяКолонка("ДатаСрокГодности");
	тзВСД.НоваяКолонка("ДатаСрокГодности2",,,,"ДатаСрокГодности2",10);
	тзВСД.НоваяКолонка("НомерПартии",,,,"№ партии", 10);
	тзВСД.НоваяКолонка("КодТНВЭД",,,,"Код ТНВЭД", 10);
	тзВСД.НоваяКолонка("ПроизводителиСписок");
	тзВСД.НоваяКолонка("УровниУпаковки");
	тзВСД.НоваяКолонка("ТипТС");
	тзВСД.НоваяКолонка("номеравто");
	тзВСД.НоваяКолонка("номерПолуприцепа");
	тзВСД.НоваяКолонка("номерКонтейнера");
	тзВСД.НоваяКолонка("термическоесостояние");
	//тзВСД.НоваяКолонка("ВСДместность");
	//тзВСД.НоваяКолонка("особыеотметки");
	тзВСД.НоваяКолонка("ТтнТип","Число",1,0);
	тзВСД.НоваяКолонка("ТтнСерия");
	тзВСД.НоваяКолонка("ТтнДата","Дата");
	тзВСД.НоваяКолонка("РезультатыИсследований");
	тзВСД.НоваяКолонка("cargoInspected");
	тзВСД.НоваяКолонка("Перевозчик_ХозСубъект");
	тзВСД.НоваяКолонка("Скоропортящийся");
	тзВСД.НоваяКолонка("Некачественный");
	тзВСД.НоваяКолонка("Страна_GUID");
	тзВСД.НоваяКолонка("Фирма");
	тзВСД.НоваяКолонка("ВидВСД");
	тзВСД.НоваяКолонка("applicationID");
	тзВСД.НоваяКолонка("Комментарий");
	тзВСД.НоваяКолонка("СвязанныеДокументы");
	тзВСД.НоваяКолонка("МаршрутСледования");
	тзВСД.НоваяКолонка("Цель");	
	
	Возврат тзВСД;
КонецФункции

Функция ПолучитьИмяФайла_ВСД_XML(Док) Экспорт

	Каталог = ГМ.ПолучитьКонстанту("КаталогМодуля")+"vd\";
	Если ФС.СуществуетФайл(Каталог) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(Каталог);
		Исключение
			Предупреждение("Не создан каталог vd"); Возврат "";
		КонецПопытки;
	КонецЕсли;

	Рез = Каталог+"vd_"+СокрЛП(Док.UUID)+".xml";

	Возврат Рез;
КонецФункции

//Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="",докОбъект = "" ) Экспорт
Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="", СохранитьДокументВСД=0, Префикс="нет") Экспорт
	// Тестирование
	// Параметр докОбъект это ТаблицаЗначений, в которую загрузим ВСД, вместо создания документов в БД.
	
	//стандартное поведение функции
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);

	Если ГМ.НайтиОшибки(докОснование)>0 Тогда
		Возврат "";
	КонецЕсли;


    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|xmlns:my='http://api.vetrf.ru/schema/cdm/application'
		|xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'
		|" );

	тзРезультат = СтруктураТзВСД2();
		
	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

	Если Префикс="нет" Тогда 		
	
		vetDocumentList = objDom.selectNodes("//*[local-name() = 'vetDocument']") ;
		
	Иначе
		
		// в StockEntry добавили реквизит vetDocument, поэтому надо искать с префиксом
		//vetDocumentList = objDom.selectNodes("//merc:vetDocument") ;
		vetDocumentList = objDom.selectNodes("//"+Префикс+":vetDocument") ;
		
	КонецЕсли;
	
	    Для i1 = 0 По vetDocumentList.length - 1 Цикл
	        vetDocument=vetDocumentList.item(i1);
	
			// ищем Сведения об измененных ВСД.
			Попытка
				forma 	 = vetDocument.selectSingleNode("vd:vetDForm").text;
			Исключение
				Продолжить;//Это привязанный к партии ВСД
			КонецПопытки;
			//uuid = vetDocument.selectSingleNode("*[local-name()='uuid']").text;
	
			тзРезультат.НоваяСтрока();
			тзРезультат.Пометка=0;
	
			ВСД_Класс = СоздатьОбъект("ВСД_vetDocument");
			тзРезультат.ДокВСД = ВСД_Класс.Заполнить( vetDocument, докОснование );
			тзРезультат.ДокВСД = ВСД_Класс.ВСД_Док;
			тзРезультат.ВСД_ЭкземплярКласса = ВСД_Класс;
			
			//тзРезультат.UUID = uuid;	
			
		КонецЦикла;

	Возврат тзРезультат;	
	
КонецФункции


//Функция ПолучитьРезультат_ВСД_2(applicationID, докСсылка="", Смещение = 0,  ПартияНачПериода = "", ПартияКонПериода = "", Префикс="merc") Экспорт
Функция ПолучитьРезультат_ВСД_2( спПараметры, ИспользоватьПаузу = 1, Партия = "") Экспорт
	
	//спПараметры = СоздатьОбъект("СписокЗначений");	
	applicationID = спПараметры.Получить("applicationID");
	докСсылка = спПараметры.Получить("докСсылка");
	Смещение = спПараметры.Получить("Смещение");
	Если ПустоеЗначение(Смещение)=1 Тогда 
		Смещение = 0;
	КонецЕсли;
	ПартияНачПериода = спПараметры.Получить("ПартияНачПериода");
	ПартияКонПериода = спПараметры.Получить("ПартияКонПериода");
	Префикс = спПараметры.Получить("Префикс");
	Если ПустоеЗначение(Префикс)=1 Тогда 
		Префикс = "merc";
	КонецЕсли;
	
	//Реквизит Смещение добавлен для возможности рекурсивного вызова ПолучитьПартии2
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Если ИспользоватьПаузу=1 Тогда 
		ГМ.Пауза( );
	КонецЕсли;

	ГМ.СообщитьИнфо("Получаем ответ для ["+докСсылка+"] " + applicationID, докСсылка);
	Результат = ГМ.ПолучитьРезультатСервер( applicationID );
    Файл_Ответа_XML = ГМ.Компонента.LogFilenameResponse;
	Если ПустоеЗначение(докСсылка)=0 Тогда
		ГМ.СохранитьСтатусЗапроса(докСсылка);
		
		тзВСД = ЗагрузитьXML_ВСД2( Файл_Ответа_XML , докСсылка, 1, Префикс );
				
		Попытка 
			СтатусВСД = тзВСД.ПолучитьЗначение(1,"ДокВСД").СтатусВСД; 
		Исключение 
			СтатусВСД=""; 
		КонецПопытки;
			
		ГМ.СохранитьОтветВДокументе(докСсылка, СтатусВСД, applicationID);
	КонецЕсли;

    Партия = ЗагрузитьXML_Партии2( Файл_Ответа_XML, докСсылка, Смещение, ПартияНачПериода, ПартияКонПериода); 
	
	ГМ.УдалитьXML( Файл_Ответа_XML);

	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьВСДпоUUID_ЗапросXML( док )
	
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	| xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	| xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	| xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	| xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	| xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	| xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|<SOAP-ENV:Header/>
	|<SOAP-ENV:Body>
	|<apldef:submitApplicationRequest>
	|<apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|<apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|<apl:data>
	|<merc:getVetDocumentByUuidRequest>
	|<merc:localTransactionId>[GUID]</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|</merc:initiator>
	|<bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>
	|<dt:enterpriseGuid>"+ СокрЛП(Док.Отправитель_Площадка.GUID) +"</dt:enterpriseGuid>
	|</merc:getVetDocumentByUuidRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗагрузитьВСДпоUUID( докОснование ) Экспорт
	
	//тзДок = СоздатьОбъект("ТаблицаЗначений");
	тзДок = ГМ.Выбрать_ВСД( докОснование );
	
	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку() = 1 Цикл
				
		ЗапросXML = ЗагрузитьВСДпоUUID_ЗапросXML( тзДок.док );
	
		метод = ГМ.Компонента.GetMethod();
		метод.Service = "platform/services/2.1/ApplicationManagementService";
	    метод.Action = "submitApplicationRequest";
	
		appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
		ГМ.СохранитьЗапросВДокументе( тзДок.док, appID );
		
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	    Результат = "";
		Если ПустоеЗначение(appID)=0 Тогда
			спПараметры = СоздатьОбъект("СписокЗначений");	
			спПараметры.Установить("applicationID", appID);
			спПараметры.Установить("докСсылка", тзДок.док);
			спПараметры.Установить("Смещение", 0);
			спПараметры.Установить("Префикс", "нет");			
	
			//Результат = ПолучитьРезультат_ВСД_2( appID, тзДок.док, 0, , ,  "нет" );
			Результат = ПолучитьРезультат_ВСД_2( спПараметры );
			
			ГМ.СообщитьИнфо("Результат = "+Результат, тзДок.док);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда
					Результат = ПолучитьРезультат_ВСД_2( спПараметры );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	КонецЦикла;
	Возврат Результат;
	
КонецФункции

//}

//{====================  Получить Партии  ===================================

Функция ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение=0, НачПериода = "", КонПериода = "") Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии2_ТекстЗапросаXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение, НачПериода, КонПериода);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	НеНулевые = ГМ.ПолучитьКонстанту("ЗагружатьТолькоНеПустыеПартии");
	
	//выражение [GUID] будет заменено на новый Guid в формате: d82d83f7-944b-45e9-88dc-67892eae1e3e
	Запрос = "
	|<SOAP-ENV:Envelope
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|<SOAP-ENV:Header/>
	|<SOAP-ENV:Body>
	|<apldef:submitApplicationRequest>
	|<apldef:apiKey>"+ГМ.СписокКонстант.Получить("param_api_key")+"</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|<apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|<apl:data>
	|<merc:getStockEntryListRequest>
	|<merc:localTransactionId>[GUID]</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ГМ.СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|</merc:initiator>
	|<bs:listOptions>
	|<bs:count>1000</bs:count>
	|<bs:offset>" + Смещение + "</bs:offset>
	|</bs:listOptions>
	|<dt:enterpriseGuid>"+СокрЛП(Отправитель_Площадка.GUID)+"</dt:enterpriseGuid>";
	Если (ПустоеЗначение(НачПериода) = 0) ИЛИ (НеНулевые = 1) Тогда
		Запрос = Запрос +"
    	|<merc:searchPattern>";
		Если НеНулевые = 1 Тогда
			Запрос = Запрос +"
	    	|<vd:blankFilter>NOT_BLANK</vd:blankFilter>";
		КонецЕсли;
		Если ПустоеЗначение(НачПериода) = 0 Тогда
			Запрос = Запрос +"
	    	|<vd:receiptDateInterval>
			| <bs:beginDate>"+ ГМ.Преобразовать_Дата_в_Строка(НачПериода, "T00:00:00") +"</bs:beginDate>
			| <bs:endDate>"+ ГМ.Преобразовать_Дата_в_Строка(КонПериода, "T23:59:59") +"</bs:endDate>
		    |</vd:receiptDateInterval>";
		КонецЕсли;
		Запрос = Запрос +"
    	|</merc:searchPattern>";
	КонецЕсли;
	Запрос = Запрос +"
	|</merc:getStockEntryListRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

//Функция  ПолучитьПартии2(Отправитель_Площадка, Смещение=0, УдалятьПартии=1, ПартияНачПериода = "", ПартияКонПериода = "", НомерПовтора=0) Экспорт
Функция  ПолучитьПартии2( спПараметрыФункции ) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьПартии2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьПартии2( спПараметрыФункции );
	КонецЕсли;
	//}

	Отправитель_Площадка = спПараметрыФункции.Получить("Отправитель_Площадка");
	Отправитель_ХозСубъект = спПараметрыФункции.Получить("Отправитель_ХозСубъект");
	Смещение = спПараметрыФункции.Получить("Смещение");
	Если ПустоеЗначение(Смещение)=1 Тогда 
		Смещение = 0;
	КонецЕсли;
	ПартияНачПериода = спПараметрыФункции.Получить("ПартияНачПериода");
	ПартияКонПериода = спПараметрыФункции.Получить("ПартияКонПериода");
	УдалятьПартии = спПараметрыФункции.Получить("УдалятьПартии");
	Если СокрЛП(УдалятьПартии)="" Тогда 
		УдалятьПартии = 1;
	КонецЕсли;
	НомерПовтора = спПараметрыФункции.Получить("НомерПовтора");
	Если СокрЛП(НомерПовтора)="" Тогда 
		НомерПовтора = 1;
	КонецЕсли;
	
	КоличествоПовторовОтправки = ГМ.ПолучитьКонстанту("КоличествоПовторовОтправки");
	Если НомерПовтора > КоличествоПовторовОтправки Тогда 
		ГМ.СообщитьИнфо("Превышено количество повторов отправки [ПолучитьПартии2]");
		Возврат "";
	КонецЕсли;
	
	t1 = ГМ.Старт();	
	
	//стандартное поведение функции
	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	ЗапросXML = ПолучитьПартии2_ТекстЗапросаXML(Отправитель_Площадка, Смещение, ПартияНачПериода, ПартияКонПериода);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить(" запрос № "+НомерПовтора+" из "+КоличествоПовторовОтправки+" "+ГМ.Компонента.ErrorMessage+" appID = "+appID);
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Если ГМ.ПолучитьКонстанту("ЗагружатьТолькоНеПустыеПартии")=1 Тогда					
			Если УдалятьПартии=1 Тогда					
				// удаляем только если параметр["Загружать только активные партии (для Ветис.API версии >= 2.1)?"] = 1
				// При изменении партий в Меркурии (на сайте) - старые партии пропадают, появляются новые
				// поэтому в 1С остаются "остатки", которые нужно удалять
				Если ГМ.ПолучитьКонстанту("ОчищатьСправочникВСД_Партии")=1 Тогда
					Состояние("Удаление справочника ВСД_Партии");					
					СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
					НачатьТранзакцию(); //Ускоримся
					СпрПартия.ВыбратьЭлементы();
					Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
						Если ПустоеЗначение(ПартияНачПериода) = 0 Тогда // не удаляем, т.к. запрашиваем По периоду
							Если (СпрПартия.ВсдДата < ПартияНачПериода) ИЛИ ( СпрПартия.ВсдДата > ПартияКонПериода) Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если ( СпрПартия.Получатель_Площадка = Отправитель_Площадка ) И
							 (СпрПартия.Получатель_ХозСубъект = Отправитель_ХозСубъект) Тогда
							СпрПартия.Удалить(0);
						КонецЕсли;
					КонецЦикла;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ГМ.ПолучитьКонстанту("КонтрольОстатковПоРегистру")=1 Тогда 		
			ДокОбъект = СоздатьОбъект("Документ.ВСД_АктуальныеПартии");
			ДокОбъект.Новый();
			ДокОбъект.ДатаДок = ТекущаяДата();
			ДокОбъект.АвтоВремяТекущее();
			ДокОбъект.НачДата = ПартияНачПериода;
			ДокОбъект.КонДата = ПартияКонПериода;
			ДокОбъект.Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
			ДокОбъект.Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");		
			ДокОбъект.Записать();
			докПартии = ДокОбъект.ТекущийДокумент();
		Иначе
			докПартии = "";
		КонецЕсли;
		
		спПараметры = СоздатьОбъект("СписокЗначений");	
		спПараметры.Установить("applicationID", appID);
		спПараметры.Установить("докСсылка", докПартии);
		спПараметры.Установить("Смещение", Смещение);
		спПараметры.Установить("ПартияНачПериода", ПартияНачПериода);
		спПараметры.Установить("ПартияКонПериода", ПартияКонПериода);

		Результат = ПолучитьРезультат_ВСД_2( спПараметры ); 
		Сообщить("Результат = "+Результат+" запрос № "+НомерПовтора+" из "+КоличествоПовторовОтправки+" "+ГМ.Компонента.ErrorMessage);
		
		Пока (НомерПовтора <= КоличествоПовторовОтправки ) Цикл
			
			Если (Результат="IN_PROCESS") ИЛИ (ПустоеЗначение(Результат)=1) Тогда
				
				Результат = ПолучитьРезультат_ВСД_2( спПараметры );
				Сообщить("Результат = "+Результат+" запрос № "+НомерПовтора+" из "+КоличествоПовторовОтправки+" "+ГМ.Компонента.ErrorMessage);
				
			ИначеЕсли (Результат="REJECTED") Тогда

				// Новый запрос				
				спПараметрыФункции.Установить("НомерПовтора", (НомерПовтора+1) );
				
				ПолучитьПартии2( спПараметрыФункции );				
				Прервать;
				
			КонецЕсли;
			
			НомерПовтора=НомерПовтора+1;
			
		КонецЦикла;
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "ПолучитьПартии2");
	ГМ.СообщитьИнфо("Загрузка партий завершена");
	
	Возврат appID;

КонецФункции
//}

//{ =================== Список ВСД
//Функция ПолучитьСписокВСД2_ЗапросXML(Площадка, vetDocumentType, vetDocumentStatus, Смещение) Экспорт
Функция ПолучитьСписокВСД2_ЗапросXML( спУсловия ) Экспорт

	//спУсловия = СоздатьОбъект("СписокЗначений");
	Площадка = спУсловия.Получить("Площадка");
	Если ПустоеЗначение(Площадка)=1 Тогда
		Сообщить("В условиях не указана Площадка","!");
		Возврат "";
	КонецЕсли;
	vetDocumentType = спУсловия.Получить("vetDocumentType");
	Если ПустоеЗначение(vetDocumentType)=1 Тогда
		vetDocumentType = "INCOMING";
	КонецЕсли;
	vetDocumentStatus = спУсловия.Получить("vetDocumentStatus");
	Если ПустоеЗначение(vetDocumentStatus)=1 Тогда
		vetDocumentStatus = "CONFIRMED";
	КонецЕсли;
	Смещение = спУсловия.Получить("Смещение");
	Если ПустоеЗначение(Смещение)=1 Тогда
		Смещение = 0;
	КонецЕсли;

	НачДата = спУсловия.Получить("НачДата");
	Если ПустоеЗначение(НачДата)=1 Тогда
		НачДата = 0;
	КонецЕсли;
	КонДата = спУсловия.Получить("КонДата");
	Если ПустоеЗначение(КонДата)=1 Тогда
		КонДата = 0;
	КонецЕсли;

	Поставщик_ХозСубъект = спУсловия.Получить("Поставщик_ХозСубъект");
	Поставщик_Площадка = спУсловия.Получить("Поставщик_Площадка");

	НомерДок = спУсловия.Получить("НомерДок");
	ДатаДок = спУсловия.Получить("ДатаДок");

	//	DocumentType v2.0
	// http://help.vetrf.ru/wiki/DocumentType_v2.0
	//1	Товарно-транспортная накладная
	//5	Транспортная накладная
	//6	ТОРГ-12
	ТипДок = спУсловия.Получить("ТипДок");
	Если ПустоеЗначение(ТипДок)=1 Тогда
		ТипДок = 1;
	КонецЕсли;


	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|<SOAP-ENV:Header/>
	|<SOAP-ENV:Body>
	|<apldef:submitApplicationRequest>
	|<apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|<apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|<apl:data>
	|<merc:getVetDocumentListRequest>
	|<merc:localTransactionId>[GUID]</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|</merc:initiator>
	|<bs:listOptions>
	|<bs:count>1000</bs:count>
	|<bs:offset>"+Смещение+"</bs:offset>
	|</bs:listOptions>
	|<vd:vetDocumentType>"+ vetDocumentType +"</vd:vetDocumentType>
	|<vd:vetDocumentStatus>"+ vetDocumentStatus +"</vd:vetDocumentStatus>
	|";
	//2.1
	Если ПустоеЗначение(НачДата)=0 Тогда
		Запрос=Запрос+"
		|<vd:issueDateInterval>
		|<bs:beginDate>"+ ГМ.Преобразовать_Дата_в_Строка( НачДата, "T00:00:00" ) +"</bs:beginDate>
		|<bs:endDate>"+ ГМ.Преобразовать_Дата_в_Строка( КонДата, "T23:59:59") +"</bs:endDate>
		|</vd:issueDateInterval>";
	КонецЕсли;

	Если (ПустоеЗначение(Поставщик_ХозСубъект)=0) ИЛИ ( ПустоеЗначение(Поставщик_Площадка)=0 ) Тогда
		Запрос=Запрос+" <vd:consignor>";
		Если ПустоеЗначение(Поставщик_ХозСубъект)=0 Тогда
			Запрос=Запрос+"
			|<dt:businessEntity>
			|<bs:guid>"+ СокрЛП( Поставщик_ХозСубъект.GUID ) +"</bs:guid>
			|</dt:businessEntity>";
		КонецЕсли;
		Если ПустоеЗначение(Поставщик_Площадка)=0 Тогда
			Запрос=Запрос+"
			|<dt:enterprise>
			|<bs:guid>"+ СокрЛП(Поставщик_Площадка.GUID) +"</bs:guid>
			|</dt:enterprise>";
		КонецЕсли;
		Запрос=Запрос+" </vd:consignor>";
	КонецЕсли;
	Если ПустоеЗначение(НомерДок)=0 Тогда
		Запрос=Запрос+"
		|<vd:referencedDocument>
		|<vd:issueNumber>"+ СокрЛП(НомерДок) +"</vd:issueNumber>
		|<vd:issueDate>"+ ДатаДок +"</vd:issueDate>
		|<vd:type>"+ ТипДок +"</vd:type>
		|</vd:referencedDocument>";
	КонецЕсли;
	//
	Запрос=Запрос+"
	|<dt:enterpriseGuid>"+ СокрЛП(Площадка.GUID) +"</dt:enterpriseGuid>
	|</merc:getVetDocumentListRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	Возврат Запрос;
КонецФункции


// http://help.vetrf.ru/wiki/GetVetDocumentListOperation_v2.0#scenario1
Функция  ПолучитьСписокВСД( спУсловия ) Экспорт
//	список ВСД может быть отфильтрован По следующим критериям
//	Тип ВСД:
//        входящий ВСД;				INCOMING
//        исходящий ВСД;			OUTGOING
//        производственный ВСД;		PRODUCTIVE
//        транспортный ВСД;			TRANSPORT
//        возвратный ВСД.			RETURNABLE
//    Статус ВСД:
//        оформлен;		CONFIRMED 	Оформлен. Действующий сертификат, По которому разрешено совершать транзакцию с грузом.
//        погашен;		UTILIZED 	Погашен. Действующий сертификат, По которому транзакция уже была совершена.
//        аннулирован.	WITHDRAWN 	Аннулирован. Не действующий более сертификат.

	Площадка = спУсловия.Получить("Площадка");
	Если ПустоеЗначение(Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

~Метка:  //+
	ЗапросXML = ПолучитьСписокВСД2_ЗапросXML( спУсловия );

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

    Результат = "";
	Если ПустоеЗначение(appID)=0 Тогда
		
		спПараметры = СоздатьОбъект("СписокЗначений");	
		спПараметры.Установить("applicationID", appID);
		
		Результат = ПолучитьРезультат_ВСД_2( спПараметры );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2( спПараметры );
			КонецЕсли;
		КонецЦикла;
		//+
		Если Результат="REJECTED" Тогда
			Перейти ~метка;
		КонецЕсли;
		//+
	КонецЕсли;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Возврат appID;

КонецФункции

Функция ОтправитьЗапрос2( док, ЗапросXML, ПолучитьОтветВетис=1)
	
	Если ГМ.ПолучитьКонстанту("ОтправлятьЗапросБезПроверкиСтатусаДок")<>1 Тогда 
		Если (ПустоеЗначение(Док.Статус)=1) ИЛИ (СокрЛП(Док.Статус) = "COMPLETED") ИЛИ (СокрЛП(Док.Статус) = "REJECTED") Тогда 
			// все ок
		Иначе
			ГМ.СообщитьОбОшибке("Запрос с applicationID = "+ Док.applicationID +" отправлен, но ответ Ветис не получен
			|ЗАПРЕЩЕНА отправка запросов, по которым не получен ответ Ветис  !
			|Для получения ответа нажмите кнопку [ВСД] -> [Получить ответ Ветис] ");
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе( док, appID );

	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ( ПустоеЗначение(appID)=0 ) И (ПолучитьОтветВетис=1) Тогда

		спПараметры = СоздатьОбъект("СписокЗначений");	
		спПараметры.Установить("applicationID", appID);
		спПараметры.Установить("докСсылка", док );

		Результат = ПолучитьРезультат_ВСД_2( спПараметры );
		ГМ.СообщитьИнфо("Результат = "+Результат, док);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2( спПараметры );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции

//}


//{ ================== Лабораторные исследования =========================

Функция ВСД_ЛабораторныеИсследования_ЗапросXML(док)
	//док = СоздатьОбъект("Документ.ВСД_ЛабораторныеИсследования");
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_ЛабораторныеИсследования_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_ЛабораторныеИсследования_ЗапросXML(док);
	КонецЕсли;
	//}

	Запрос ="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|<SOAP-ENV:Header/>
	|<SOAP-ENV:Body>
	|<apldef:submitApplicationRequest>
	|<apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|<apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") +"</apl:issueDate>
	|<apl:data>
	|<merc:updateVeterinaryEventsRequest>
	|<merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|</merc:initiator>
	|<merc:enterprise>
	|<bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
	|</merc:enterprise>
	|<vd:stockEntry>
	|<bs:guid>"+ СокрЛП( док.Партия.GUID ) +"</bs:guid>
	|<vd:vetEventList>";
	
	Если док.Вид()="ВСД2_ЛабораторныеИсследования" Тогда 
		Запрос = Запрос+"
		|<vd:laboratoryResearch>
		|<vd:actualDateTime>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаРезультата, "T00:00:00") +"</vd:actualDateTime>
		|<vd:operator>
		|<dt:name>" + СокрЛП(док.НаименованиеЛаборатории) + "</dt:name>
		|</vd:operator>
		|<vd:referencedDocument>
		|<vd:issueNumber>"+ СокрЛП(док.НомерАктаОтбораПроб) +"</vd:issueNumber>
		|<vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаОтбораПроб) +"</vd:issueDate>
		|<vd:type>9</vd:type>
		//|<vd:relationshipType>6</vd:relationshipType>
		|</vd:referencedDocument>
		|<vd:expertiseID>"+ СокрЛП(док.НомерЭкспертизы) +"</vd:expertiseID>
		|<vd:disease>
		|<dt:name>"+ СокрЛП(док.НаименованиеПоказателя) +"</dt:name>
		|</vd:disease>
		|<vd:method>
		|<dt:name>"+ СокрЛП(док.МетодИсследования) +"</dt:name>
		|</vd:method>
		//Допустимые значения: UNKNOWN, POSITIVE, NEGATIVE
		|<vd:result>"+ СокрЛП(док.РезультатИсследования.Идентификатор()) +"</vd:result>
		|<vd:conclusion>"+ СокрЛП(док.Заключение)  +"</vd:conclusion>
		|</vd:laboratoryResearch>";
	Иначе
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Запрос = Запрос+"
			|<vd:laboratoryResearch>
			|<vd:actualDateTime>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаРезультата, "T00:00:00") +"</vd:actualDateTime>
			|<vd:operator>
			|<dt:name>" + СокрЛП(док.НаименованиеЛаборатории) + "</dt:name>
			|</vd:operator>
			|<vd:referencedDocument>
			|<vd:issueNumber>"+ СокрЛП(док.НомерАктаОтбораПроб) +"</vd:issueNumber>
			|<vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаОтбораПроб) +"</vd:issueDate>
			|<vd:type>9</vd:type>
			//|<vd:relationshipType>6</vd:relationshipType>
			|</vd:referencedDocument>
			|<vd:expertiseID>"+ СокрЛП(док.НомерЭкспертизы) +"</vd:expertiseID>
			|<vd:disease>
			|<dt:name>"+ СокрЛП(док.НаименованиеПоказателя) +"</dt:name>
			|</vd:disease>
			|<vd:method>
			|<dt:name>"+ СокрЛП(док.МетодИсследования) +"</dt:name>
			|</vd:method>
			//Допустимые значения: UNKNOWN, POSITIVE, NEGATIVE
			|<vd:result>"+ СокрЛП(док.РезультатИсследования.Идентификатор()) +"</vd:result>
			|<vd:conclusion>"+ СокрЛП(док.Заключение)  +"</vd:conclusion>
			|</vd:laboratoryResearch>";			
		КонецЦикла;	
	КонецЕсли;
	
	Запрос = Запрос+"
	|</vd:vetEventList>
	|</vd:stockEntry>
	|</merc:updateVeterinaryEventsRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_ЛабораторныеИсследования( док )

	Если ( ПустоеЗначение( док.applicationID ) = 0 ) И ( СокрЛП(док.Статус) <> "REJECTED") Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Возврат 1;
КонецФункции

Функция Отправить_ВСД_ЛабораторныеИсследования( док ) Экспорт

	t1 = ГМ.Старт();
	
	Если Проверка_ВСД2_ЛабораторныеИсследования(док)=0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	ЗапросXML = ВСД_ЛабораторныеИсследования_ЗапросXML(док);
	
	appID = ОтправитьЗапрос2( док, ЗапросXML );

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД_ЛабораторныеИсследования", док);
	
	Возврат appID;
КонецФункции
//}

//==================== Мультимодальные перевозки
//http://help.vetrf.ru/wiki/PrepareOutgoingConsignmentOperation_v2.0#.D0.9C.D1.83.D0.BB.D1.8C.D1.82.D0.B8.D0.BC.D0.BE.D0.B4.D0.B0.D0.BB.D1.8C.D0.BD.D1.8B.D0.B5_.D0.BF.D0.B5.D1.80.D0.B5.D0.B2.D0.BE.D0.B7.D0.BA.D0.B8
// док = ВСД2_Транзакция
Функция Запрос_МаршрутДоставки( док, НомерСтроки=0 )
	
	Если ТипЗначенияСтр( док )= "Документ" Тогда 
		Если Метаданные.Документ(док.Вид()).РеквизитШапки("ИмяФайлаМаршрутДоставки").Выбран() = 0 Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(док.ИмяФайлаМаршрутДоставки) = 1 Тогда
		Возврат "";
	КонецЕсли;

	тзМаршрутДоставки = ЗначениеИзФайла( док.ИмяФайлаМаршрутДоставки );
	Если ТипЗначенияСтр(тзМаршрутДоставки) <> "ТаблицаЗначений" Тогда
		Возврат "";
	КонецЕсли;

	запрос = "";

	тзМаршрутДоставки.ВыбратьСтроки();
	Пока тзМаршрутДоставки.ПолучитьСтроку() = 1 Цикл
		НомерСтроки=НомерСтроки+1;

		запрос=запрос+"
		|<vd:routePoint>
		|<vd:sqnId>"+ НомерСтроки +"</vd:sqnId>
		|";
		Если ПустоеЗначение( тзМаршрутДоставки.ВыбПлощадка.GUID )=0 Тогда
			запрос=запрос+"
			|<vd:enterprise>
			|<bs:guid>"+ тзМаршрутДоставки.ВыбПлощадка.GUID +"</bs:guid>
			|</vd:enterprise>
			|";
		Иначе
			запрос=запрос+"
			|<vd:location>
			|<dt:name>"+тзМаршрутДоставки.Название+"</dt:name>
			|<dt:address>";
			Если ПустоеЗначение(тзМаршрутДоставки.Страна) = 0 Тогда
				Запрос=Запрос+"
				|<dt:country>
				|<bs:guid>"+СокрЛП(тзМаршрутДоставки.Страна.guid)+"</bs:guid>
				|</dt:country>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Регион) = 0 Тогда
				Запрос=Запрос+"
				|<dt:region>
				|<bs:guid>"+СокрЛП(тзМаршрутДоставки.Регион.guid)+"</bs:guid>
				|</dt:region>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Район) = 0 Тогда
				Запрос=Запрос+"
				|<dt:district>
				|<bs:guid>"+СокрЛП(тзМаршрутДоставки.Район.guid)+"</bs:guid>
				|</dt:district>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Город) = 0 Тогда
				Запрос=Запрос+"
				|<dt:locality>
				|<bs:guid>"+СокрЛП(тзМаршрутДоставки.Город.guid)+"</bs:guid>
				|</dt:locality>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Улица) = 0 Тогда
				Запрос=Запрос+"
				|<dt:street>
				|<bs:guid>"+СокрЛП(тзМаршрутДоставки.Улица.guid)+"</bs:guid>
				|</dt:street>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Дом) = 0 Тогда
				Запрос=Запрос+"
				|<dt:house>"+СокрЛП(тзМаршрутДоставки.Дом)+"</dt:house>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Строение) = 0 Тогда
				Запрос=Запрос+"
				|<dt:building>"+СокрЛП(тзМаршрутДоставки.Строение)+"</dt:building>";
			КонецЕсли;
			Если ПустоеЗначение(тзМаршрутДоставки.Помещение) = 0 Тогда
				Запрос=Запрос+"
				|<dt:room>"+СокрЛП(тзМаршрутДоставки.Помещение)+"</dt:room>";
			КонецЕсли;

			Запрос=Запрос+"
			|</dt:address>
			|</vd:location>
			|";
		КонецЕсли;
		запрос=запрос+"
		//|<vd:transshipment>"+?(тзМаршрутДоставки.Перегрузка = 1,"true","false")+"</vd:transshipment>
		//отражать будем только пункты перегрузки
		|<vd:transshipment>true</vd:transshipment>
		|<vd:nextTransport>
		|<vd:transportType>"+ тзМаршрутДоставки.ТипТранспорта +"</vd:transportType>
		|<vd:transportNumber>";

		Если ПустоеЗначение(тзМаршрутДоставки.номерКонтейнера) = 0 Тогда
			Запрос=Запрос+"
           	|<vd:containerNumber>"+СокрЛП(тзМаршрутДоставки.номерКонтейнера)+"</vd:containerNumber>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.НомерАвто) = 0 Тогда
			Запрос=Запрос+"
           	|<vd:vehicleNumber>"+СокрЛП(тзМаршрутДоставки.НомерАвто)+"</vd:vehicleNumber>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.номерприцепа) = 0 Тогда
			Запрос=Запрос+"
           	|<vd:trailerNumber>"+СокрЛП(тзМаршрутДоставки.номерприцепа)+"</vd:trailerNumber>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.номерВагона) = 0 Тогда
			Запрос=Запрос+"
           	|<vd:wagonNumber>"+СокрЛП(тзМаршрутДоставки.номерВагона)+"</vd:wagonNumber>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.НазваниеСудна) = 0 Тогда
			Запрос=Запрос+"
           	|<vd:shipName>"+СокрЛП(тзМаршрутДоставки.НазваниеСудна)+"</vd:shipName>";
		КонецЕсли;
		Если ПустоеЗначение(тзМаршрутДоставки.НомерАвиарейса) = 0 Тогда
			Запрос=Запрос+"
           	|<vd:flightNumber>"+СокрЛП(тзМаршрутДоставки.НомерАвиарейса)+"</vd:flightNumber>";
		КонецЕсли;

		Запрос=Запрос+"
  	    |</vd:transportNumber>";


		запрос=запрос+"
		|</vd:nextTransport>
		|</vd:routePoint>
		|";
	КонецЦикла;

	Возврат запрос;
КонецФункции

//{ =========================  Проверка условий перевозки / Регионализации
Функция РегионализацияМаршрута_2_ЗапросXML(док)

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("РегионализацияМаршрута_2_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.РегионализацияМаршрута_2_ЗапросXML(док);
	КонецЕсли;
	//}

	// сворачиваем по GUID 
	тзВидыПродукции = СоздатьОбъект("ТаблицаЗначений");	
	тзВидыПродукции.НоваяКолонка("GUID");
	Если ( ВРЕГ(Док.Вид()) = "ВСД2_ВХОДЯЩИЙ" ) или ( ВРЕГ(Док.Вид()) = "ВСД_ДОК" ) Тогда
		тзВидыПродукции.НоваяСтрока();
		тзВидыПродукции.GUID = СокрЛП(док.ВидПродукции.GUID);
	Иначе
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку()=1 Цикл
			Если ПустоеЗначение(док.Партия.ВидПродукции.GUID)=0 Тогда
				тзВидыПродукции.НоваяСтрока();
				тзВидыПродукции.GUID = СокрЛП(док.ВидПродукции.GUID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	тзВидыПродукции.Свернуть("GUID", "");	
	
	Запрос = "
		|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
		|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|<SOAP-ENV:Header/>
		|<SOAP-ENV:Body>
		|<apldef:submitApplicationRequest>
		|<apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|<apl:application>
		|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
		|<apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|<apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка( ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
		|<apl:data>
		|<merc:checkShipmentRegionalizationRequest>
		|<merc:localTransactionId>" + ГМ.Компонента.GUID() + "</merc:localTransactionId>
		|<merc:initiator>
		|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|</merc:initiator>
		|";

	тзВидыПродукции.ВыбратьСтроки();
	Пока тзВидыПродукции.ПолучитьСтроку() = 1 Цикл
		Запрос = Запрос+"
		|<dt:cargoType>
		|<bs:guid>"+ тзВидыПродукции.GUID +"</bs:guid>
		|</dt:cargoType>";
		
	КонецЦикла;
		
	//<vd:sqnId>1</vd:sqnId>
	//Порядовый номер точки маршрута.
    //Не обязателен для заполнения, будет сгенерирован автоматически в ответе

	// <vd:enterprise>
	//Сведения о предприятии, которое является точкой маршрута.
    //Указывается в случае, Если не указано значение location

	НомерСтроки=1;

	Если док.Вид()="ВСД2_входящий" Тогда
		Отправитель_Площадка = СокрЛП(док.Получатель_Площадка.GUID);
		Получатель_Площадка = СокрЛП(док.Отправитель_Площадка.GUID);
	Иначе
		Отправитель_Площадка = СокрЛП(док.Отправитель_Площадка.GUID);
		Получатель_Площадка = СокрЛП(док.Получатель_Площадка.GUID);
	КонецЕсли;

	Запрос = Запрос+"
	|<vd:shipmentRoute>
	|<vd:routePoint>
	|<vd:sqnId>1</vd:sqnId>
	|<vd:enterprise>
	|<bs:guid>"+ Отправитель_Площадка +"</bs:guid>
	|</vd:enterprise>
	|</vd:routePoint>
	|";
	ЗапросМаршрут = Запрос_МаршрутДоставки( док, НомерСтроки );
	Запрос=Запрос+ЗапросМаршрут+"
	|<vd:routePoint>
	|<vd:sqnId>"+ (НомерСтроки+1) +"</vd:sqnId>
	|<vd:enterprise>
	|<bs:guid>"+ Получатель_Площадка +"</bs:guid>
	|</vd:enterprise>
	|</vd:routePoint>
	|</vd:shipmentRoute>
	|</merc:checkShipmentRegionalizationRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	Возврат Запрос;
КонецФункции

// https://help.vetrf.ru/wiki/CheckShipmentRegionalizationOperation_v2.0
Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ПеревозкаРазрешена_2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла);
	КонецЕсли;
	//}

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );


	Попытка
		applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

		RouteSectionList = objDom.selectNodes("//*[local-name() = 'r13nRouteSection']") ;
	Исключение
		Сообщить("Не удалось прочитать ответ о разрешении");
		Возврат "";
		//Пример на ветисе корявый...
		applicationId = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectSingleNode("applicationId").text ;

		RouteSectionList = objDom.selectSingleNode("//*[local-name() = 'apl:application']").selectNodes("r13nRouteSection") ;
	КонецПопытки;

	УсловияПеревозки = СоздатьОбъект("ТаблицаЗначений");
	УсловияПеревозки.НоваяКолонка("Пометка", , , , "V", 3,);
	УсловияПеревозки.НоваяКолонка("НомерОтрезкаМаршрута", , , , "№ маршрута",5,);
	УсловияПеревозки.НоваяКолонка("Решение", , , , "Решение",3,);
	УсловияПеревозки.НоваяКолонка("ВидПродукции", , , , ,30,);	
	УсловияПеревозки.НоваяКолонка("Название", , , , ,50,);
	УсловияПеревозки.НоваяКолонка("UUID", , , , ,36,);
	УсловияПеревозки.НоваяКолонка("GUID", , , , ,36,);
	

	Сообщить("Получено "+RouteSectionList.length+" записей По отрезкам маршрута","i");
    Для i1 = 0 По RouteSectionList.length - 1 Цикл
        RouteSection = RouteSectionList.item(i1);
		НомерОтрезкаМаршрута = RouteSection.selectSingleNode("vd:sqnId").text;
		
		RuleList = RouteSection.SelectNodes("vd:appliedR13nRule");
		Сообщить("Получено "+RuleList.length+" записей правил перемещения","i");
		Для k1 = 0 По RuleList.length - 1 Цикл
			appliedR13nRule = RuleList.item(k1);
			
			//Решение о возможности перемещения груза
			//1 - перемещение разрешено;
			//2 - перемещение разрешено при обязательном соблюдении условий;
			//3 - перемещение запрещено.
			Решение = Число(appliedR13nRule.selectSingleNode("dt:decision").text);
			
			ВидПродукции = ГМ.НайтиВидПродукции( appliedR13nRule.selectSingleNode("dt:cargoType").selectSingleNode("bs:guid").text);

			Если Решение=2 Тогда 
				requirements = appliedR13nRule.selectNodes("dt:requirement");
				Сообщить("Получено "+requirements.length+" записей По правилам для "+ВидПродукции,"i");
				Для i2 = 0 По requirements.length - 1 Цикл
					
					Решение = Число( requirements.item(i2).selectSingleNode("dt:type").text );
					
					Если Решение = 2 Тогда
						
						conditionGroup = requirements.item(i2).selectNodes("dt:conditionGroup");
						Для i3=0 По conditionGroup.length - 1 Цикл
							conditionList = conditionGroup.item(i3).selectNodes("dt:condition");
							Для i4=0 По conditionList.length - 1 Цикл
								Попытка
									
									condition = conditionList.item(i4);
									УсловияПеревозки.НоваяСтрока();
									УсловияПеревозки.Пометка = 1;
									УсловияПеревозки.НомерОтрезкаМаршрута = НомерОтрезкаМаршрута;
									УсловияПеревозки.Решение = Решение;
									УсловияПеревозки.ВидПродукции = ВидПродукции;
									УсловияПеревозки.Название = condition.selectSingleNode("dt:text").text;
									УсловияПеревозки.UUID = condition.selectSingleNode("bs:uuid").text;
									УсловияПеревозки.GUID = condition.selectSingleNode("bs:guid").text;
									
									СообщитьОтладку( Лев(Строка(i4+1)+". Перемещение при условии: "+ СокрЛП(УсловияПеревозки.Название),400));
									
								Исключение
									ГМ.СообщитьОбОшибке("Ошибка при загрузке условий перевозки "+ОписаниеОшибки());
								КонецПопытки;
							КонецЦикла;
						КонецЦикла;
					Иначе 
						// запрещено						
						УсловияПеревозки.НоваяСтрока();
						УсловияПеревозки.Пометка = 1;
						УсловияПеревозки.НомерОтрезкаМаршрута = НомерОтрезкаМаршрута;
						УсловияПеревозки.Решение = Решение;
						УсловияПеревозки.ВидПродукции = ВидПродукции;
						
						текст = ""+НомерОтрезкаМаршрута+ ". Перемещение ЗАПРЕЩЕНО для вида продукции ["+ВидПродукции+"] ["+ВидПродукции.GUID+"]";
						Предупреждение(текст);
						Сообщить( текст, "!!" );
					КонецЕсли;
				КонецЦикла;
			Иначе
				//condition = conditionList.item(i4);
				УсловияПеревозки.НоваяСтрока();
				УсловияПеревозки.НомерОтрезкаМаршрута = НомерОтрезкаМаршрута;
				УсловияПеревозки.Пометка = 1;
				УсловияПеревозки.Решение = Решение;
				УсловияПеревозки.ВидПродукции = ВидПродукции;
				
				Если Решение = 1 Тогда
					
					СообщитьОтладку(""+НомерОтрезкаМаршрута+" Перемещение разрешено "+ВидПродукции);
					
				Иначе
					Сообщить(""+НомерОтрезкаМаршрута+" Перемещение ЗАПРЕЩЕНО " +ВидПродукции,"!!");
				КонецЕсли;				
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат УсловияПеревозки;

КонецФункции

Функция ПолучитьИмяФайлаРегионализация( Док ) Экспорт
	// {Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИмяФайлаРегионализация");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИмяФайлаРегионализация(Док);
	КонецЕсли;
	// }

	КаталогРегионализации = ГМ.ПолучитьКонстанту("КаталогМодуля")+"Region\";
	Если ФС.СуществуетФайл(КаталогРегионализации) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(КаталогРегионализации);
		Исключение
			Предупреждение("Не создан каталог Region"); Возврат "";
		КонецПопытки;
	КонецЕсли;

	Если ТипЗначенияСтр(Док)="Документ" Тогда 
		Рез = КаталогРегионализации+"УсловияПеревозки_"+СокрЛП(Док.НомерДок)+"_"+СтрЗаменить(Док.ДатаДок,".","")+".mrk";
	Иначе
		Рез = КаталогРегионализации+"УсловияПеревозки_"+СокрЛП(Док.Код)+"_"+СтрЗаменить(Док.ДатаДок,".","")+".mrk";
	КонецЕсли;

	Возврат Рез;
КонецФункции

// Функция ПолучитьРезультат_Регион_2( applicationID, докСсылка, ЗаписыватьВДокумент=0 ) Экспорт
Функция УсловияПеревозки_Ответ( applicationID, докСсылка, ЗаписыватьВДокумент=0, ИспользоватьПаузу=1 ) Экспорт	

	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Если ИспользоватьПаузу=1 Тогда 
		ГМ.Пауза( );
	КонецЕсли;

	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = ГМ.ПолучитьРезультатСервер( applicationID );

	Для А=1 По 10 Цикл
		Если (Результат="IN_PROCESS") Тогда		
			ГМ.Пауза( );
			Результат = ГМ.ПолучитьРезультатСервер( applicationID );
		КонецЕсли;
	КонецЦикла;
		
    тзУсловияПеревозки = ЗагрузитьXML_ПеревозкаРазрешена_2( ГМ.Компонента.LogFilename );

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Если ЗаписыватьВДокумент=1 Тогда 
		ДокОб = создатьОбъект("Документ");
		Попытка			
			Если ПустоеЗначение(докСсылка)=0 Тогда
				//ГМ.СохранитьСтатусЗапроса(докСсылка);
				ГМ.СохранитьОтветВДокументе( докСсылка, , applicationID );
				
				Если ТипЗначенияСтр( тзУсловияПеревозки ) = "ТаблицаЗначений" Тогда
					ДокОб.НайтиДокумент( докСсылка );
					Если тзУсловияПеревозки.КоличествоСтрок() = 0 Тогда
						ДокОб.ИмяФайлаРегионализация ="";
					Иначе
						ДокОб.ИмяФайлаРегионализация = ПолучитьИмяФайлаРегионализация( докСсылка );
						ЗначениеВФайл(ДокОб.ИмяФайлаРегионализация, тзУсловияПеревозки);
					КонецЕсли;
					ДокОб.Записать();
				КонецЕсли;
				
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	

	Возврат тзУсловияПеревозки;
КонецФункции


// Функция ПроверитьВозможностьПеремещения(док, ПолучитьОтветВетис=1, ЗаписыватьВДокумент=0 ) Экспорт
Функция УсловияПеревозки_Получить( док, ПолучитьОтветВетис=1, ЗаписыватьВДокумент=0 ) Экспорт

	Если ПустоеЗначение(док)=1 Тогда
		Сообщить("Нет документа ВСД","!");
		Возврат "";
	КонецЕсли;

	ЗапросXML = РегионализацияМаршрута_2_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Если ЗаписыватьВДокумент=1 Тогда
		ГМ.СохранитьЗапросВДокументе( док, appID );
	КонецЕсли;
	
	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
		
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
    тзУсловияПеревозки = "";
	Если ( ПустоеЗначение(appID)=0 ) И (ПолучитьОтветВетис=1) Тогда
		тзУсловияПеревозки = УсловияПеревозки_Ответ( appID, док, ЗаписыватьВДокумент );
	КонецЕсли;

	Возврат тзУсловияПеревозки;
КонецФункции

//} Конец Условия перевозки / Регионализация

Функция МаркировкаДокументаВЗапрос( Док )
	
	consignment = "";
	
    // нужно По реквизитам строки пробежать И проверить наличие упаковок
	УровнейВдок = 6; // макс кол-во уровней в документе
	МаркировокВдок = 2; // макс маркировок на уровне в док-те

	НомУровня=0; ЕстьСведенияОбУпаковках = 0;
	Для НомУровня=1 По УровнейВдок Цикл
		Упак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+НомУровня));
		Если ПустоеЗначение(Упак)=0 Тогда
			ЕстьСведенияОбУпаковках = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;

    Если ЕстьСведенияОбУпаковках = 1 Тогда
		consignment = consignment+ "
		|<vd:packageList>";
        Для НомУровня=1 По УровнейВдок Цикл
			Попытка
				ГУИДУпак =  СокрЛП(Док.ПолучитьАтрибут("ФормаУпак"+НомУровня).GUID);
			Исключение
				Сообщить("Не указана форма упаковки на уровне "+НомУровня);
				Продолжить;
			КонецПопытки;
			Если ПустоеЗначение(ГУИДУпак)=1 Тогда
			    Продолжить;
			КонецЕсли;
			consignment = consignment+ "
			|<dt:package>
			|<dt:level>"+НомУровня+"</dt:level>
			|<dt:packingType>
			|<bs:guid>"+ ГУИДУпак +"</bs:guid>
			|</dt:packingType>
			|<dt:quantity>"+ Док.ПолучитьАтрибут("КолВоУпак"+НомУровня) +"</dt:quantity>";

			// Маркировки
			мм=0;
			Для мм=1 По МаркировокВДок Цикл
				КлассМарк = СокрЛП(Док.ПолучитьАтрибут("КлассМаркировки"+мм+"_"+НомУровня));
				Если ПустоеЗначение(КлассМарк) = 1 Тогда
				    Продолжить;
				КонецЕсли;
				знМарк = СокрЛП(Док.ПолучитьАтрибут("ЗначениеМаркировки"+мм+"_"+НомУровня));
				Если знМарк = "[...]" Тогда 
					СтрЗн = ГМ.ПрочитатьЗначенияМаркировки(Док, "ЗначениеМаркировки"+мм+"_"+НомУровня );
					Для А=1 по СтрКоличествоСтрок(стрЗн) Цикл
						consignment = consignment+ "
						|<dt:productMarks class='"+КлассМарк+"'>"+ ЗаменитьСпецСимволы( стрПолучитьСтроку(СтрЗн, А) ) +"</dt:productMarks>";
					КонецЦикла;					
				Иначе
					consignment = consignment+ "
					|<dt:productMarks class='"+КлассМарк+"'>"+ ЗаменитьСпецСимволы( знМарк ) +"</dt:productMarks>";
				КонецЕсли;

			КонецЦикла;
			consignment = consignment+ "
	   		|</dt:package>";
	    КонецЦикла;
		consignment = consignment+ "
		|</vd:packageList>";
	КонецЕсли;
	
	Возврат  consignment;
	
КонецФункции

//{ ========================== ВСД2_Транзакция ==========================
// http://help.vetrf.ru/wiki/PrepareOutgoingConsignmentOperation_v2.0
Функция ВСД2_транзакция_ЗапросXML(док, тзУсловияПеревозки)
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_транзакция_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_транзакция_ЗапросXML(док, тзУсловияПеревозки);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//док = СоздатьОбъект("Документ.ВСД_транзакция");

	Запрос_Шапка = "<SOAP-ENV:Envelope
	| xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
    |<apldef:submitApplicationRequest>
	|<apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|<apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00", 1 ) + "</apl:issueDate>
	|<apl:data>
	|<merc:prepareOutgoingConsignmentRequest>
	|<merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|</merc:initiator>
	|";

//************************
    delivery = "
    | <merc:delivery>";

	Если ПустоеЗначение(док.ТтнДата) = 0 Тогда   // Есть ТТН
    	delivery = delivery + "
    	|<vd:deliveryDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>";
	Иначе
    	delivery = delivery + "
    	|<vd:deliveryDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") + "</vd:deliveryDate>";
	КонецЕсли;

    delivery = delivery + "
    |<vd:consignor>
    |<dt:businessEntity>
    |<bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
    |</dt:businessEntity>
    |<dt:enterprise>
    |<bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
    |</dt:enterprise>
    |</vd:consignor>
    |<vd:consignee>
    |<dt:businessEntity>
    |<bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
    |</dt:businessEntity>
    |<dt:enterprise>
    |<bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
    |</dt:enterprise>";

	//<dt:globalID>4607009526782</dt:globalID> 	dt:GLNType 	[0..*]  [ ... ] Global Location Number - уникальный номер площадки
	delivery = delivery+"
    |</vd:consignee>";

	consignment="";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
//        |<vd:consignment id='id1'>
		consignment = consignment+ "
		|<vd:consignment id='_" + Док.НомерСтроки + "'>";

		//Указание согласованного наименования И фасовки (указание записи журнала И productItem с наименованием/артикулом/GTIN получателя в запросе).
			consignment = consignment+ "
    	    |<vd:productItem>";
			Если Док.Продукция_Элемент.ВидПродукции <> Док.Партия.ВидПродукции Тогда
	    	    // При изменении Вида продукции у ProductItem ошибка при списании ранее полученной партии
				// Указанное наименование продукции относится к другому виду продукции.				
				ГМ.СообщитьИнфо("изменен Вида продукции ВСД_Продукция_Элемент, ВСД_Продукция_Элемент относится к другому виду продукции => отправляем с пустым GUID", док, "!");
			ИначеЕсли СокрЛП(Док.Продукция_Элемент.Артикул) <> СокрЛП(Док.КодПродукции) Тогда
				ГМ.СообщитьИнфо("в документе изменен [КодПродукции] => ВСД_Продукция_Элемент отправляем с пустым GUID", док, "!");
			ИначеЕсли ( Док.Продукция_Элемент.ПометкаУдаления() = 1 ) Тогда
				//удаленные ProductItem отправляем без GUID
				ГМ.СообщитьИнфо("в строке №"+ Док.НомерСтроки +" ВСД_Продукция_Элемент ["+ СокрЛП(Док.Продукция_Элемент.Наименование) +"] удален => отправляем с пустым GUID", док, "!");
			Иначе
				consignment = consignment+?(ПустоеЗначение(док.Продукция_Элемент.GUID)= 0,	"          <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>","");				
    	    КонецЕсли;
    	    consignment = consignment+?(ПустоеЗначение(док.GTIN)= 0, " <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>","");
        	consignment = consignment +	" <dt:name>"+ ЗаменитьСпецСимволы( док.НаименованиеПродукции )+"</dt:name>";
	        consignment = consignment+?(ПустоеЗначение(док.КодПродукции)= 0, " <dt:code>"+ СокрЛП(док.КодПродукции) +"</dt:code>","");			
			
			Если ПустоеЗначение(док.ТипФасовки)=0 Тогда
				consignment = consignment+ "
    	    	|<dt:packaging>
	        	|<dt:packagingType>
		        |<bs:guid>"+ СокрЛП(док.ТипФасовки.GUID) +"</bs:guid>
		//						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки.
    		    |</dt:packagingType>
        		|<dt:quantity>"+ док.КолВоЕдиницФасовки +"</dt:quantity>
		        |<dt:volume>"+ док.ОбъемЕдиницыФасовки +"</dt:volume>
    		    |<dt:unit>
        		|<bs:guid>"+ СокрЛП(док.ЕдИзмОбъемаФасовки.GUID) +"</bs:guid>
		        |</dt:unit>
    		    |</dt:packaging>";
			КонецЕсли;

			consignment = consignment+ "
    	    |</vd:productItem>";

//		КонецЕсли;

		consignment = consignment+ "
		|<vd:volume>"+ Док.Количество +"</vd:volume>
        |<vd:unit>
        |<bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
        |</vd:unit>
        |";

		consignment = consignment+ "<vd:lowGradeCargo>"+ ГМ.булево(док.Некачественный)+"</vd:lowGradeCargo> ";
		
		consignment = consignment + МаркировкаДокументаВЗапрос( Док );
		
		Если ПустоеЗначение(док.ВидПроисхожденияНепищевойПродукции)=0 Тогда
			consignment = consignment+ "
			|<vd:applicableClassifications>
			| <vd:nonFoodSource>"+ док.ВидПроисхожденияНепищевойПродукции.Идентификатор() +"</vd:nonFoodSource>
			|</vd:applicableClassifications>";
		КонецЕсли;


		consignment = consignment+ "
		|<vd:sourceStockEntry>
        |<bs:guid>"+ СокрЛП(док.Партия.GUID) +"</bs:guid>
        |</vd:sourceStockEntry>
        |</vd:consignment>
		|";
	КонецЦикла; //По строкам документа
	
	//Тип товарно-транспортной накладной.
    //Допустимые типы для waybill: 1, 2, 3, 4, 5
	ЗапросДоставка = "";
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект) = 0 Тогда
	ЗапросДоставка = "
        |<vd:broker>
        |<bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |</vd:broker>";
	КонецЕсли;

	//ТермическоеСостояние="";
	//ГМ.ТермическиеУсловияПеревозки.ПолучитьЗначение( док.ТермическоеСостояние, ТермическоеСостояние );
	//Если ПустоеЗначение(ТермическоеСостояние)=1 Тогда
	//	Предупреждение("Не указано ТермическоеСостояние");
	//	Возврат "";
	//КонецЕсли;
	//
	ЗапросДоставка = ЗапросДоставка + "
    |<vd:transportInfo>
    |<vd:transportType>1</vd:transportType>
    |<vd:transportNumber>";
	
	Если ПустоеЗначение(док.номерКонтейнера) = 0 Тогда
		ЗапросДоставка = ЗапросДоставка + "
    	|<vd:containerNumber>" + СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>";
	КонецЕсли;
	Если ПустоеЗначение(док.номерАвто) = 0 Тогда
		ЗапросДоставка = ЗапросДоставка+"
    	|<vd:vehicleNumber>" + СокрЛП(док.номерАвто) +"</vd:vehicleNumber>";
	КонецЕсли;
	Если ПустоеЗначение(док.номерПолуприцепа) = 0 Тогда
		ЗапросДоставка = ЗапросДоставка+"
    	|<vd:trailerNumber>" + СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>";
	КонецЕсли;
	
	ЗапросДоставка = ЗапросДоставка + "
    |</vd:transportNumber>
    |</vd:transportInfo>
    |<vd:transportStorageType>" + док.ТермическоеСостояние.Идентификатор() +"</vd:transportStorageType>";

	ЗапросДоставка=ЗапросДоставка + "
	|<vd:shipmentRoute>
	|"+ Запрос_МаршрутДоставки( док ) + "
	|</vd:shipmentRoute> ";

	ЗапросПодвал = "
		|<vd:accompanyingForms>";

	Если ПустоеЗначение(док.ТтнДата) = 0 Тогда	// Без ТТН
		ЗапросПодвал = ЗапросПодвал + "
        |<vd:waybill>
        |<vd:issueSeries>" + СокрЛП(док.ТтнСерия) + "</vd:issueSeries>
        |<vd:issueNumber>" + СокрЛП(док.ТтнНомер) + "</vd:issueNumber>
        |<vd:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ТтнДата) + "</vd:issueDate>
        |<vd:type>1</vd:type>
        |</vd:waybill>";
	КонецЕсли;

	//!!! Цели в ТЧ документа
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		ЗапросПодвал = ЗапросПодвал + "
	        |<vd:vetCertificate for='_" + док.НомерСтроки + "'>
	        |<vd:authentication>
	        |<vd:purpose>
	        |<bs:guid>" + СокрЛП( док.Цель.Guid ) + "</bs:guid>
	        |</vd:purpose>
	        |<vd:cargoInspected>" + ГМ.булево(док.cargoInspected) + "</vd:cargoInspected>
			|<vd:cargoExpertized>" + док.РезультатыИсследований.Идентификатор() + "</vd:cargoExpertized>
			|<vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
			|";

			Если ПустоеЗначение(тзУсловияПеревозки)=0 Тогда
				тзУсловияПеревозки.ВыбратьСтроки();
				Пока тзУсловияПеревозки.ПолучитьСтроку() = 1 Цикл
					Если ((тзУсловияПеревозки.Решение = 2) И (тзУсловияПеревозки.ВидПродукции = док.ВидПродукции)) Тогда
						ЗапросПодвал = ЗапросПодвал + "
						|<vd:r13nClause>
						|<vd:condition>
						|<bs:guid>" + тзУсловияПеревозки.GUID + "</bs:guid>
						|</vd:condition>
						|</vd:r13nClause>
						|";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОсобыеОтметки="";
			
			Если ГМ.ПолучитьКонстанту("ОсобыеОтметкиЗагружатьИзПараметров")=1 Тогда 
				//из параметров
				ОсобыеОтметки = СокрЛП(ГМ.ПолучитьКонстанту("ВСД_ОсобыеОтметки"));
			
			ИначеЕсли ГМ.ПолучитьКонстанту("ОсобыеОтметкиЗагружатьИзПартии")=1 Тогда 
				// из партии
				ИмяФайла = док.Партия.документВСД.ИмяФайлаXML; 
								
				Попытка 			
					objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
					objDom.load(ИмяФайла);					
					 
					objDom.setProperty("SelectionNamespaces", "
							|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
							|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
							|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
							|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
							|" );
					vetDocumentlist = objDom.selectNodes("//merc:vetDocument") ;
					Для i1 = 0 По vetDocumentlist.length - 1 Цикл
						vetDocument=vetDocumentlist.item(i1);
						specialMarks = vetDocument.selectSingleNode("vd:authentication").selectSingleNode("vd:specialMarks").text;
					КонецЦикла;
					
					СообщитьОтладку("Добавлены [Особые отметки] ["+specialMarks+"] из XML-файла: "+ИмяФайла);
				Исключение
				КонецПопытки;
				Попытка ОсобыеОтметки = ОсобыеОтметки +" "+ specialMarks; Исключение КонецПопытки;					
			КонецЕсли;
			// + добавим из документа
			ОсобыеОтметки = ОсобыеОтметки + " " + СокрЛП(док.особыеотметки);
			ЗапросПодвал = ЗапросПодвал + ?(Пустоезначение(особыеотметки) = 0, "<vd:specialMarks>"+ ОсобыеОтметки +"</vd:specialMarks>","");
			
		ЗапросПодвал = ЗапросПодвал + "
        |</vd:authentication>
        |</vd:vetCertificate>";
	КонецЦикла;

		// Связанные документы
		// http://help.vetrf.ru/wiki/DocumentType_v2.0
		// тип 16 = Заказ, 6 = ТОРГ12,  1 = ТрН
//        |<vd:issueSeries>А</vd:issueSeries>
//        |<vd:issueDate>2017-09-26</vd:issueDate>

		СвязанныеДокументы = "";
		Если ПустоеЗначение(Док.НомерЗаказаПокупателя) = 0 Тогда
			СвязанныеДокументы = "
			|<vd:relatedDocument>
    	    |<vd:issueNumber>"+СокрЛП(док.НомерЗаказаПокупателя)+"</vd:issueNumber>
			|<vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаЗаказаПокупателя) +"</vd:issueDate>
    	    |<vd:type>16</vd:type>
        	|<vd:relationshipType>1</vd:relationshipType>
	        |	     </vd:relatedDocument>";
		КонецЕсли;

		Если ПустоеЗначение(Док.ТОРГ12Номер) = 0 Тогда
	        СвязанныеДокументы = СвязанныеДокументы + "
	        |<vd:relatedDocument>
    	    |<vd:issueNumber>"+СокрЛП(док.ТОРГ12Номер)+"</vd:issueNumber>
	        |<vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ТОРГ12Дата) +"</vd:issueDate>
    	    |<vd:type>6</vd:type>
        	|<vd:relationshipType>1</vd:relationshipType>
	        |</vd:relatedDocument>";
        КонецЕсли;

		Если ПустоеЗначение(Док.УпдНомер) = 0 Тогда
	        СвязанныеДокументы = СвязанныеДокументы + "
	        |<vd:relatedDocument>
    	    |<vd:issueNumber>"+СокрЛП(док.УпдНомер)+"</vd:issueNumber>
	        |<vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.УпдДата) +"</vd:issueDate>
    	    |<vd:type>23</vd:type>
        	|<vd:relationshipType>1</vd:relationshipType>
	        |</vd:relatedDocument>";
		КонецЕсли;
		
		Если ПустоеЗначение(Док.ВидСвязанногоДокумента) = 0 Тогда
	        СвязанныеДокументы = СвязанныеДокументы+ "
	        |<vd:relatedDocument>
    	    |<vd:issueNumber>"+СокрЛП(док.НомерСвязанногоДокумента)+"</vd:issueNumber>
	        |<vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаСвязанногоДокумента) +"</vd:issueDate>
    	    |<vd:type>"+Сред(Док.ВидСвязанногоДокумента.Идентификатор(),4)+"</vd:type>
        	|<vd:relationshipType>1</vd:relationshipType>
	        |</vd:relatedDocument>";
        КонецЕсли;
		
		//!!! UUID на основании аннулированного ВСД в ТЧ документа
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(Док.СвязанныйДокументВСД) = 0 Тогда
				СвязанныеДокументы = СвязанныеДокументы+"
				|<vd:relatedDocument for='_"+ док.НомерСтроки +"'>
	    	    |<vd:issueNumber>"+СокрЛП( док.СвязанныйДокументВСД.UUID )+"</vd:issueNumber>
				|<vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.СвязанныйДокументВСД.ДатаДок) +"</vd:issueDate>
	    	    |<vd:type>11</vd:type>
	        	|<vd:relationshipType>2</vd:relationshipType>
		        |	     </vd:relatedDocument>";
			КонецЕсли;
		КонецЦикла;
		
		Если ПустоеЗначение(СвязанныеДокументы) = 0 Тогда
			ЗапросПодвал = ЗапросПодвал+СвязанныеДокументы;
		КонецЕсли;
		
		ЗапросПодвал = ЗапросПодвал + "
		|</vd:accompanyingForms>
		|";

	ЗапросПодвал = ЗапросПодвал + "		
        |</merc:delivery>
		|</merc:prepareOutgoingConsignmentRequest>
		|</apl:data>
		|</apl:application>
		|</apldef:submitApplicationRequest>
		|</SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>
		|";

		
	Если Док.СменаСобственностиБезПеревозки = 1 тогда 
		Запрос = Запрос_Шапка + delivery + consignment + ЗапросПодвал;
	Иначе
		Запрос = Запрос_Шапка + delivery + consignment + ЗапросДоставка + ЗапросПодвал;
	КонецЕсли;

	Если ГМ.ПолучитьКонстанту("ОтладкаЗапросовXML")=0 Тогда
		
		Текст = СоздатьОбъект("Текст");		
		Текст.ДобавитьСтроку(Запрос);
		Каталог = ГМ.ПолучитьКонстанту("КаталогЛогов");
		Текст.Записать(Каталог+"debug.xml");
		
	КонецЕсли;
		
	Возврат Запрос;
КонецФункции

Функция ПроверитьНомерАвто( НомерАвто ) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПроверитьНомерАвто");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПроверитьНомерАвто( НомерАвто );
	КонецЕсли;
	//}	
	
	Результат = 1;
	Если ГМ.ПолучитьКонстанту("ПарамПроверятьНомерАвто") = 1 Тогда 
				
		РазрешенныеСимволы = "АВЕКМНОРСТУХ0123456789 ";
		ПроверяемаяСтрока = СокрЛП(НомерАвто);

		ЗапрещенныеСимволы = "";
		
		// Отрежем код страны из номера
		ПозицияРУ = Найти(ПроверяемаяСтрока, "RU");
		Если ПозицияРУ>0 Тогда			
			
			НомерБезКодаСтраны = Лев(ПроверяемаяСтрока, СтрДлина(ПроверяемаяСтрока)-ПозицияРУ );
			
			Для сч = 1 По СтрДлина(НомерБезКодаСтраны) Цикл
				Если Найти(Врег(РазрешенныеСимволы), Врег(Сред(НомерБезКодаСтраны, Сч, 1))) = 0 Тогда
					Результат = 0;
					ЗапрещенныеСимволы = ЗапрещенныеСимволы + Сред(НомерБезКодаСтраны, Сч, 1);
				КонецЕсли;
			КонецЦикла;
			
			Если Результат = 0 Тогда
				Предупреждение("В номере автомобиля содержатся запрещенные символы: "+ЗапрещенныеСимволы,"!");	
			КонецЕсли;
		Иначе
			Результат = 0;
			Предупреждение("В номере автомобиля "+ПроверяемаяСтрока+" не указан код страны","!");
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция Проверка_ВСД2_транзакция(док) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД2_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД2_транзакция(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = 1; //все в порядке

	//Если ( ПустоеЗначение( док.applicationID ) = 0 ) И ( СокрЛП(док.Статус) <> "REJECTED") Тогда
	//    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
	//	Возврат 0;
	//КонецЕсли;	
	
	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда
		Предупреждение("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда
		Предупреждение("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда
		Предупреждение("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда
		Предупреждение("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;
	Если ( док.Отправитель_ХозСубъект.GUID = док.Получатель_ХозСубъект.GUID ) И 
		 ( док.Отправитель_Площадка.GUID = док.Получатель_Площадка.GUID) Тогда
		Предупреждение("Отправитель И Получатель совпадают, они должны отличаться!","!");
		Результат = 0;
	КонецЕсли;


	Если (Док.СменаСобственностиБезПеревозки=0) Тогда  
		Если (ПустоеЗначение(док.номерАвто)=1) Тогда
			Предупреждение("Не указан Госномер Автомобиля","!");
			Результат = 0;
		Иначе
			Результат = ПроверитьНомерАвто( СокрЛП( Док.номерАвто ) );
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(док.НомерЗаказаПокупателя)=0 Тогда
		Если ПустоеЗначение(док.ДатаЗаказаПокупателя)=1 Тогда
			Предупреждение("Не указан ДатаЗаказаПокупателя","!");
			Результат = 0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(док.ТОРГ12Номер)=0 Тогда
		Если ПустоеЗначение(док.ТОРГ12Дата)=1 Тогда
			Предупреждение("Не указан ТОРГ12Дата","!");
			Результат = 0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(док.ТтнНомер)=1 Тогда
		Предупреждение("Не указан ТТН Номер","!");
		Результат = 0;
		Если ПустоеЗначение(док.ТТНДата)=1 Тогда
			Предупреждение("Не указан ТТН Дата","!");
			Результат = 0;
		КонецЕсли;
	КонецЕсли;
	
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		Если ПустоеЗначение(док.РезультатыИсследований)=1 Тогда
			Предупреждение("Не указаны Результаты Исследований  в строке "+док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;
	
		Если ПустоеЗначение(док.Цель)=1 Тогда
			Предупреждение("Не указана Цель перевозки в строке "+док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;

		Если ПустоеЗначение(док.Партия.GUID)=1 Тогда
			Предупреждение("Не указан Партия.GUID Выполните синхронизацию справочников","!");
			Результат = 0;
		КонецЕсли;
		//Если ПустоеЗначение(док.Партия.ВсдДата)=1 Тогда
		//	Сообщить("Не указан Партия.ВсдДата","!");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустоеЗначение(док.Партия.ФормаУпаковки)=1 Тогда
		//	Сообщить("Не указан Партия.ФормаУпаковки","!");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустоеЗначение(док.ФормаУпаковки)=1 Тогда
		//	Сообщить("Не указан ФормаУпаковки","!");
		//	Результат = 0;
		//КонецЕсли;
		Если  док.Количество=0 Тогда
			Предупреждение("не указано Количество в строке "+док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;
		//Если док.КоличествоМест =0 Тогда
		//	Сообщить("не указано Количество коробов"+док,"!");
		//	Результат = 0;
		//КонецЕсли;

		Если ПустоеЗначение(док.Партия.Продукция.Тип)=1 Тогда
			Предупреждение("Не указан Партия.Продукция.Тип","!");
			Результат = 0;
		КонецЕсли;

		Если ГМ.ПолучитьКонстанту("ПроверятьМаркировку")=1 Тогда 
			//проверка маркировки
			ФормаУпак=0; КолвоУпак=0; ЗначениеМаркировки=0;
			Для а=1 По 6 Цикл
				ФормаУпак = ФормаУпак + (1 - ПустоеЗначение( док.ПолучитьАтрибут( "ФормаУпак"+а ) ) );
				КолвоУпак = КолвоУпак + (1 - ПустоеЗначение( док.ПолучитьАтрибут( "КолвоУпак"+а ) ) );
				Для б=1 По 2 Цикл
					//КлассМаркировки = КлассМаркировки + (1 - ПустоеЗначение( док.ПолучитьАтрибут( "КлассМаркировки"+б+"_"+а ) ) );
					ЗначениеМаркировки = ЗначениеМаркировки + (1 - ПустоеЗначение( док.ПолучитьАтрибут( "ЗначениеМаркировки"+б+"_"+а ) ) );
				КонецЦикла;
			КонецЦикла;		
			Если ( ФормаУпак = 0 ) Тогда
				Сообщить("Не заполнена Форма Упаковки ( 6 уровеней упаковки)","!");
				Результат = 0;
			КонецЕсли;
			Если ( КолвоУпак = 0 ) Тогда
				Сообщить("Не заполнено Количество Упаковки ( 6 уровеней упаковки)","!");
				Результат = 0;
			КонецЕсли;
			Если ( ЗначениеМаркировки = 0 ) Тогда
				Сообщить("Не заполнена Маркировка Упаковки ( 6 уровеней упаковки)","!");
				Результат = 0;
			КонецЕсли;
		КонецЕсли;		
		
		Если (ГМ.ПолучитьКонстанту("ПарамПроверятьСрокГодности")=1) И (док.Некачественный=0) Тогда
			
			Если ПустоеЗначение( док.Партия.ДатаСрокГодности1 )=1 Тогда 
				Сообщить("Не указан Срок годности в строке "+док.НомерСтроки ,"!");
				Результат = 0;
			КонецЕсли;			
			
			Если ПустоеЗначение(док.Партия.ДатаСрокГодности2 )=1 Тогда
				СрокГодности1 = ГМ.Преобразовать_СтрокаДата_в_Дата( док.Партия.ДатаСрокГодности1 );
				СрокГодностиКоличествоДней = ГМ.ПолучитьКонстанту("ПарамПроверятьСрокГодностиКоличествоДней");
				Если ( СрокГодности1 - СрокГодностиКоличествоДней)<= ТекущаяДата() Тогда
					Сообщить("Выбранна просроченная партия По срокам годности (менее "+ СрокГодностиКоличествоДней +" дней до окончания срока) в строке "+док.НомерСтроки,"!");
					Результат = 0;
				КонецЕсли;		
			Иначе
				СрокГодности2 = ГМ.Преобразовать_СтрокаДата_в_Дата( док.Партия.ДатаСрокГодности2 );
				СрокГодностиКоличествоДней = ГМ.ПолучитьКонстанту("ПарамПроверятьСрокГодностиКоличествоДней");
				Если ( СрокГодности2 - СрокГодностиКоличествоДней)<= ТекущаяДата() Тогда
					Сообщить("Выбранна просроченная партия По срокам годности (менее "+ СрокГодностиКоличествоДней +" дней до окончания срока) в строке "+док.НомерСтроки,"!");
					Результат = 0;
				Иначе
					СрокГодности1 = ГМ.Преобразовать_СтрокаДата_в_Дата( док.Партия.ДатаСрокГодности1 );
					СрокГодностиКоличествоДней = ГМ.ПолучитьКонстанту("ПарамПроверятьСрокГодностиКоличествоДней");
					Если ( СрокГодности1 - СрокГодностиКоличествоДней)<= ТекущаяДата() Тогда
						Сообщить("Выбранна просроченная партия По срокам годности (менее "+ СрокГодностиКоличествоДней +" дней до окончания срока) в строке "+док.НомерСтроки,"!");
						Результат = 0;
					КонецЕсли;		
				КонецЕсли;		
			КонецЕсли;
				
			Если док.Партия.ДатаИзготовления1=док.Партия.ДатаСрокГодности1 Тогда
				Сообщить("указаны неверные даты изготовления И срока годности в строке "+док.НомерСтроки,"!");
				Результат = 0;
			КонецЕсли;			

	        ДатаИзготовления1=ГМ.Преобразовать_СтрокаДата_в_Дата( док.Партия.ДатаИзготовления1 );
	        Если ДатаИзготовления1>ТекущаяДата() Тогда
	            Сообщить("указана БУДУЩАЯ дата изготовления в строке "+док.НомерСтроки,"!");
	            Результат = 0;
	        КонецЕсли;			
		КонецЕсли;	
		
	КонецЦикла;

	Если ПустоеЗначение(док.ТермическоеСостояние)=1 Тогда
		Предупреждение("В "+док+" не указано ТермическоеСостояние","!");
		Результат = 0;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции


Функция Отправить_ВСД2_транзакция(док, тзУсловияПеревозки="", ПолучитьОтветВетис=1)  Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_транзакция(док, тзУсловияПеревозки);
	КонецЕсли;
	//}

	t1 = ГМ.Старт();
	
	//стандартное поведение функции
	Если Проверка_ВСД2_транзакция(док)=0 Тогда
		//ДокОбъект = СоздатьОбъект("Документ");
		//ДокОбъект.НайтиДокумент(док);
		//ДокОбъект.applicationID = "";
		//ДокОбъект.Статус="";
		//ДокОбъект.Записать();
		Возврат 0;
	КонецЕсли;

	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Отправитель_Площадка);

	Попытка
		Если ПустоеЗначение(тзУсловияПеревозки) = 1 Тогда  // не переданы в параметре, посмотрим в документе
			ИмяФайла = СокрЛП(док.ИмяФайлаРегионализация);
			Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда
				ТзУсловияПеревозки = ЗначениеИзФайла(ИмяФайла);
			КонецЕсли;
		КонецЕсли;
	Исключение	КонецПопытки;

	ЗапросXML = ВСД2_транзакция_ЗапросXML(док,тзУсловияПеревозки);
	
	appID = ОтправитьЗапрос2(док, ЗапросXML, ПолучитьОтветВетис);

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_транзакция", док);
	
	Возврат appID;

КонецФункции


Функция ОтправитьВсе_ВСД2_Транзакция(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД2_Транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД2_Транзакция(СписокВСД,НачДата, КонДата);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Состояние("Меркурий: отправка ВСД2 исходящие");
	ГМ.СообщитьИнфо("Начало отправки документов","", "i");

	t1 = ГМ.Старт();
	
	Если ПустоеЗначение(СписокВСД)=1 Тогда
		ГМ.СообщитьИнфо("Не выбраны ВСД для отправки");
		Возврат 0;
	КонецЕсли;

	КолвоДок=0;
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		Если ГМ.СтатусЗакрыт( ВСД )=1 Тогда
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;

		ГМ.СообщитьИнфо("Отправка "+ВСД+" "+ВСД.Статус, ВСД);

		Отправить_ВСД2_транзакция( ВСД );
		КолвоДок=КолвоДок+1;

	КонецЦикла;
	
	ГМ.Финиш(t1, Сам(), "ОтправитьВсе_ВСД2_Транзакция", , , " Количество="+КолвоДок );

	ГМ.СообщитьИнфо("Отправка документов завершена","");
КонецФункции

Функция ОтправитьВсе_ВСД2_Транзакция_Параллельно(СписокВСД="",НачДата, КонДата) Экспорт

	//стандартное поведение функции
	Состояние("Меркурий: отправка ВСД2 исходящие");
	ГМ.СообщитьИнфо("Начало отправки документов","");

	t1 = ГМ.Старт();

	Если ПустоеЗначение(СписокВСД)=1 Тогда
		ГМ.СообщитьИнфо("Не выбраны ВСД для отправки");
		Возврат 0;
	КонецЕсли;

	// проверка списка, удаляем лишние
	А = СписокВСД.РазмерСписка();
	Пока А>0 Цикл
		ВСД = СписокВСД.ПолучитьЗначение( А );
		Если ( ГМ.СтатусЗакрыт( ВСД )=1 ) ИЛИ 
			 (ВСД.ПометкаУдаления()=1) Тогда  
			СписокВСД.УдалитьЗначение( А );
		КонецЕсли;
		А=А-1;
	КонецЦикла;
	
	// запрос условий перевозки
	ОсновнойРегион = ГМ.ПолучитьКонстанту("Регион");
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);
		
		Если (ПустоеЗначение(ВСД.Получатель_Площадка.Регион)=0 ) И
			 (ВСД.Получатель_Площадка.Регион <> ОсновнойРегион) И
			 ( ПустоеЗначение( ВСД.ИмяФайлаРегионализация) = 1 ) Тогда
			 	
			УсловияПеревозки_Получить( ВСД, 0, 1 );
			
		КонецЕсли;		

	КонецЦикла;

	ГМ.Пауза( ); 
	
	// ответ условий перевозки
	ОсновнойРегион = ГМ.ПолучитьКонстанту("Регион");
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		Если ( ПустоеЗначение(ВСД.Получатель_Площадка.Регион)=0 ) И		
			 ( ВСД.Получатель_Площадка.Регион <> ОсновнойРегион ) И
			 ( ПустоеЗначение( ВСД.ИмяФайлаРегионализация) = 1 ) Тогда
			Если ПустоеЗначение( ВСД.applicationID ) = 0 Тогда				
				
				тзУсловияПеревозки = УсловияПеревозки_Ответ( ВСД.applicationID, ВСД, 1, 0);				
				
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	// отправка
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);
		
		Отправить_ВСД2_транзакция( ВСД, "", 0);

	КонецЦикла;

	ГМ.Пауза( ); 
	
	// получаем ответ
	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		спПараметры = СоздатьОбъект("СписокЗначений");	
		спПараметры.Установить("applicationID", ВСД.applicationID);
		спПараметры.Установить("докСсылка", ВСД );		
		
		Результат = ПолучитьРезультат_ВСД_2( спПараметры, 0 );
		
		ГМ.СообщитьИнфо("Результат = "+Результат, ВСД);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2( спПараметры, 1 );
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;
		
	ГМ.Финиш(t1, Сам(), "ОтправитьВсе_ВСД2_Транзакция_Параллельно", , , " Количество="+СписокВСД.РазмерСписка() );
	
	ГМ.СообщитьИнфо("Отправка документов завершена","");
	Возврат 1;
	
КонецФункции


Функция ОформитьВСД2(РеализацияТоваров) Экспорт
	КонтФормы = "";
	ОткрытьФорму("Документ.ВСД2_Транзакция",КонтФормы, РеализацияТоваров);
КонецФункции


Функция ВСД2_транзакция_ПолучитьОтветВЕТИС( док ) Экспорт

	Если (Док.Вид() = "Реализация") ИЛИ 
		 (Док.Вид() = "ПеремещениеТМЦ") ИЛИ 
		 (Док.Вид() = ГМ.СписокКонстант.Получить("НазваниеВидаДокументаРеализация")) Тогда 
		 	
		Док_ВСД_транзакция = ГМ.Выбрать_ВСД_транзакция(Док);
		тзВСД = ГМ.Выбрать_ВСД(Док_ВСД_транзакция);

	Иначе
		Док_ВСД_транзакция = док;
	КонецЕсли;

	спПараметры = СоздатьОбъект("СписокЗначений");	
	спПараметры.Установить("applicationID", Док_ВСД_транзакция.applicationID );
	
	ПолучитьРезультат_ВСД_2( спПараметры );

КонецФункции
//	 }

// { ========================== ВСД2_производство ==========================
Функция ВСД2_производство_ЗапросXML(док)
	//док = СоздатьОбъект("Документ.ВСД_производство");
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_производство_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_производство_ЗапросXML(док);
	КонецЕсли;
	//}

	Запрос ="<SOAP-ENV:Envelope
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
		|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|<SOAP-ENV:Header/>
		|<SOAP-ENV:Body>
		|<apldef:submitApplicationRequest>
		|<apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|<apl:application>
		|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
		|<apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|<apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") + "</apl:issueDate>
		|<apl:data>
		|<merc:registerProductionOperationRequest>
		|<merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
		|<merc:initiator>
		|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|</merc:initiator>
		|<merc:enterprise>
		|<bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
		|</merc:enterprise>
		|<merc:productionOperation> ";

// НЗП
		Если (ПустоеЗначение(Док.operationId) = 0) Тогда
			Запрос=Запрос+"
			|<vd:operationId>"+ СокрЛП(Док.operationId) +"</vd:operationId>
			|";
		КонецЕсли;

		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			//порядок добавления имеет значение -
			// 1. rawBatch = списание
			// Уровни упаковки можно использовать, пока без упаковки
			Если док.ВидДвижения=2 Тогда
				Запрос=Запрос+"
				| <vd:rawBatch>
				|<vd:sourceStockEntry>
				| <bs:guid>" + СокрЛП(док.Партия.guid) + "</bs:guid>
				|</vd:sourceStockEntry>
				|<vd:volume>"+ док.Количество +"</vd:volume>
				|<vd:unit>
				| <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.Guid) +"</bs:guid>
				|</vd:unit>
				| </vd:rawBatch>
				|";
			КонецЕсли;
		КонецЦикла;



	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		Если док.ВидДвижения=1 Тогда // Выпуск
	
			Запрос=Запрос+"
				|<vd:productiveBatch>
				|<vd:productType>"+ док.Продукция.Тип +"</vd:productType>
				|<vd:product>
				|<bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
				|</vd:product>
				|<vd:subProduct>
				|<bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
				|</vd:subProduct>
				|<vd:productItem>
				// Обязательно должно быть заполнено хотя бы одно из полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
				|<bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>
				|</vd:productItem>
				|<vd:volume>"+ Док.Количество +"</vd:volume>
				|<vd:unit>
				|<bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
				|</vd:unit>";
		//		|<vd:dateOfProduction> ";
				//Может быть указана датой ИЛИ диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
				//Для скоропортящейся продукции обязательны к указанию год/месяц/день И могут быть указаны час/минута.
				//Для не скоропортящейся продукции обязательны к указанию год/месяц И может быть указан день.
				//Для не скоропортящейся продукции дата выработки И дата окончания срока годности должны быть заданы в одном формате
				//	(например, Если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
	
			Запрос = Запрос + ГМ.Изготовление_СрокГодности_в_XML(док, "vd" );
	
			//Уникальный идентификатор производственной партии продукции.
			Запрос=Запрос+"
			|<vd:batchID>"+ СокрЛП( док.НомерПартии ) +"</vd:batchID>
			|<vd:perishable>"+ ГМ.булево(док.Скоропортящийся)+"</vd:perishable>
			|<vd:lowGradeCargo>"+ ГМ.булево(док.Некачественный)+"</vd:lowGradeCargo>
			|";
		
				
			Запрос = Запрос + МаркировкаДокументаВЗапрос( Док );

			Запрос=Запрос+"
			|</vd:productiveBatch>";
		КонецЕсли; // производство


	КонецЦикла;
    // завершение операции
	Запрос=Запрос+"
	|<vd:finalizeOperation>"+ГМ.булево(док.ЗавершитьОперацию)+"</vd:finalizeOperation>";


	Запрос=Запрос+"
	|</merc:productionOperation>
	|<merc:vetDocument>
	|<vd:authentication>
	|<vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>";
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED
	Запрос=Запрос+"
	|<vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>";
	Запрос = Запрос+ ?(Пустоезначение(док.особыеотметки) = 0, "<vd:specialMarks>"+ СокрЛП(док.особыеотметки) +"</vd:specialMarks>","");
	Запрос=Запрос+"
	|</vd:authentication>
	|</merc:vetDocument>
	|</merc:registerProductionOperationRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";

	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД_производство(док) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Проверка_ВСД_производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Проверка_ВСД_производство(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = 1; //все в порядке

	Если ( ПустоеЗначение( док.applicationID ) = 0 ) И ( СокрЛП(док.Статус) <> "REJECTED") Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Если ПустоеЗначение(док.Производитель_ХозСубъект.GUID)=1 Тогда
		Предупреждение("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.Производитель_площадка.GUID)=1 Тогда
		Предупреждение("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
		Результат = 0;
	КонецЕсли;

	Если ПустоеЗначение(док.РезультатыИсследований)=1 Тогда
		Предупреждение("Не указаны Результаты Исследований","!");
		Результат = 0;
	КонецЕсли;

	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		//Если ПустоеЗначение(док.Продукция_Элемент.GUID)=1 Тогда
		//	Предупреждение("Не указан Продукция_Элемент.GUID Выполните синхронизацию справочников","!");
		//	Результат = 0;
		//КонецЕсли;
		Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда
			Сообщить("Не указана ЕдиницаИзмерения в строке "+Док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;
		Если док.Количество=0 Тогда
			Предупреждение("не указано Количество в строке "+док.НомерСтроки,"!");
			Результат = 0;
		КонецЕсли;

		Если ( док.ВидДвижения=1) Тогда 

			Если док.Продукция_Элемент.Производитель_Площадка <> док.Производитель_площадка Тогда
				Сообщить("в строке "+док.НомерСтроки+" Продукция производится на другой площадке!","!");
				Результат = 0;
			КонецЕсли;
			Если ( док.Продукция_Элемент.Производитель_ХозСубъект <> док.Производитель_ХозСубъект ) Тогда
				Сообщить("в строке "+док.НомерСтроки+" Ошибка MERC56534 = Хозяйствующий субъект должен являться фирмой производителем в записи продукции","!");
				Результат = 0;
			КонецЕсли;
			
	        ДатаИзготовления1=ГМ.Преобразовать_СтрокаДата_в_Дата( док.ДатаИзготовления1 );
	        Если ДатаИзготовления1>ТекущаяДата() Тогда
	            Сообщить("в строке "+док.НомерСтроки+" указана БУДУЩАЯ дата изготовления","!");
	            Результат = 0;
			КонецЕсли;			
			
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;
КонецФункции


Функция Отправить_ВСД2_Производство(док) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_производство(док);
	КонецЕсли;
	//}

	t1 = ГМ.Старт();
	
	//стандартное поведение функции
	Если Проверка_ВСД_производство(док)=0 Тогда
		Возврат 0;
	КонецЕсли;

	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Производитель_площадка);


	ЗапросXML = ВСД2_производство_ЗапросXML(док);
	
	appID = ОтправитьЗапрос2(док, ЗапросXML);

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_Производство", док);	
	
	Возврат appID;

КонецФункции

Функция ОтправитьВсе_ВСД2_Производство(СписокВСД="",НачДата, КонДата) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьВсе_ВСД2_Производство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьВсе_ВСД2_Производство(СписокВСД,НачДата, КонДата);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Состояние("Меркурий: отправка ВСД Производство");
	Сообщить("Начало отправки документов","i");

	Если ПустоеЗначение(СписокВСД)=1 Тогда
		Сообщить("отправляются ВСД производство за период "+ПериодСтр(НачДата, КонДата));

		СписокВСД = СоздатьОбъект("СписокЗначений");
		Док = СоздатьОбъект("Документ.ВСД2_Производство");
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл

			СписокВСД.ДобавитьЗначение(Док.ТекущийДокумент());

		КонецЦикла;
	Иначе
		Сообщить("отправляются ВСД производство "+СписокВСД.РазмерСписка()+" документов");
	КонецЕсли;

	Для Д=1 По СписокВСД.РазмерСписка() Цикл
		ВСД = СписокВСД.ПолучитьЗначение(Д);

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ГМ.СтатусЗакрыт( ВСД )=1 Тогда			
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;

		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);

		Отправить_ВСД2_производство( ВСД );

	КонецЦикла;

	Сообщить("Отправка документов завершена","i");
КонецФункции

//}

//{ =====================   Продукция 2.0

Функция ПолучитьРезультат_Список_Продукции(ФайлОтвета,продукцияЭлемент="") Экспорт

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ФайлОтвета);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

    objDom.setProperty("SelectionNamespaces", "
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:v2='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|" );

	//applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;

	productItemList = objDom.selectNodes("//*[local-name() = 'productItem']") ;

    Для i1 = 0 По productItemList.length - 1 Цикл
        productItem = productItemList.item(i1);

		active 	 = НРЕГ(productItem.selectSingleNode("bs:active").text);
		last 	 = НРЕГ(productItem.selectSingleNode("bs:last").text);

		//st  	 = productItem.selectSingleNode("bs:status").text;
		//prodType = productItem.selectSingleNode("dt:productType").text;
		
		guid = productItem.selectSingleNode("bs:guid").text;

		СпрОбъект = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");
		Если ПустоеЗначение(продукцияЭлемент)=0 Тогда
			СпрОбъект.НайтиЭлемент(продукцияЭлемент);
		Иначе
			// если указан GUID - ищем только по GUID 
			Если ПустоеЗначение(guid)=0 Тогда 
				Если СпрОбъект.НайтиПоРеквизиту("GUID", guid ,1)=0 Тогда
					СпрОбъект.Новый();
				КонецЕсли;
			Иначе			
				Если СпрОбъект.НайтиПоНаименованию( productItem.selectSingleNode("dt:name").text)=0 Тогда
					СпрОбъект.Новый();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		//Если active="false" Тогда
		//	Продолжить;
		//КонецЕсли;

		СпрОбъект.Наименование = productItem.selectSingleNode("dt:name").text;
		СпрОбъект.Продукция = ГМ.НайтиПродукцию(productItem.selectSingleNode("dt:product").selectSingleNode("bs:guid").text);
		СпрОбъект.ВидПродукции = ГМ.НайтиВидПродукции(productItem.selectSingleNode("dt:subProduct").selectSingleNode("bs:guid").text);
		СпрОбъект.UUID = productItem.selectSingleNode("bs:uuid").text;
		СпрОбъект.GUID = guid;
		Попытка СпрОбъект.СоответствуетГОСТу = ?(productItem.selectSingleNode("dt:correspondsToGost").text = "true",1,0); Исключение	КонецПопытки;
		Попытка СпрОбъект.Гост = productItem.selectSingleNode("dt:gost").text; Исключение	КонецПопытки;
		Попытка СпрОбъект.GTIN = productItem.selectSingleNode("dt:globalID").text; Исключение КонецПопытки;
		Попытка СпрОбъект.Артикул	 = productItem.selectSingleNode("dt:code").text; Исключение КонецПопытки;
		СпрОбъект.ТермическоеСостояние = ?( ПустоеЗначение(СпрОбъект.ТермическоеСостояние) = 1, ГМ.СписокКонстант.Получить("ТермУсловияПеревозки"), СпрОбъект.ТермическоеСостояние );
		// Фасовка
		Попытка packaging = productItem.selectSingleNode("*[local-name()='packaging']"); Исключение packaging=""	КонецПопытки;
		Попытка ФасовкаНаименование = packaging.selectSingleNode("dt:packagingType").selectSingleNode("dt:name").text; 	Исключение ФасовкаНаименование=""	КонецПопытки;
		Попытка СпрОбъект.ТипФасовки = ГМ.НайтиФормуУпаковки( packaging.selectSingleNode("dt:packagingType").selectSingleNode("bs:guid").text,ФасовкаНаименование );	Исключение 	КонецПопытки;
		Попытка	СпрОбъект.КолВоЕдиницФасовки = Число(packaging.selectSingleNode("dt:quantity").text);	Исключение	КонецПопытки;
		Попытка	СпрОбъект.ОбъемЕдиницыФасовки = Число(packaging.selectSingleNode("dt:volume").text); Исключение	КонецПопытки;
		Попытка	СпрОбъект.ЕдИзмОбъемаФасовки = ГМ.НайтиЕдИзмерения(packaging.selectSingleNode("dt:unit").selectSingleNode("bs:guid").text);	Исключение 	КонецПопытки;

		//Площадка(И) производитель(И) - Пока в 1 экземпляре
		Попытка СпрОбъект.Площадка = НайтиПлощадку(productItem.selectSingleNode("dt:producing").selectSingleNode("dt:location").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
			//ГМ.ЗагрузитьПлощадкуПоGUID(productItem.selectSingleNode("dt:producing").selectSingleNode("dt:location").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
			
		//Попытка СпрОбъект.Площадка = ГМ.НайтиПлощадку(productItem.selectSingleNode("dt:producing").selectSingleNode("dt:location").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
		Попытка СпрОбъект.Производитель_ХозСубъект = ГМ.НайтиХСпоGUID(productItem.selectSingleNode("dt:producer").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
		Попытка СпрОбъект.Собственник_ХозСубъект = ГМ.НайтиХСпоGUID(productItem.selectSingleNode("dt:tmOwner").selectSingleNode("bs:guid").text);  Исключение	КонецПопытки;
		Попытка	СпрОбъект.Производитель_Площадка = СпрОбъект.Площадка; Исключение КонецПопытки;
			
		Попытка СпрОбъект.active = ?( active="true",1,0) Исключение	КонецПопытки;
		Попытка СпрОбъект.last = ?( last="true",1,0) Исключение	КонецПопытки;
			
		СпрОбъект.Записать();

		ГМ.СообщитьИнфо("Записан ["+СпрОбъект.ТекущийЭлемент()+"] uuid =["+СпрОбъект.uuid+"]", СпрОбъект.ТекущийЭлемент());
		
		//Если ((last="true") И (active="false")) Тогда
		Если (active="false") Тогда
			//СпрОбъект.GUID = "";
			//СпрОбъект.Записать();
			СпрОбъект.Удалить(0);
			ГМ.СообщитьИнфо("Удален ["+СпрОбъект.ТекущийЭлемент()+"] uuid =["+СпрОбъект.uuid+"]", СпрОбъект.ТекущийЭлемент());
		Иначе
			СпрОбъект.СнятьПометкуУдаления();
		КонецЕсли;		
	КонецЦикла;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Возврат "";
КонецФункции


Функция Продукция_Инфо_ЗапросXML( продукция )
	Запрос = "
	|<soapenv:Envelope
	|xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'>
	| <soapenv:Header/>
	| <soapenv:Body>
	|<ws:getProductItemByGuidRequest>
	| <bs:guid>"+ СокрЛП(продукция.GUID) +"</bs:guid>
	|</ws:getProductItemByGuidRequest>
	| </soapenv:Body>
	|</soapenv:Envelope>
	|";

	Возврат запрос;
КонецФункции

Процедура Получить_Инфо_Продукции( Продукция ) Экспорт
	Если ПустоеЗначение(Продукция) = 1 Тогда
	    Сообщить("Не указана Продукция для получения инфо");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(Продукция.GUID) = 1 Тогда
	    Сообщить("У Продукции "+Продукция+" отсутствует GUID, запрос невозможен");
		Возврат;
	КонецЕсли;

	ЗапросXML = Продукция_Инфо_ЗапросXML( Продукция );

	метод = ГМ.Компонента.GetMethod();
    //метод.Service = "platform/services/2.0/ProductService";
	метод.Service = "platform/services/2.1/ProductService";
    метод.Action = "GetProductItemByGuid";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Результат = ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename,Продукция);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

КонецПроцедуры

Функция  ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID) Экспорт

	Если ПустоеЗначение(appID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	ГМ.Пауза( );

	Сообщить("Отправляем запрос ["+продукцияЭлемент+"]" );
	//Результат = ГМ.Компонента.SendRequestResult( appID );
	Результат = ГМ.ПолучитьРезультатСервер( appID );

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

	ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename,продукцияЭлемент);
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );

	Возврат Результат;
КонецФункции

// документация - http://help.vetrf.ru/wiki/ModifyProducerStockListOperation_v2.0
Функция Изменить_Продукцию_ЗапросXML(продукцияЭлемент,RegisterModificationType)

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Изменить_Продукцию_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Изменить_Продукцию_ЗапросXML(продукцияЭлемент,RegisterModificationType);
	КонецЕсли;
	//}

	Запрос ="<SOAP-ENV:Envelope
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
		|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|<SOAP-ENV:Header/>
		|<SOAP-ENV:Body>
		|<apldef:submitApplicationRequest>
		|<apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|<apl:application>
		|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
		|<apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|<apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
		|<apl:data>
		|<merc:modifyProducerStockListRequest>
		|<merc:localTransactionId>" + "[GUID]" + "</merc:localTransactionId>
		|<merc:initiator>
		|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|</merc:initiator>
		|<merc:modificationOperation>
	    |<vd:type>"+RegisterModificationType+"</vd:type>
		|";

		Если RegisterModificationType = "DELETE" Тогда
			Запрос = Запрос + "
		    |<vd:affectedList>
		    |<dt:productItem>";
		    Если ПустоеЗначение(продукцияЭлемент.uuid) = 0 Тогда
				Запрос = Запрос + "
	    		|<bs:uuid>"+СокрЛП(продукцияЭлемент.uuid)+"</bs:uuid>";
			КонецЕсли;

			Запрос = Запрос + "
			|</dt:productItem>
		    |</vd:affectedList>";

		Иначе
			Запрос = Запрос + "
		    |<vd:resultingList>
		    |<dt:productItem>";

			//При Модификации
	//	    Если ПустоеЗначение(продукцияЭлемент.guid) = 0 Тогда
	//			Запрос = Запрос + "
	//    		|<dt:guid>"+СокрЛП(продукцияЭлемент.guid)+"</dt:guid>";
	//		КонецЕсли;

		    Если ПустоеЗначение(продукцияЭлемент.uuid) = 0 Тогда
				Запрос = Запрос + "
	    		|<bs:uuid>"+СокрЛП(продукцияЭлемент.uuid)+"</bs:uuid>";
			КонецЕсли;


			Попытка //Нет пока такого реквизита в справочнике
			    Если ПустоеЗначение(продукцияЭлемент.GTIN) = 0 Тогда
					Запрос = Запрос + "
	    			|<dt:globalID>"+ продукцияЭлемент.GTIN +"</dt:globalID>";
				КонецЕсли;
			Исключение КонецПопытки;

			Название = ЗаменитьСпецСимволы( продукцияЭлемент.Наименование );
			Запрос = Запрос + "
		    |<dt:name>"+СокрЛП( Название )+"</dt:name>";
		    Если ПустоеЗначение(продукцияЭлемент.Артикул) = 0 Тогда
				Запрос = Запрос + "
	    		|<dt:code>"+СокрЛП(продукцияЭлемент.Артикул)+"</dt:code>";
			КонецЕсли;
			Запрос = Запрос + "
		    |<dt:productType>"+продукцияЭлемент.Продукция.Тип+"</dt:productType>
	    	|<dt:product>
		    |<bs:guid>"+Сокрлп(продукцияЭлемент.Продукция.GUID)+"</bs:guid>
	    	|</dt:product>
		    |<dt:subProduct>
	    	|<bs:guid>"+Сокрлп(продукцияЭлемент.ВидПродукции.GUID)+"</bs:guid>
		    |</dt:subProduct>
			|<dt:correspondsToGost>"+ГМ.Булево(продукцияЭлемент.СоответствуетГОСТу)+"</dt:correspondsToGost>";
		    Если продукцияЭлемент.СоответствуетГОСТу = 1 Тогда
				Запрос = Запрос + "
		    	|<dt:gost>"+СокрЛП(продукцияЭлемент.Гост)+"</dt:gost>";
			КонецЕсли;
			// ХС Производитель И владелец ТМ
			Запрос = Запрос + "
		    |<dt:producer>
	    	|<bs:guid>"+Сокрлп(ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
		    |</dt:producer>
		    |<dt:tmOwner>
	    	|<bs:guid>"+Сокрлп(ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
		    |</dt:tmOwner>";


	//45 	·········<dt:producing> 	dt:ProductItemProducing 	[0..*] 	Список площадок, на которых выпускается данная продукция.
	//46 	············<dt:location> 	dt:Enterprise 	[1..1] 	Площадка, осуществляющая выпуск продукции.
	//47 	···············<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии предприятия. 	<bs:uuid>9c706614-b995-4bdd-bda3-8fa9de70803a</bs:uuid>
	//48 	···············<bs:guid> 	bs:UUID 	[1..1] 	Глобальный идентификатор предприятия. 	<bs:guid>12f04ea3-e236-4b71-b427-e04d41b26de4</bs:guid>
	//49 	············</dt:location>
	//50 	·········</dt:producing>
			Запрос = Запрос + "
		    |<dt:producing>
			|<dt:location>
	    	| <bs:guid>"+Сокрлп(продукцияЭлемент.Площадка.GUID)+"</bs:guid>
		    |</dt:location>
		    |</dt:producing>";

	// ЖД ФАСОВКА
			Если ПустоеЗначение(продукцияЭлемент.ТипФасовки)= 0 Тогда
			Запрос = Запрос + "
			|<dt:packaging>
		    |<dt:packagingType>
	    	|<bs:guid>"+Сокрлп(продукцияЭлемент.ТипФасовки.GUID)+"</bs:guid>
		    |</dt:packagingType>
	    	|<dt:quantity>"+продукцияЭлемент.КолвоЕдиницФасовки+"</dt:quantity>
		    |<dt:volume>"+продукцияЭлемент.ОбъемЕдиницыФасовки+"</dt:volume>
	    	|<dt:unit>
		    |<bs:guid>"+ СокрЛП(продукцияЭлемент.ЕдИзмОбъемаФасовки.Guid) +"</bs:guid>
	    	|</dt:unit>
		    |</dt:packaging>";

			КонецЕсли;
			Запрос = Запрос + "
			|</dt:productItem>
		    |</vd:resultingList>";

		КонецЕсли;

		Запрос = Запрос + "
	    |</merc:modificationOperation>
	    |</merc:modifyProducerStockListRequest>
	    |</apl:data>
	    |</apl:application>
	    |</apldef:submitApplicationRequest>
		|</SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";


	Возврат Запрос;
КонецФункции

Функция Проверить_ВСД2_Продукция_Элемент( ПродукцияЭлемент )

	Если ПустоеЗначение(продукцияЭлемент.Площадка.GUID)=1 Тогда
		Сообщить("В продукцияЭлемент.Площадка пустой GUID");
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(ПродукцияЭлемент.ЕдиницаИзмерения) = 1 Тогда
	    Сообщить("Не указана Единица Измерения","!!");
		Возврат 0;
	КонецЕсли;	

//	Если ПустоеЗначение(ПродукцияЭлемент.ЕдИзмОбъемаФасовки) = 1 Тогда
//	    Сообщить("Не указана ЕдИзмОбъемаФасовки","!!");
//		Возврат 0;
//	КонецЕсли;	
//
//	Если (ПродукцияЭлемент.ОбъемЕдиницыФасовки) = 0 Тогда
//	    Сообщить("Не указана ОбъемЕдиницыФасовки","!!");
//		Возврат 0;
//	КонецЕсли;	
	
	Возврат 1;
КонецФункции

Функция  Изменить_Продукцию( ПродукцияЭлемент , RegisterModificationType) Экспорт

	Если Проверить_ВСД2_Продукция_Элемент(продукцияЭлемент)=0 Тогда
		Сообщить("["+ПродукцияЭлемент+"] не заполнен ","!");
		Возврат "REJECTED";
	КонецЕсли;
	
	ЗапросXML = Изменить_Продукцию_ЗапросXML(продукцияЭлемент, RegisterModificationType);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	Результат = "";
	Если ПустоеЗначение(appID) = 0 Тогда
		Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Возврат Результат;

КонецФункции

Функция Получить_Список_Продукции_ЗапросXML(Площадка)

	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
    |<soapenv:Header/>
    |<soapenv:Body>
    | <ws:getProductItemListRequest>
    |<bs:listOptions>
    | <bs:count>1000</bs:count>
    | <bs:offset>0</bs:offset>
    |</bs:listOptions>
    |<dt:enterprise>
    | <bs:guid>"+ СокрЛП(Площадка.GUID) +"</bs:guid>
    |</dt:enterprise>
    | </ws:getProductItemListRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция Получить_Список_Продукции( Площадка ) Экспорт

	ЗапросXML = Получить_Список_Продукции_ЗапросXML( Площадка );

	метод = ГМ.Компонента.GetMethod();

	//метод.Service = "platform/services/2.0/ProductService";
	метод.Service = "platform/services/2.1/ProductService";
    метод.Action = "GetProductItemList";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;
	ПолучитьРезультат_Список_Продукции(ГМ.Компонента.LogFilename);
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	Возврат appID;

КонецФункции

//} =======================  Продукция окончание 

//{ ====================== Аннулирование ВСД Транспортного v2 ===========================

Функция ВСД2_Аннулирование_ЗапросXML(док)
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_Аннулирование_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_Аннулирование_ЗапросXML(док);
	КонецЕсли;
	//}

	Запрос = "
	|<SOAP-ENV:Envelope
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|<SOAP-ENV:Header/>
	|<SOAP-ENV:Body>
	|<apldef:submitApplicationRequest>
	|<apldef:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|<apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|<apl:data>
	|<merc:withdrawVetDocumentRequest>
	|<merc:localTransactionId>[GUID]</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ГМ.СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|</merc:initiator>
	|<merc:vetDocumentId>"+ СокрЛП(док.UUID) +"</merc:vetDocumentId>
	|<merc:withdrawReason>"+ГМ.СписокКонстант.Получить("ПарамПричинаАннулирования")+"</merc:withdrawReason>
	|<merc:withdrawDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T23:59:59") +"</merc:withdrawDate>
	|<merc:specifiedPerson>
	|<vd:login>"+ ГМ.СписокКонстант.Получить("param_vetdoctor_login")+"</vd:login>
	|</merc:specifiedPerson>
	|</merc:withdrawVetDocumentRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";

	Возврат Запрос;
КонецФункции


Функция Отправить_ВСД2_Аннулирование( док ) Экспорт
	
	t1 = ГМ.Старт();

	Если ПустоеЗначение(док)=1 Тогда
		Возврат 0;
	КонецЕсли;

	Если СокрЛП(док.ТипВСД) = "PRODUCTIVE" Тогда
		Сообщить("Производственный ВСД не аннулируем " + Док);
		Возврат "";
	КонецЕсли;

	Если ПустоеЗначение(док.uuid) = 1 Тогда
		Сообщить("В документе "+док+" не указан uuid, аннулирование невозможно");
		Возврат "";
	КонецЕсли;

	//ЖД - решение проблемы загрузки партий из ответа в правильную площадку при наличии неск. площадок у ХС
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Отправитель_Площадка);

	ЗапросXML = ВСД2_Аннулирование_ЗапросXML(док);

	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе( док, appID );
	
	Если ГМ.НайтиОшибки( док )>0 Тогда
		Возврат appID;
	КонецЕсли;	
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		спПараметры = СоздатьОбъект("СписокЗначений");	
		спПараметры.Установить("applicationID", appID );
		спПараметры.Установить("докСсылка", док );
		
		Результат = ПолучитьРезультат_ВСД_2( спПараметры );			
		
		ГМ.СообщитьИнфо("Результат = "+Результат, док);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД_2( спПараметры );					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_Аннулирование", док);
	
	Возврат Результат;
КонецФункции


Процедура Аннулировать_ВСД2_транзакция( док ) Экспорт
	
	Если ПустоеЗначение(док) = 1 Тогда
		Возврат;
	КонецЕсли;

	тзВСД = ГМ.Выбрать_ВСД(док);

	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку()=1 Цикл
		ДокОснование = тзВСД.Док.ДокОснование;
		Если (тзВСД.Док.СтатусВСД <> Перечисление.ВСД_СтатусВСД.CONFIRMED) Тогда 
			ГМ.СообщитьИнфо("Аннулировать "+ тзВСД.Док+" невозможно, статус ВСД = "+тзВСД.Док.СтатусВСД, тзВСД.Док);
		    Продолжить;  
		КонецЕсли;
		Результат = Отправить_ВСД2_Аннулирование(тзВСД.Док);		
		Если НЕ ( Результат = "COMPLETED" ) Тогда  
			ГМ.СообщитьИнфо("Не удалось Аннулировать "+тзВСД.Док+" для "+док, тзВСД.Док);
		КонецЕсли;		
	КонецЦикла;

	Если ( ПустоеЗначение(ДокОснование)=0 ) Тогда 
		// проверим если все(!) ВСД_Док аннулированы - изменяем статус ДокОснование 
		тзВСД = ГМ.Выбрать_ВСД( ДокОснование );
		
		ДокЗапросАннулирован = 1;
		
		тзВСД.ВыбратьСтроки();
		Пока тзВСД.ПолучитьСтроку() = 1 Цикл
			Если тзВСД.Док.СтатусВСД <> Перечисление.ВСД_СтатусВСД.WITHDRAWN Тогда 
				ДокЗапросАннулирован =0;
			КонецЕсли;
		КонецЦикла;
					
			Если ДокЗапросАннулирован =1 Тогда 
				Попытка
					докОбъект = СоздатьОбъект("Документ");
					докОбъект.НайтиДокумент( ДокОснование );
					докОбъект.Статус = Результат; 
					докОбъект.СтатусВСД = Перечисление.ВСД_СтатусВСД.WITHDRAWN;		
					докОбъект.Записать();
					докОбъект.Удалить(0);
				Исключение
					ГМ.СообщитьИнфо("Не удалось записать статус документа "+ДокОснование+" "+ОписаниеОшибки(), ДокОснование);
				КонецПопытки;
			КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//} **************** Аннулирование ВСД Транспортного окончание v2

//{ ====================== Инвентаризация v2

// http://help.vetrf.ru/wiki/ResolveDiscrepancyOperation_v2.0
Функция ВСД2_инвентаризация_ЗапросXML(док)
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_инвентаризация_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_инвентаризация_ЗапросXML(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	//док = СоздатьОбъект("Документ.ВСД_инвентаризация");

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
	|<apldef:submitApplicationRequest>
	|<apldef:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|<apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|<apl:data>
	|<merc:resolveDiscrepancyRequest>
	|<merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|</merc:initiator>
	|<merc:enterprise>
	|<bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
	|</merc:enterprise>
	|<merc:inventoryDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок, "T00:00:00") + "</merc:inventoryDate>
	|<merc:responsible>
	|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|</merc:responsible>
	|";
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл

		Запрос = Запрос + "
		|<merc:stockDiscrepancy id='_"+ док.НомерСтроки +"'>
		|<vd:resultingList>
		|<vd:stockEntry>";
	    Если ПустоеЗначение(Док.Партия)=0 Тогда // изменяем конкретную партию
			Запрос = Запрос + "
			|<bs:uuid>" + СокрЛП(док.Партия.uuid) + "</bs:uuid>";
			//На случай, когда ПродукцияЭлемент в Партии устаревший, возьмем данные из Партии
		    Если док.Партия.Продукция_Элемент.ВидПродукции <> док.Партия.ВидПродукции Тогда
				Запрос = Запрос + "
				| <vd:batch>
				|<vd:productType>"+ Док.Партия.Продукция.Тип +"</vd:productType>
				|<vd:product>
				|<bs:guid>"+ СокрЛП(Док.Партия.Продукция.GUID) +"</bs:guid>
				|</vd:product>
				|<vd:subProduct>
				|<bs:guid>"+ СокрЛП(Док.Партия.ВидПродукции.GUID) +"</bs:guid>
				|</vd:subProduct>
				|<vd:productItem>";
			Иначе
				Запрос = Запрос + "
				| <vd:batch>
				|<vd:productType>"+ док.Продукция.Тип +"</vd:productType>
				|<vd:product>
				|<bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
				|</vd:product>
				|<vd:subProduct>
				|<bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
				|</vd:subProduct>
				|<vd:productItem>";
				Если ( Док.Продукция_Элемент.ПометкаУдаления() = 1 ) Тогда
					//удаленные ProductItem отправляем без GUID
					ГМ.СообщитьИнфо("в строке №"+ Док.НомерСтроки +" ВСД_Продукция_Элемент ["+ СокрЛП(Док.Продукция_Элемент.Наименование) +"] удален => отправляем с пустым GUID",док, "!");
				ИначеЕсли ПустоеЗначение(док.Продукция_Элемент.GUID) = 0 Тогда
					Запрос = Запрос+ "
					|<bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
				КонецЕсли;
				
				НазваниеПродукции = ЗаменитьСпецСимволы( док.НаименованиеПродукции );
				Если ПустоеЗначение( НазваниеПродукции )= 0 Тогда 
   			    	Запрос = Запрос + " <dt:name>"+ НазваниеПродукции +"</dt:name>";
   				КонецЕсли;
		    КонецЕсли;
		Иначе
			Запрос = Запрос + "
			| <vd:batch>
			|<vd:productType>"+ док.Продукция.Тип +"</vd:productType>
			|<vd:product>
			|<bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
			|</vd:product>
			|<vd:subProduct>
			|<bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
			|</vd:subProduct>
			|<vd:productItem>";
			Если ПустоеЗначение(док.Продукция_Элемент.GUID) = 0 Тогда
				Запрос = Запрос+ "
				|<bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
			КонецЕсли;
			
			НазваниеПродукции = ЗаменитьСпецСимволы( док.НаименованиеПродукции );
			Если ПустоеЗначение( НазваниеПродукции )= 0 Тогда 
			   	Запрос = Запрос + " <dt:name>"+ НазваниеПродукции +"</dt:name>";
   			КонецЕсли;
   		КонецЕсли;

   		Если ПустоеЗначение(док.ТипФасовки)=0 Тогда
			Запрос = Запрос+ "
   	    	|<dt:packaging>
        	|<dt:packagingType>
	        |<bs:guid>"+ СокрЛП(док.ТипФасовки.GUID) +"</bs:guid>
   		    |</dt:packagingType>
       		|<dt:quantity>"+ док.КолВоЕдиницФасовки +"</dt:quantity>
	        |<dt:volume>"+ док.ОбъемЕдиницыФасовки +"</dt:volume>
   		    |<dt:unit>
       		|<bs:guid>"+ СокрЛП(док.ЕдИзмОбъемаФасовки.GUID) +"</bs:guid>
	        |</dt:unit>
   		    |</dt:packaging>";
		КонецЕсли;

        Запрос = Запрос +"
		| </vd:productItem>
		|<vd:volume>"+ Док.Количество +"</vd:volume>
		|<vd:unit>
		|<bs:uuid>"+ СокрЛП(док.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|</vd:unit>";


		Запрос = Запрос + ГМ.Изготовление_СрокГодности_в_XML(док, "vd");

		Запрос=Запрос+"
		|<vd:perishable>"+ ГМ.булево(док.Скоропортящийся)+"</vd:perishable>
		|<vd:origin>";
		Если (ПустоеЗначение(док.Производитель_Страна) = 0)Тогда
			Запрос=Запрос+"
			|<vd:country>
			|<bs:uuid>"+СокрЛП(док.Производитель_Страна.uuid)+"</bs:uuid>
			|</vd:country>";
		КонецЕсли;
		Если (ПустоеЗначение(док.Производитель_Площадка.GUID) = 0)Тогда
			Запрос=Запрос+"
			| <vd:producer>
			|	<dt:enterprise>
			|	  <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
			|	</dt:enterprise>
			| <dt:role>PRODUCER</dt:role>
			|</vd:producer>";
		КонецЕсли;
		Запрос=Запрос+"
		|</vd:origin>
		|<vd:lowGradeCargo>"+ ГМ.булево(док.Некачественный)+"</vd:lowGradeCargo>";

		Запрос = Запрос + МаркировкаДокументаВЗапрос( Док );		

		Запрос=Запрос+"
		|<vd:owner>
		|<bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
		|</vd:owner>
		|</vd:batch>
		|</vd:stockEntry>
		|</vd:resultingList>
		|</merc:stockDiscrepancy>
		|";
	КонецЦикла;
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		Запрос = Запрос + "

		|<merc:discrepancyReport for='_"+ док.НомерСтроки +"'>
		|<vd:issueNumber>"+ Док.НомерДок +"</vd:issueNumber>
		|<vd:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок) + "</vd:issueDate>
		|<vd:reason>
		|<vd:name>"+СокрЛП(док.ПричинаРасхождения)+"</vd:name>
		|</vd:reason>
		|<vd:description>"+СокрЛП(док.ОписаниеНесоответствия)+"</vd:description>
		|</merc:discrepancyReport>
		|";
	КонецЦикла;
	Запрос = Запрос + "
	|</merc:resolveDiscrepancyRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";

	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_Инвентаризация(док)
	// дата изготовления И срок годности обязательны
	// при добавлении партии обязательны Страна И Производитель_Площадка
	Рез = 1;
	
	Если ( ПустоеЗначение( док.applicationID ) = 0 ) И ( СокрЛП(док.Статус) <> "REJECTED") Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Если ПустоеЗначение(док.Владелец_ХозСубъект) = 1 Тогда
	    Сообщить("Не указан владелец ХС");
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(док.Владелец_Площадка) = 1 Тогда
	    Сообщить("Не указана Площадка владельца");
		Возврат 0;
	КонецЕсли;

	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку()=1 Цикл
		Если док.количество>0 Тогда
	        Если (ПустоеЗначение(док.Продукция)=1) ИЛИ (ПустоеЗначение(док.ВидПродукции)=1) ИЛИ (ПустоеЗначение(док.Продукция_Элемент)=1) Тогда
	        	Сообщить("Не указаны Продукция, Вид Продукции ИЛИ Продукция_Элемент"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	
			Если (ПустоеЗначение(док.ЕдиницаИзмерения)=1) Тогда
	        	Сообщить("Не указана Единица измерения"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	
	        Если (ПустоеЗначение(док.ДатаИзготовления1)=1) И (ПустоеЗначение(док.ДатаИзготовления2)=1) Тогда
	        	Сообщить("Не указана Дата изготовления"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	        Если (ПустоеЗначение(док.ДатаСрокГодности1)=1) И (ПустоеЗначение(док.ДатаСрокГодности2)=1) Тогда
	        	Сообщить("Не указан срок годности"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	        Если (док.ДатаИзготовления1 = док.ДатаИзготовления2 ) Тогда
	        	Сообщить("Дата Изготовления совпадают "+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
	        Если (док.ДатаСрокГодности1 = док.ДатаСрокГодности2 ) Тогда
	        	Сообщить("Дата Срок годности совпадают "+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
	        КонецЕсли;
		    Если ПустоеЗначение(док.Партия) = 1 Тогда
		        Если (ПустоеЗначение(док.Производитель_Страна)=1) ИЛИ (ПустоеЗначение(док.Производитель_Площадка)=1) Тогда
	    	    	Сообщить("Не указана Страна производителя ИЛИ его Площадка"+" в строке "+док.НомерСтроки,"!");
					Возврат 0;
		        КонецЕсли;
			КонецЕсли;
			Если (ПустоеЗначение(док.ТипФасовки)=0) И (ПустоеЗначение(док.ЕдИзмОбъемаФасовки)=1) Тогда
	        	Сообщить("Не указана Единица измерения Фасовки"+" в строке "+док.НомерСтроки,"!");
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
    Возврат Рез;
КонецФункции

Функция Отправить_ВСД2_Инвентаризация(док) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ВСД2_Инвентаризация");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ВСД2_Инвентаризация(док);
	КонецЕсли;
	//}

	t1 = ГМ.Старт();
	
	//стандартное поведение функции

	Если Проверка_ВСД2_инвентаризация(док)=0 Тогда
		Возврат 0;
	КонецЕсли;

	//ГМ.ИнициализацияКомпоненты(док.Фирма);

	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Владелец_Площадка);

	ЗапросXML = ВСД2_инвентаризация_ЗапросXML(док);
	
	appID = ОтправитьЗапрос2(док, ЗапросXML);	

	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_Инвентаризация", док);

	Возврат appID;

КонецФункции

Функция ВСД2_Инвентаризация_ЗаполнитьТЧ(Док)  Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_Инвентаризация_ЗаполнитьТЧ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_Инвентаризация_ЗаполнитьТЧ(Док);
	КонецЕсли;
	//}

	ПараПараметров = СоздатьОбъект("СписокЗначений");
   	ПараПараметров.Установить("ВладелецХС", Док.Владелец_ХозСубъект);
   	ПараПараметров.Установить("ВладелецПлощадка", Док.Владелец_площадка);

   	ОткрытьФормуМодально("Отчет", ПараПараметров,    ГМ.ПолучитьКонстанту("КаталогМодуля")+"ВСД_ПараметрыИнвентаризации.ert");
   	
   	Если ПараПараметров.Получить("СтатусВозврата") <> 1 Тогда
   		Возврат 0;
   	КонецЕсли;
   	
	КолвоМакс = ПараПараметров.Получить("МаксКоличество");
	ДатаМакс = ПараПараметров.Получить("МинСрок");
	ДатаИзг = ПараПараметров.Получить("МинДата");
	Производитель_площадка = ПараПараметров.Получить("Производитель_площадка");
	ВыбНоменклатура = ПараПараметров.Получить("Номенклатура");

	Док.УдалитьСтроки();
	
	СпрПартии = СоздатьОбъект("Справочник.ВСД_Партия");
	СпрПартии.ВыбратьЭлементы();
	колво=0;
	Пока СпрПартии.ПолучитьЭлемент()=1 Цикл
		Если (СпрПартии.ПометкаУдаления()=1) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_Площадка <>  Док.Владелец_площадка) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_ХозСубъект <>  Док.Владелец_ХозСубъект) Тогда
			Продолжить;
		КонецЕсли;

		Если ПустоеЗначение(ДатаМакс)=0 Тогда
			Если ПустоеЗначение(СпрПартии.ДатаСрокГодности1)=0 Тогда
				Если ГМ.Преобразовать_СтрокаДата_в_Дата(СпрПартии.ДатаСрокГодности1) > ДатаМакс Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПустоеЗначение(ДатаИзг)=0 Тогда
			Если ПустоеЗначение(СпрПартии.ДатаИзготовления1)=0 Тогда
				Если ГМ.Преобразовать_СтрокаДата_в_Дата(СпрПартии.ДатаИзготовления1) > ДатаИзг Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(Производитель_площадка) = 0 Тогда
			Если СпрПартии.Производитель_Площадка <> Производитель_площадка Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(ВыбНоменклатура) = 0 Тогда
			ТЗНоменклатуры = ГМ.ПолучитьСписок_Номенклатура_По_ВСД_Продукция_Элемент(СпрПартии.Продукция_Элемент);
			ТЗНоменклатуры.ВыбратьСтроки();
			Нашли = 0;
			Пока ТЗНоменклатуры.ПолучитьСтроку() = 1 Цикл
				Если ТЗНоменклатуры.Номенклатура.ПринадлежитГруппе(ВыбНоменклатура) = 1 Тогда
					Нашли = 1; Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Нашли = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		колво =колво+1;
		Док.НоваяСтрока();
		Док.Партия = СпрПартии.ТекущийЭлемент();
		
		ГМ.ЗаполнитьСтрокуДокумента( Док, Док, Док, 1);

		Если колво >= КолвоМакс Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ВСД2_Инвентаризация_ЗаполнитьТчПоТЗ( Док, тзВСД )  Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_Инвентаризация_ЗаполнитьТчПоТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_Инвентаризация_ЗаполнитьТчПоТЗ( Док, тзВСД );
	КонецЕсли;
	//}

//	ПараПараметров = СоздатьОбъект("СписокЗначений");
//   	ПараПараметров.Установить("ВладелецХС", Док.Владелец_ХозСубъект);
//   	ПараПараметров.Установить("ВладелецПлощадка", Док.Владелец_площадка);
//
//   	ОткрытьФормуМодально("Отчет", ПараПараметров,    ГМ.ПолучитьКонстанту("КаталогМодуля")+"ВСД_ПараметрыИнвентаризации.ert");
//   	
//   	Если ПараПараметров.Получить("СтатусВозврата") <> 1 Тогда
//   		Возврат 0;
//   	КонецЕсли;
   	//
   	КолвоМакс = 500;
	//КолвоМакс = ПараПараметров.Получить("МаксКоличество");
	//ДатаМакс = ПараПараметров.Получить("МинСрок");
	//ДатаИзг = ПараПараметров.Получить("МинДата");
	//Производитель_площадка = ПараПараметров.Получить("Производитель_площадка");
	//ВыбНоменклатура = ПараПараметров.Получить("Номенклатура");

	Док.УдалитьСтроки();
	
	тзВСД.ВыбратьСтроки();
	колво=0;
	Пока тзВСД.ПолучитьСтроку()=1 Цикл
		Если ПустоеЗначение(тзВСД.Пометка)=1 Тогда
			Продолжить;
		КонецЕсли;
		//Если ПустоеЗначение(тзВСД.Партия)=1 Тогда
		//	//Сообщить("");
		//	Продолжить;
		//КонецЕсли;
		//Если (СпрПартии.Получатель_Площадка <>  Док.Владелец_площадка) Тогда
		//	Продолжить;
		//КонецЕсли;
		//Если (СпрПартии.Получатель_ХозСубъект <>  Док.Владелец_ХозСубъект) Тогда
		//	Продолжить;
		//КонецЕсли;

		колво =колво+1;
		Док.НоваяСтрока();
		Док.Партия = тзВСД.Партия;
		
		ГМ.ЗаполнитьСтрокуДокумента( Док, Док, Док, 1);

		Если колво >= КолвоМакс Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции


//} =========================== Инвентаризация

Функция GetRussianEnterpriseList(Регион, Название, Смещение = 0)
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	| <soapenv:Header/>
	| <soapenv:Body>
	|<ws:getRussianEnterpriseListRequest>
	| 	<bs:listOptions>
	|<bs:count>1000</bs:count>
	|<bs:offset>"+Смещение+"</bs:offset>
	|</bs:listOptions>
	| 	<dt:enterprise>";
//	|<bs:guid>"+СокрЛП(ХС.GUID)+"</bs:guid>";
	Если ПустоеЗначение(Название) = 0 Тогда
	    Запрос = Запрос + "
		|<dt:name>"+СокрЛП(Название)+"</dt:name>";
	КонецЕсли;
	Если ПустоеЗначение(Регион)=0 Тогда		
		Запрос = Запрос + "
		|<dt:address>
		| <dt:region>
		|<bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
		| </dt:region>
		|</dt:address>
		|";
	КонецЕсли;
	Запрос = Запрос + "
	|</dt:enterprise>
	|</ws:getRussianEnterpriseListRequest>
	| </soapenv:Body>
	|</soapenv:Envelope>";
	Возврат Запрос;
КонецФункции



//======================================================================
Функция ПоискПлощадок(НаименованиеПлощадки, Регион, ХС = "") Экспорт
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+НаименованиеПлощадки+" ]","i");

	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Пометка","Число",,,"V",3);
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("Статус");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");	
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("Площадка");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");

	ПолученоЗаписей = 1000; Смещение = 0;

	СпрПлощадка = СоздатьОбъект("Справочник.ВСД_Площадка");	
	
	Пока ПолученоЗаписей >= 1000 Цикл
    	ПолученоЗаписей = 0;
		ЗапросXML = GetRussianEnterpriseList( Регион, НаименованиеПлощадки, Смещение);

		метод = ГМ.Компонента.GetMethod();
		метод.Service = "platform/services/2.1/EnterpriseService";
	    метод.Action = "GetRussianEnterpriseList";

		appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

		Сообщить("Загрузка XML-файла: "+ГМ.Компонента.LogFilename);


	    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
		objDom.load(ГМ.Компонента.LogFilename);

		Если ГМ.НайтиОшибки()>0 Тогда
			Возврат appID;
		КонецЕсли;

		objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:v2='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );

        Попытка
			enterpriseList =  objDom.selectNodes("//*[local-name() = 'enterprise']");

			ПолученоЗаписей = enterpriseList.length;

			Для i1 = 0 По enterpriseList.length - 1 Цикл
				enterprise=enterpriseList.item(i1);

				guid = enterprise.selectSingleNode("bs:guid").text;

				тзПлощадки.НоваяСтрока();
				тзПлощадки.Наименование = enterprise.selectSingleNode("dt:name").text;
				тзПлощадки.адрес = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:addressView").text;
				тзПлощадки.guid = guid;
				тзПлощадки.uuid = enterprise.selectSingleNode("bs:uuid").text;
				тзПлощадки.активна = enterprise.selectSingleNode("bs:active").text;
				тзПлощадки.статус = enterprise.selectSingleNode("dt:registryStatus").text;
				тзПлощадки.ДатаСоздания = enterprise.selectSingleNode("bs:createDate").text;
				//тзПлощадки.ДатаИзменения = enterprise.selectSingleNode("dt:registryStatus").text;
				тзПлощадки.ХозСубъект = ХС;
				Если СпрПлощадка.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
					тзПлощадки.Площадка = СпрПлощадка.ТекущийЭлемент();
				КонецЕсли;
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
	    КонецПопытки;
        Смещение = Смещение + 1000;
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	КонецЦикла;

	Сообщить("Загружено "+тзПлощадки.КоличествоСтрок()+" элементов","i");

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename );
	
	Возврат тзПлощадки;
КонецФункции // ПоискПлощадки

Функция НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкиПоНазванию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		ГМ.ХС_ПолучитьGuid(ХС);
	КонецЕсли;

	//Стр = ГМ.ПолучитьНаименованиеКлиента(ХС.Контрагент);

	//ИНН = ГМ.ПолучитьИНН(ХС.Контрагент);
	//Если СтрДлина( СокрЛП(ИНН) )=12 Тогда
	//	стр = СтрЗаменить(стр, " ИП","");
	//	стр = СтрЗаменить(стр, "ИП ","");
	//КонецЕсли;

	//Если УточнитьНазвание=1 Тогда
	//	Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда
	//		Возврат 0;
	//	КонецЕсли;
	//КонецЕсли;

	//тзПлощадки = ПоискПлощадок(стр, Регион, ХС);

	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение("ХозСубъект", ХС);
	СписокПараметров.ДобавитьЗначение("Регион", Регион);
	//СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");

	КаталогОбработки = ГМ.ПолучитьКонстанту("КаталогМодуля");
	ОткрытьФорму("Отчет", СписокПараметров, КаталогОбработки+"ВСД_ПоискПлощадок.ert"); // Меркурий_ЗагрузкаПлощадок

	Возврат 1;
КонецФункции


//{ ===================== Мультимодальные перевозки
// **************** UpdateTransportMovementDetailsOperation

Функция ПолучитьИмяФайла_МаршрутДоставки(Док) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИмяФайла_МаршрутДоставки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИмяФайла_МаршрутДоставки(Док);
	КонецЕсли;
	//}

	КаталогПеревозки = ГМ.ПолучитьКонстанту("КаталогМодуля")+"MultiModal\";
	Если ФС.СуществуетФайл(КаталогПеревозки) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(КаталогПеревозки);
		Исключение
			Предупреждение("Не создан каталог перевозок!"); Возврат "";
		КонецПопытки;
	КонецЕсли;
	Если ПустоеЗначение(Док.UUID)=0 Тогда 
		Код = СокрЛП(Док.UUID);
	Иначе
		Код = СокрЛП(Док.НомерДок);
	КонецЕсли;
	Рез = КаталогПеревозки+док.Вид()+"_"+Код+".mrk";

	Возврат Рез;
КонецФункции

Функция ПолучитьОтвет_ОбновитьТранспорт( applicationID, докСсылка )
	//стандартное поведение функции
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	ГМ.Пауза( );

	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	//Результат = ГМ.Компонента.SendRequestResult( applicationID );
	Результат = ГМ.ПолучитьРезультатСервер( applicationID );
    Файл_Ответа_XML = ГМ.Компонента.LogFilename;
	Если ПустоеЗначение(докСсылка)=0 Тогда
		ГМ.СохранитьСтатусЗапроса(докСсылка);
		//ЗагрузитьXML_ВСД2( Файл_Ответа_XML, докСсылка);
	КонецЕсли;

	Если ГМ.НайтиОшибки( докСсылка )>0 Тогда
		Возврат Результат;
	КонецЕсли;

	ЗагрузитьXML_ВСД2( Файл_Ответа_XML,,1);

	ГМ.СохранитьОтветВДокументе( докСсылка, , applicationID);

	ГМ.УдалитьXML( Файл_Ответа_XML );

	Если (ПустоеЗначение(докСсылка)=0) И
	 	((СокрЛП(докСсылка.Статус)="COMPLETED") ИЛИ (СокрЛП(докСсылка.Статус)="CONFIRMED") ) Тогда
		Попытка
		// проведем только успешно выполненный запрос
			докОснованиеОбъект = СоздатьОбъект("Документ");
			докОснованиеОбъект.НайтиДокумент(докСсылка);
			докОснованиеОбъект.Провести();
		Исключение
		КонецПопытки;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ОбновитьТранспорт_ЗапросXML( док )

	//Если док.ДокОснование.Вид() = "ВСД2" Тогда
	//	докОснование = док;
	//Иначе
	//	тз_ВСД = ГМ.Выбрать_ВСД( док.ДокОснование );
	//КонецЕсли;

	Запрос = "
	|<SOAP-ENV:Envelope
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|<SOAP-ENV:Header/>
	|<SOAP-ENV:Body>
	|<apldef:submitApplicationRequest>
	|<apldef:apiKey>"+ ГМ.СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|<apl:application>
	|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|<apl:issuerId>"+ГМ.СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|<apl:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|<apl:data>
	|<merc:updateTransportMovementDetailsRequest>
	|<merc:localTransactionId>"+ СокрЛП(док.НомерДок) +"</merc:localTransactionId>
	|<merc:initiator>
	|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|</merc:initiator>
	|
	|<vd:deliveryParticipant>
	|<dt:businessEntity>
	| <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|</dt:businessEntity>
	|<dt:enterprise>
	|<bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|</dt:enterprise>
	|</vd:deliveryParticipant>
	|";

	//Запрос=Запрос+"
	//	|<vd:vetDocumentUuid>"+ док.ДокОснование.UUID +"</vd:vetDocumentUuid>
	//	|";

	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку() = 1 Цикл
	Запрос=Запрос+"
		|<vd:vetDocumentUuid>"+ док.ВСД_Док.UUID +"</vd:vetDocumentUuid>
		|";
	КонецЦикла;

	Запрос=Запрос+"
	|<vd:shipmentRoute>
	|";
	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку() = 1 Цикл
		Запрос=Запрос+"
		|<vd:routePoint>
		|<bs:uuid>"+ СокрЛП( док.ТочкаМаршрутаUUID ) +"</bs:uuid>
		|<vd:sqnId>"+ СокрЛП(док.SequenceNumber) +"</vd:sqnId>
		|<vd:nextTransport>
		|<vd:transportType>"+ док.transportType +"</vd:transportType>
		|<vd:transportNumber>";
		//Попытка
			Если док.transportType = 1 Тогда
				 // Контейнер при наличии всегда первый
				Если ПустоеЗначение(док.containerNumber) = 0 Тогда
					Запрос=Запрос+"
       				|<vd:containerNumber>"+СокрЛП(док.containerNumber)+"</vd:containerNumber>";
				КонецЕсли;
				Запрос=Запрос+"
				|<vd:vehicleNumber>"+ СокрЛП(док.vehicleNumber) +"</vd:vehicleNumber>";

				Если ПустоеЗначение(док.trailerNumber) = 0 Тогда
					Запрос=Запрос+"
       				|<vd:trailerNumber>"+СокрЛП(док.trailerNumber)+"</vd:trailerNumber>";
				КонецЕсли;
			ИначеЕсли док.transportType = 2 Тогда
				Запрос=Запрос+"
				|<vd:wagonNumber>"+ СокрЛП(док.wagonNumber) +"</vd:wagonNumber>";
			ИначеЕсли док.transportType = 3 Тогда
				Запрос=Запрос+"
				|<vd:flightNumber>"+ СокрЛП(док.flightNumber) +"</vd:flightNumber>";
			ИначеЕсли (док.transportType = 4) ИЛИ (док.transportType = 5) ИЛИ (док.transportType = 6) Тогда
				Запрос=Запрос+"
				|<vd:shipName>"+ СокрЛП(док.shipName) +"</vd:shipName>";
			КонецЕсли;
		//Исключение
		//	Сообщить("Обновите конфигурацию - отсутствуют ревизиты тч в документе ВСД2_ОбновитьТранспорт");
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;

		Запрос=Запрос+"
		|</vd:transportNumber>
		|</vd:nextTransport>
		|</vd:routePoint>
		|";
	КонецЦикла;
	Запрос=Запрос+"
	|</vd:shipmentRoute>
	|</merc:updateTransportMovementDetailsRequest>
	|</apl:data>
	|</apl:application>
	|</apldef:submitApplicationRequest>
	|</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

// док = ВСД2_ОбновитьТранспорт
// http://help.vetrf.ru/wiki/UpdateTransportMovementDetailsOperation_v2.0
Функция Отправить_ОбновитьТранспортВМаршуртеДоставки( док ) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Отправить_ОбновитьТранспортВМаршуртеДоставки");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Отправить_ОбновитьТранспортВМаршуртеДоставки( док );
	КонецЕсли;
	//}

	t1 = ГМ.Старт();

	ЗапросXML = ОбновитьТранспорт_ЗапросXML( док );
	
	appID = ОтправитьЗапрос2( док, ЗапросXML );


	ГМ.Финиш(t1, Сам(), "Отправить_ОбновитьТранспортВМаршуртеДоставки", док);	
	
	Возврат appID;

КонецФункции
//}

//{ ===================== Объединение Партий
Функция ПроверитьВСД2_ОбъединениеПартий(ВСДСсылка)
	
	Если ПустоеЗначение(ВСДСсылка.applicationID) = 0 Тогда
	    Сообщить("Запрос отправлен, повторная отправка запроса запрещена","!!");
		Возврат 0;
	КонецЕсли;	
	
	Если ПустоеЗначение(ВСДСсылка) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	Попытка
		//Фирма есть не везде		
		Если ПустоеЗначение(ВСДСсылка.Фирма) = 1 Тогда
			Сообщить("Не указана Организация в документе "+ВСДСсылка);
			Возврат 0;
		КонецЕсли;
	Исключение 
	КонецПопытки;
	Если (СокрЛП(ВСДСсылка.Статус)="COMPLETED") Тогда
		Сообщить(""+ВСДСсылка+" статус "+ВСДСсылка.Статус+" НЕ отправляем");
		Возврат 0;
	КонецЕсли;
	//Проверить Отправителя ХС
//	Если НЕ(ВСДСсылка.Владелец_ХозСубъект = Отправитель_Хозсубъект) Тогда
//		Сообщить("Другой ХС Производитель - Выберите в Параметрах организацию для  "+ВСДСсылка.Владелец_ХозСубъект);
//		Возврат 0;
//	КонецЕсли;
	Если ВСДСсылка.ОперацияПрисоединения = 0 Тогда
		Если ПустоеЗначение(ВСДСсылка.ВСД_ПродукцияЭлемент) = 1 Тогда
			Сообщить("При объединении Партий значение Продукция_Элемент Обязательно для Заполнения !!!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	ЕстьОшибки = 0;
	ВСДСсылка.ВыбратьСтроки();
	Пока ВСДСсылка.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ВСДСсылка.Партия) = 1 Тогда
			Сообщить("Не указана Партия в документе "+ВСДСсылка+" не отправлен!");
			ЕстьОшибки = 1;
			Прервать;
		КонецЕсли;
		Если (ПустоеЗначение(ВСДСсылка.ДатаИзготовления1) = 1) ИЛИ (ПустоеЗначение(ВСДСсылка.ДатаСрокГодности1) = 1) Тогда
			ЕстьОшибки = 1;
			Сообщить("Не указаны Дата Изготовления И/ИЛИ Срок годности  "+ВСДСсылка.Партия+" в документе "+ВСДСсылка+" не отправлен!");
			Прервать;
		КонецЕсли;

	КонецЦикла;
	Если ЕстьОшибки = 1 Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Функция ВСД2_ОбъединениеПартий_ЗапросXML(док)
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД2_ОбъединениеПартий_ЗапросXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД2_ОбъединениеПартий_ЗапросXML( док );
	КонецЕсли;
	//}

	Запрос ="<SOAP-ENV:Envelope
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
		|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|<SOAP-ENV:Header/>
		|<SOAP-ENV:Body>
		|<apldef:submitApplicationRequest>
		|<apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|<apl:application>
		|<apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
		|<apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|<apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(док.Датадок, "T00:00:00") + "</apl:issueDate>
		|<apl:data>
		|<merc:mergeStockEntriesRequest>
		|<merc:localTransactionId>" + СокрЛП(док.НомерДок) + "</merc:localTransactionId>
		|<merc:initiator>
		|<vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|</merc:initiator>
		|<merc:enterprise>
		|<bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
		|</merc:enterprise>
		|<merc:mergeOperation>
		|<vd:type>"+?(Док.ОперацияПрисоединения = 1,"ATTACH","MERGE")+"</vd:type>";
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Запрос=Запрос+"
			|<vd:sourceStockEntry>
			| <bs:uuid>" + СокрЛП(Док.Партия.uuid) + "</bs:uuid>
			|</vd:sourceStockEntry>";
		КонецЦикла;
		Если Док.ОперацияПрисоединения=0 Тогда
			Запрос=Запрос+"
			|<vd:resultStockEntry>
        	|<vd:batch>
        	|<vd:subProduct>
//        	|<bs:uuid>a3cecd19-98ca-46f9-ecd5-90c41fd95e13</bs:uuid>
        	|<bs:guid>"+ СокрЛП(Док.ВСД_ПродукцияЭлемент.ВидПродукции.GUID) +"</bs:guid>
        	|</vd:subProduct>";
			Запрос = Запрос + "
        	|<vd:productItem>";
			Если ПустоеЗначение(Док.ВСД_ПродукцияЭлемент.guid) = 0 Тогда
				Запрос = Запрос + "
        		|<bs:guid>" + СокрЛП(Док.ВСД_ПродукцияЭлемент.guid) + "</bs:guid>";
			КонецЕсли;
			Если ПустоеЗначение(Док.ВСД_ПродукцияЭлемент.GTIN) = 0 Тогда
				Запрос = Запрос + "
        		|<dt:globalID>" + СокрЛП(Док.ВСД_ПродукцияЭлемент.GTIN) + "</dt:globalID>";
			КонецЕсли;
			Запрос = Запрос + "
        	|<dt:name>" + ЗаменитьСпецСимволы(Док.ВСД_ПродукцияЭлемент.Наименование) + "</dt:name>";
			Если ПустоеЗначение(Док.ВСД_ПродукцияЭлемент.Артикул) = 0 Тогда
				Запрос = Запрос + "
        		|<dt:code>" + СокрЛП(Док.ВСД_ПродукцияЭлемент.Артикул) + "</dt:code>";
			КонецЕсли;
        	Запрос = Запрос + "
        	|</vd:productItem>";
			Запрос=Запрос+"
        	|</vd:batch>
        	|</vd:resultStockEntry>";
		КонецЕсли;
		Запрос=Запрос+"
		|</merc:mergeOperation>
		|</merc:mergeStockEntriesRequest>
		|</apl:data>
		|</apl:application>
		|</apldef:submitApplicationRequest>
		|</SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";

	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД2_ОбъединениеПартий(док) Экспорт

	t1 = ГМ.Старт();
	
	Если ПроверитьВСД2_ОбъединениеПартий(док) = 0 Тогда
		Возврат 0;
	КонецЕсли;

//	Организация = док.Организация;//док.ДокументОснование.Организация;
//	Инициализация();

	ГМ.СписокКонстант.Установить("Отправитель_Площадка",док.Владелец_Площадка);

	ЗапросXML = ВСД2_ОбъединениеПартий_ЗапросXML(док);

	appID = ОтправитьЗапрос2( док, ЗапросXML );
	
	ГМ.Финиш(t1, Сам(), "Отправить_ВСД2_ОбъединениеПартий", док);
	
	Возврат appID;
КонецФункции

//}*************** Объединение Партий v2 Окончание

//{*************** ХС **************************

Функция ЗагрузитьХС(GUID) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьХС(guid);
	КонецЕсли;
	//}

	Если ПустоеЗначение(GUID)=1 Тогда
		Сообщить("Пустой GUID для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
	|<soapenv:Header/>
	|<soapenv:Body>
	| <ws:getBusinessEntityByGuidRequest>
	|<bs:guid>"+GUID+"</bs:guid>
	| </ws:getBusinessEntityByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";


	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/EnterpriseService";
	метод.Action = "GetBusinessEntityByGUID";

	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(GUID)+" ]");

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
КонецФункции

Функция Загрузить_ХС_по_ИНН(ИНН) Экспорт
	
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Загрузить_ХС_по_ИНН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Загрузить_ХС_по_ИНН(инн);
	КонецЕсли;
	//}

	Если ПустоеЗначение(ИНН)=1 Тогда
		Сообщить("Пустой ИНН для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;
	ЗапросXML = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|		  xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|		  xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|      <ws:getBusinessEntityListRequest>
	|         <dt:businessEntity>
	|            <dt:inn>"+ СокрЛП(инн) +"</dt:inn>
	|         </dt:businessEntity>
	|      </ws:getBusinessEntityListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";
	
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/EnterpriseService";
	метод.Action = "GetBusinessEntityList";

	Сообщить(" Запрос GetBusinessEntityList [ "+СокрЛП(ИНН)+" ]");

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
	
КонецФункции

//}

//*************** Заполнение документов **********************

Функция ЗаполнитьВСД2_Транзакция_Корректировочный( КонтДокумента, ДокОснование ) Экспорт
	
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьВСД2_Транзакция_Корректировочный");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьВСД2_Транзакция_Корректировочный( КонтДокумента, ДокОснование );
	КонецЕсли;
	//}	
	
	КонтДокумента.Отправитель_ХозСубъект = ДокОснование.Отправитель_ХозСубъект;
	КонтДокумента.Отправитель_Площадка = ДокОснование.Отправитель_Площадка ;	
	КонтДокумента.Получатель_ХозСубъект = ДокОснование.Получатель_ХозСубъект;
	КонтДокумента.Получатель_Площадка = ДокОснование.Получатель_Площадка;
	КонтДокумента.cargoInspected = ДокОснование.cargoInspected;
	КонтДокумента.РезультатыИсследований = ДокОснование.РезультатыИсследований;
	КонтДокумента.Местность = ДокОснование.Местность;
	
	Попытка КонтДокумента.Автор = ГМ.ПолучитьАвтора(); Исключение КонецПопытки;
	
	ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(ДокОснование);
	ФирмаИмяРеквизита = "";
	ГМ.ПолучитьИмяРеквизитаФирма(КонтДокумента.Вид(), ФирмаИмяРеквизита);
	Если ФирмаИмяРеквизита <> "" Тогда
		КонтДокумента.УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);
	КонецЕсли;	
	
	
	тзВСД = СоздатьОбъект("ТаблицаЗначений");
	тзВСД = ГМ.Выбрать_ВСД( ДокОснование );
	
	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку() = 1 Цикл
		Если тзВСД.Док.СтатусВСД = Перечисление.ВСД_СтатусВСД.WITHDRAWN Тогда 
			КонтДокумента.НоваяСтрока();
			//КонтДокумента.Партия = тзВСД.Док.Партия;
			КонтДокумента.Количество = тзВСД.Док.Количество; 
			КонтДокумента.СвязанныйДокументВСД = тзВСД.Док;
			
			ГМ.ЗаполнитьСтрокуДокумента( КонтДокумента, тзВСД.Док, тзВСД.Док );		
		КонецЕсли;
	КонецЦикла;
	
	КонтДокумента.ТермическоеСостояние = ГМ.УстановитьТермическоеСостояние( КонтДокумента );
	
	КонтДокумента.номерАвто = ДокОснование.номерАвто;
	Попытка		
		КонтДокумента.ТтнСерия = ДокОснование.ТтнСерия;
		КонтДокумента.ТтнНомер = ДокОснование.ТтнНомер;
		КонтДокумента.ТтнДата = ДокОснование.ТтнДата;
	Исключение 	КонецПопытки;
	
	Попытка
		КонтДокумента.НомерЗаказаПокупателя = ДокОснование.НомерЗаказаПокупателя;
		КонтДокумента.ДатаЗаказаПокупателя = ДокОснование.ДатаЗаказаПокупателя;
	Исключение 	КонецПопытки;
	
	Попытка
		КонтДокумента.ТОРГ12Номер = ДокОснование.ТОРГ12Номер;
		КонтДокумента.ТОРГ12Дата = ДокОснование.ТОРГ12Дата;
	Исключение 	КонецПопытки;
	
КонецФункции

Функция ЗаполнитьВСД2_Транзакция( КонтДокумента, ДокОснование, тзТабличнаяЧасть="", ЗаполнитьПартии=0) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьВСД2_Транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьВСД2_Транзакция( КонтДокумента, ДокОснование, тзТабличнаяЧасть, ЗаполнитьПартии);
	КонецЕсли;
	//}
	
	КонтДокумента.ДокОснование = ДокОснование;
	
	// стандартное создание ВСД
	Если ПустоеЗначение(ДокОснование)=0 Тогда	
		Если ДокОснование.Вид() = "ВСД2_Транзакция" Тогда
			// корректировочный ВСД2_Транзакцичя на основании аннулированного ВСД2_Транзакция
			
			ЗаполнитьВСД2_Транзакция_Корректировочный(КонтДокумента, ДокОснование);
			Возврат "";
			
		Иначе
				
			Если ГМ._ВводНаОсновании( КонтДокумента, ДокОснование) = 0 Тогда
			    //Возврат "";
			КонецЕсли;
			
			ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(ДокОснование);
		КонецЕсли;
	Иначе 
		ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(КонтДокумента);
	КонецЕсли;

	Если ПустоеЗначение(КонтДокумента.Отправитель_Площадка)=1 Тогда
		Сообщить("Не указан Отправитель_Площадка!","!!");
	КонецЕсли;
	Если ПустоеЗначение(КонтДокумента.Отправитель_ХозСубъект)=1 Тогда
		Сообщить("Не указан Отправитель_ХозСубъект!","!!");
	КонецЕсли;
	

	
	Попытка КонтДокумента.Автор = ГМ.ПолучитьАвтора(); Исключение КонецПопытки;
	
	ФирмаИмяРеквизита = "";
	ГМ.ПолучитьИмяРеквизитаФирма(КонтДокумента.Вид(), ФирмаИмяРеквизита);
	Если ФирмаИмяРеквизита <> "" Тогда
		КонтДокумента.УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);
	КонецЕсли;	
	
	Если ПустоеЗначение(ДокОснование)=0 Тогда 
		КонтДокумента.ДатаДок = ДокОснование.ДатаДок;			
		КонтДокумента.ТтнСерия = "";
		КонтДокумента.ТтнНомер = ДокОснование.НомерДок; 
		КонтДокумента.ТтнДата = ДокОснование.ДатаДок;
		КонтДокумента.номерАвто = ГМ.ПолучитьНомерАвто( ДокОснование );
	Иначе
		КонтДокумента.ДатаДок = ТекущаяДата();			
		КонтДокумента.ТтнСерия = "";
		КонтДокумента.ТтнНомер = КонтДокумента.НомерДок; 
		КонтДокумента.ТтнДата = КонтДокумента.ДатаДок;
		КонтДокумента.номерАвто = "Не используется";
	КонецЕсли;
	
	КонтДокумента.cargoInspected  = 1;		
	КонтДокумента.Местность 		= ГМ.ПолучитьКонстанту("ВСД_Местность");
	Если ГМ.ПолучитьКонстанту("ОсобыеОтметкиЗагружатьИзПараметров")<>1 Тогда 
		КонтДокумента.ОсобыеОтметки 	= ГМ.ПолучитьКонстанту("ВСД_ОсобыеОтметки");
	КонецЕсли;
	
	Если ПустоеЗначение(тзТабличнаяЧасть)=1 Тогда
		тчДокумента = ГМ.ЗаполнитьТчДокументаПоАктуальнымПартиям( ДокОснование, КонтДокумента.Отправитель_Площадка, КонтДокумента.Отправитель_ХозСубъект);
		КонтДокумента.ЗагрузитьТабличнуюЧасть(тчДокумента);
	Иначе
		тзПартий = тзТабличнаяЧасть;
		
		тзПартий.ВыбратьСтроки();
		Пока тзПартий.ПолучитьСтроку() = 1 Цикл
			КонтДокумента.НоваяСтрока();
			КонтДокумента.Партия = тзПартий.Партия;
			КонтДокумента.Количество = тзПартий.Количество; 
			
			Попытка КонтДокумента.ПолеСортировки = тзПартий.ДатаИзготовления;  Исключение КонецПопытки;   //!! для выбора партии По Дате Изготовления
			
			ГМ.ЗаполнитьСтрокуДокумента( КонтДокумента, тзПартий, ДокОснование );		
		КонецЦикла;		
		
		//Для внутренних перемещений - перезаполняем партии По другому ХС/Площадке
		Если ЗаполнитьПартии=1 Тогда 
			тчДокумента = ГМ.ЗаполнитьТчДокументаПоАктуальнымПартиям( КонтДокумента, КонтДокумента.Отправитель_Площадка, КонтДокумента.Отправитель_ХозСубъект);
			КонтДокумента.ЗагрузитьТабличнуюЧасть(тчДокумента);
		КонецЕсли;
	КонецЕсли;

	КонтДокумента.ТермическоеСостояние = ГМ.УстановитьТермическоеСостояние( КонтДокумента );
	
	Попытка
		СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"ТТН");
		КонтДокумента.ТтнСерия = СзРеквДокумента.Получить("ДокСерия");
		КонтДокумента.ТтнНомер = СзРеквДокумента.Получить("ДокНомер");
		КонтДокумента.ТтнДата = СзРеквДокумента.Получить("ДокДата");
	Исключение 	КонецПопытки;
	
	Попытка
		СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"Заказ");  
		КонтДокумента.НомерЗаказаПокупателя = СзРеквДокумента.Получить("ДокНомер");
		КонтДокумента.ДатаЗаказаПокупателя = СзРеквДокумента.Получить("ДокДата");
	Исключение 	КонецПопытки;
	
	Попытка
		СзРеквДокумента = ГМ.ПолучитьСвязанныйДокумент(ДокОснование,"ТОРГ12");  
		КонтДокумента.ТОРГ12Номер = СзРеквДокумента.Получить("ДокНомер");
		КонтДокумента.ТОРГ12Дата = СзРеквДокумента.Получить("ДокДата");
	Исключение 	КонецПопытки;

	Попытка
		Если ПустоеЗначение(ГМ.ПолучитьКонстанту("ПарамВидСвязанногоДокумента")) = 0 Тогда
			КонтДокумента.ВидСвязанногоДокумента = ГМ.ПолучитьКонстанту("ПарамВидСвязанногоДокумента"); 
			КонтДокумента.НомерСвязанногоДокумента = ГМ.ПолучитьКонстанту("ПарамНомерСвязанногоДокумента");
			КонтДокумента.ДатаСвязанногоДокумента = ГМ.ПолучитьКонстанту("ПарамДатаСвязанногоДокумента");
		КонецЕсли;
	Исключение 	КонецПопытки;
	
    ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьВСД2_Транзакция_После");
    Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
           Возврат ОбъектВыполнения.ЗаполнитьВСД2_Транзакция_После(КонтДокумента, ДокОснование, тзТабличнаяЧасть, ЗаполнитьПартии);
    КонецЕсли;	
КонецФункции

// { Площадки v2.1

Функция Площадка_ЗагрузитьПоGUID( ВыбПлощадка, GUID, ХС="") Экспорт

	Если ПустоеЗначение(GUID)=1 Тогда
		Сообщить("Пустой GUID для поиска Площадки");
		Возврат "REJECTED";
	КонецЕсли;
	
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' >
	|<soapenv:Header/>
	|<soapenv:Body>
	| <ws:getEnterpriseByGuidRequest>
	|<bs:guid>"+GUID+"</bs:guid>
	| </ws:getEnterpriseByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";


	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/EnterpriseService";
	метод.Action = "GetEnterpriseByGUID";

	Сообщить(" Запрос GetEnterpriseByGUID [ "+СокрЛП(GUID)+" ]");

	Результат = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	//Возврат appID;
	
    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename );

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

	СпрОбъект = СоздатьОбъект("Справочник.ВСД_Площадка");
	СпрОбъект.НайтиЭлемент( ВыбПлощадка );

	НачатьТранзакцию();
	Попытка
		
		enterprise = objDom.selectSingleNode("//dt:enterprise") ;
		
		active = enterprise.selectSingleNode("bs:active").text;
		Если Врег(active)="TRUE" Тогда  
			СпрОбъект.active =1;
			СпрОбъект.СнятьПометкуУдаления();
		Иначе 
			СпрОбъект.active =0;
			СпрОбъект.Удалить(0);
		КонецЕсли;
	    СпрОбъект.Адрес = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:addressView").text;
	    Попытка 
			СтранаGUID = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:country").selectSingleNode("bs:guid").text;
			СтранаName = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:country").selectSingleNode("dt:name").text;
			СпрОбъект.Страна = ГМ.НайтиСтрануПоGUID( СтранаGUID, СтранаName );
		Исключение
		КонецПопытки;
	    Попытка 
			regionGUID = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:region").selectSingleNode("bs:guid").text;
			regionName = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:region").selectSingleNode("dt:name").text;
			СпрОбъект.Регион = ГМ.Справочник_НайтиПоGUID( "ВСД_Регион", regionGUID, regionName, СпрОбъект.Страна );
		Исключение
		КонецПопытки;
	    Попытка 
			districtGUID = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:district").selectSingleNode("bs:guid").text;
			districtName = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:district").selectSingleNode("dt:name").text;
			СпрОбъект.Район = ГМ.Справочник_НайтиПоGUID( "ВСД_Район", districtGUID, districtName, СпрОбъект.Регион );
		Исключение
		КонецПопытки;
	    Попытка 
			localityGUID = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:locality").selectSingleNode("bs:guid").text;
			localityName = "";
			СпрОбъект.Город = ГМ.Справочник_НайтиПоGUID( "ВСД_Город", localityGUID, localityName, СпрОбъект.Регион );
		Исключение
		КонецПопытки;
	    Попытка 
			streetGUID = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:street").selectSingleNode("bs:guid").text;
			streetName = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:street").selectSingleNode("dt:name").text;
			СпрОбъект.Улица = ГМ.Справочник_НайтиПоGUID( "ВСД_Улица", streetGUID, streetName, СпрОбъект.Город );
		Исключение
		КонецПопытки;
	    Попытка 
			СпрОбъект.Дом = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:house").text;
		Исключение
		КонецПопытки;
	    Попытка 
			СпрОбъект.Строение = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:building").text;
		Исключение
		КонецПопытки;
	    Попытка 
			СпрОбъект.Помещение = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:room").text;
		Исключение
		КонецПопытки;

	    Попытка 
			registryStatus = enterprise.selectSingleNode("dt:registryStatus").text;
			СпрОбъект.Статус = Перечисление.ВСД_СтатусПлощадки.ЗначениеПоИдентификатору( registryStatus );			
		Исключение
			ГМ.СообщитьИнфо(ОписаниеОшибки());
		КонецПопытки;
		
		СпрОбъект.Наименование = enterprise.selectSingleNode("dt:name").text;
		СпрОбъект.GUID = enterprise.selectSingleNode("bs:guid").text;
		СпрОбъект.UUID = enterprise.selectSingleNode("bs:uuid").text;
	
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
		
		Если ПустоеЗначение(ХС)=0 Тогда			
			СпрОбъект.GUIDХозСубъекта = ХС.GUID;			
		Иначе						
			Если ПустоеЗначение(ХС)=0 Тогда			
				Сообщить("Не выбран ХозСубъект "+ СпрОбъект+" "+ СпрОбъект.Наименование +" "+СпрОбъект.Адрес );
				//Сообщить("ХозСубъект не записан","!");			
			КонецЕсли;
		КонецЕсли;
		Сообщить("Записан "+СпрОбъект.Вид()+" ["+СпрОбъект+"] GUID = "+ СпрОбъект.Guid+" Адрес: "+СпрОбъект.Адрес);					
		СпрОбъект.Записать();
		Результат = СпрОбъект.ТекущийЭлемент();
		ЗафиксироватьТранзакцию();		
		
	Исключение
		Сообщить("Площадка не найдена "+GUID,"!");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//======================================================================
//Поиск площадки по GUID(площадки) и GUID(GuidХозСубъекта)
 //[+]serpent, 13.09.2023
Функция sНайтиПлощадкуПоРеквизитам(GUID_Пл, GUID_Хс)
    ТЗ_сДанными = СоздатьОбъект("ТаблицаЗначений");
	Если ГМ.ЭтоSQL=1 Тогда

		ТекстЗапроса = "
	    |SELECT
	    |    ТекСпр.ID [id $Справочник.ВСД_Площадка]
	    |FROM
	    |    $Справочник.ВСД_Площадка ТекСпр WITH (NOLOCK)
	    |WHERE
	    |    $ТекСпр.GUID = :GUID_Пл AND $ТекСпр.GuidХозСубъекта = :GUID_Хс
	    |";

		ГМ.RS.УстановитьТекстовыйПараметр("GUID_Пл", GUID_Пл);
		ГМ.RS.УстановитьТекстовыйПараметр("GUID_Хс", GUID_Хс);
		
		Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			ГМ.RS.Отладка(1);
		КонецЕсли;
		тз = ГМ.RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		Запрос = ГМ.базаДанных.НовыйЗапрос();

		ТекстЗапроса = "
	    |SELECT
	    |    ТекСпр.ID [id $Справочник.ВСД_Площадка]
	    |FROM
	    |    [Справочник.ВСД_Площадка] as ТекСпр
	    |WHERE
	    |    ТекСпр.GUID = :GUID_Пл AND ТекСпр.GuidХозСубъекта = :GUID_Хс
		|";

		Запрос.Подставлять("GUID_Пл", GUID_Пл);
		Запрос.Подставлять("GUID_Хс", GUID_Хс);
		Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			Запрос.Отладка(1);
		КонецЕсли;
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	тз.ВыбратьСтроки();
	Если тз.ПолучитьСтроку() = 1 Тогда 
		ТекЗн = тз.ID
	Иначе
		//ТекЗн = ПолучитьПустоеЗначение("Справочник.ВСД_Площадка")
		СпрОбъект = СоздатьОбъект("Справочник.ВСД_Площадка");
		СпрОбъект.Новый();
		СпрОбъект.GUID=GUID_Пл;
		СпрОбъект.GuidХозСубъекта=GUID_Хс;
		СпрОбъект.Записать();
		ТекЗн = СпрОбъект;		
	КонецЕсли;
	
    Возврат ТекЗн;    
КонецФункции // sНайтиПлощадкуПоРеквизитам

Функция ПолучитьПлощадкиПоХозсубъекту(ХС) Экспорт
	
	Если ПустоеЗначение(ХС.GUID)=1 Тогда
		ГМ.ХС_ПолучитьGuid(ХС);

		//{обновим ссылку на объект
		Спр_ХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Спр_ХС.НайтиЭлемент(ХС);
		ХС = Спр_ХС.ТекущийЭлемент();
		//}
	КонецЕсли;

	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|                  xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|                  xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getActivityLocationListRequest>
	|         <bs:listOptions>
	|            <bs:count>1000</bs:count>
	|            <bs:offset>0</bs:offset>
	|         </bs:listOptions>
	|         <dt:businessEntity>
	|            <bs:guid>" +СокрЛП(ХС.guid)+ "</bs:guid>
	|         </dt:businessEntity>
	|      </ws:getActivityLocationListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>";
	
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "/platform/services/2.1/EnterpriseService";
	метод.Action = "getActivityLocationListRequest";
	
	Сообщить(" Запрос getActivityLocationListRequest [ "+СокрЛП(ХС.guid)+" ]");

	Результат = ГМ.ОтправитьЗапросSoap(Запрос, метод);
	
	objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename);
	
	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Состояние("Загрузка Площадок По "+ХС);	
		
	activityLocationList = objDom.selectNodes("//dt:location") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);
		enterprise = activityLocation.selectSingleNode("dt:enterprise");
		guid = enterprise.selectSingleNode("bs:guid").text;
		name = enterprise.selectSingleNode("dt:name").text;
		
		ВыбОбъект = sНайтиПлощадкуПоРеквизитам(СокрЛП(guid),СокрЛП(ХС.guid) ); //[+]serpent, 13.09.2023
		Площадка_ЗагрузитьПоGUID(ВыбОбъект, guid, ХС);			
	КонецЦикла;

	Сообщить("Загрузка площадок завершена","i");
	
КонецФункции

Функция ЗагрузитьПлощадку(GUID) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадку");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадку(guid);
	КонецЕсли;
	//}

	Если ПустоеЗначение(GUID)=1 Тогда
		Сообщить("Пустой GUID для поиска Площадки");
		Возврат "REJECTED";
	КонецЕсли;
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' >
	|<soapenv:Header/>
	|<soapenv:Body>
	| <ws:getEnterpriseByGuidRequest>
	|<bs:guid>"+GUID+"</bs:guid>
	| </ws:getEnterpriseByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";


	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.1/EnterpriseService";
	метод.Action = "GetEnterpriseByGUID";

	Сообщить(" Запрос GetEnterpriseByGUID [ "+СокрЛП(GUID)+" ]");

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;

КонецФункции

Функция НайтиПлощадку(Guid, Обновить=1) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=1 Тогда
		ГМ.СообщитьИнфо("Пустой GUID Площадки");
		Возврат Ответ;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
		Ответ = Спр.ТекущийЭлемент();
		//Если Спр.ПометкаУдаления() = 1 Тогда
		//	Спр.СнятьПометкуУдаления();    
		//КонецЕсли;
	Иначе
		Сообщить("Площадка GUID ["+guid+"] не найдена: ","!");
		Спр.Новый();
		Спр.guid = guid;
		Спр.Записать();
		
		Ответ = Спр.ТекущийЭлемент();
		
		//заполним площадку
		Если Обновить=1 Тогда 
			Ответ = Площадка_ЗагрузитьПоGUID(Спр, guid);
		КонецЕсли;

	КонецЕсли;

	Если ПустоеЗначение(Ответ)=1 Тогда
		ГМ.СообщитьИнфо("ВСД_Площадка не найдена ["+Guid+"]","!");
	КонецЕсли;

	Возврат Ответ;
КонецФункции
// }

//{ Адреса
// http://help.vetrf.ru/wiki/%D0%9F%D0%BE%D0%B4%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B_%D1%81%D0%BE_%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA%D0%B0%D0%BC%D0%B8_%D0%B8_%D1%80%D0%B5%D0%B5%D1%81%D1%82%D1%80%D0%B0%D0%BC%D0%B8_%D0%B2_%D0%92%D0%B5%D1%82%D0%B8%D1%81.API

Функция ЗагрузитьСтраны_ЗапросXML( )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getAllCountryListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|    </ws:getAllCountryListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьСтраны() Экспорт

	//стандартное поведение функции
	Сообщить(" Запрос GetAllCountryList ","i");

	ЗапросXML = ЗагрузитьСтраны_ЗапросXML();
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/IkarService";
    метод.Action = "GetAllCountryList";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: " + ГМ.Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename );

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	ГМ.ПометитьНаУдалениеСправочник("ВСД_Страна");

	Спр = СоздатьОбъект("Справочник.ВСД_Страна");
    countryList = objDom.selectNodes("//dt:country") ;
    Для i1 = 0 По countryList.length - 1 Цикл
        country=countryList.item(i1);

		uuid = country.selectSingleNode("bs:uuid").text;
		guid = country.selectSingleNode("bs:guid").text;
		st = country.selectSingleNode("bs:status").text;
		name = country.selectSingleNode("dt:name").text;
		//fullname = country.selectSingleNode("ikar:fullName").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("Новый ВСД_Страна ["+name+"] ","i");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
    КонецЦикла;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Сообщить("Загрузка стран завершена");
КонецФункции

Функция ЗагрузитьРегионы_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getRegionListByCountryRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:countryGuid>"+ guid +"</ikar:countryGuid>
	|    </ws:getRegionListByCountryRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРегионы(Страна) Экспорт //проверить реквизит страна ... как о

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьРегионы");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьРегионы(Страна);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]","i");

	ЗапросXML = ЗагрузитьРегионы_ЗапросXML( Страна.GUID );
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/IkarService";
    метод.Action = "RegionListByCountry";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);


	Сообщить("Загрузка XML-файла: " + ГМ.Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename );

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Регион");
    regionList = objDom.selectNodes("//dt:region") ;
    Для i1 = 0 По regionList.length - 1 Цикл
        region=regionList.item(i1);

		uuid = region.selectSingleNode("bs:uuid").text;
		guid = region.selectSingleNode("bs:guid").text;
		st = region.selectSingleNode("bs:status").text;
		name = region.selectSingleNode("dt:name").text;
		view = region.selectSingleNode("dt:view").text;

		ГМ.Справочник_НайтиПоGUID( "ВСД_Регион", guid, view, Страна );
		
    КонецЦикла;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Сообщить("Загрузка завершена");
КонецФункции

Функция ЗагрузитьРайоны_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getDistrictListByRegionRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:regionGuid>"+ guid +"</ikar:regionGuid>
	|    </ws:getDistrictListByRegionRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРайоны(Регион) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьРайоны");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьРайоны(Регион);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Регион.GUID)=1 Тогда
		Сообщить("Пустое значение Регион.GUID");
	КонецЕсли;

	Сообщить(" Запрос GetDistrictListByRegion ["+СокрЛП(Регион.GUID) +"]","i");

	ЗапросXML = ЗагрузитьРайоны_ЗапросXML( Регион.GUID );
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/IkarService";
    метод.Action = "GetDistrictListByRegion";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: " + ГМ.Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Район");
    districtList = objDom.selectNodes("//dt:district") ;
    Для i1 = 0 По districtList.length - 1 Цикл
        district=districtList.item(i1);

		uuid = district.selectSingleNode("bs:uuid").text;
		guid = district.selectSingleNode("bs:guid").text;
		st = district.selectSingleNode("bs:status").text;
		name = district.selectSingleNode("dt:name").text;
		view = district.selectSingleNode("dt:view").text;

		ГМ.Справочник_НайтиПоGUID( "ВСД_Район", guid, view, Регион );
	КонецЦикла;
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Сообщить("Загрузка завершена");
КонецФункции

Функция ЗагрузитьГорода_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getLocalityListByRegionRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:regionGuid>"+ guid +"</ikar:regionGuid>
	|    </ws:getLocalityListByRegionRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьГорода(Регион) Экспорт

	Сообщить(" Запрос getLocalityListByRegion "+Регион+" ["+СокрЛП(Регион.GUID) +"]","i");

	ЗапросXML = ЗагрузитьГорода_ЗапросXML( Регион.GUID );
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/IkarService";
    метод.Action = "GetLocalityListByRegion";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: " + ГМ.Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Город");
    List = objDom.selectNodes("//dt:locality") ;
    Для i1 = 0 По List.length - 1 Цикл
        item=List.item(i1);

		uuid = item.selectSingleNode("bs:uuid").text;
		guid = item.selectSingleNode("bs:guid").text;
		st = item.selectSingleNode("bs:status").text;
		name = item.selectSingleNode("dt:name").text;
		view = item.selectSingleNode("dt:view").text;

		ГМ.Справочник_НайтиПоGUID( "ВСД_Город", guid, name, Регион );
	КонецЦикла;
	
	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Сообщить("Загрузка завершена");
КонецФункции

Функция ЗагрузитьНаселенныеПунктыПоРайону_ЗапросXML( guid )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getLocalityListByDistrictRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	|        <base:offset>0</base:offset>
	|      </base:listOptions>
	|      <ikar:districtGuid>"+ guid +"</ikar:districtGuid>
	|    </ws:getLocalityListByDistrictRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьНаселенныеПунктыПоРайону(Район) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИнициализацияХС_ЗагрузитьРайоны");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИнициализацияХС_ЗагрузитьНаселенныеПунктыПоРайону(Район);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(Район.GUID)=1 Тогда
		Сообщить("Пустое значение Регион.GUID");
	КонецЕсли;

	Сообщить(" Запрос getLocalityListByDistrictRequest ["+СокрЛП(Район.GUID) +"]","i");

	ЗапросXML = ЗагрузитьНаселенныеПунктыПоРайону_ЗапросXML( Район.GUID );
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/IkarService";
    метод.Action = "getLocalityListByDistrict";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: " + ГМ.Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Город");
    localityList = objDom.selectNodes("//dt:locality") ;
    Для i1 = 0 По localityList.length - 1 Цикл
        locality=localityList.item(i1);

		uuid = locality.selectSingleNode("bs:uuid").text;
		guid = locality.selectSingleNode("bs:guid").text;
		st = locality.selectSingleNode("bs:status").text;
		name = locality.selectSingleNode("dt:name").text;
		view = locality.selectSingleNode("dt:view").text;

		ГМ.Справочник_НайтиПоGUID( "ВСД_Город", guid, name, Район );

    КонецЦикла;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Сообщить("Загрузка завершена");
КонецФункции

Функция Список_Улиц_ЗапросXML( Город, Смещение )

	Запрос = "<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:getStreetListByLocalityRequest>
	|         <base:listOptions>
	|            <base:count>1000</base:count>
	|            <base:offset>"+Смещение+"</base:offset>
	|         </base:listOptions>
	|         <ikar:localityGuid>" +СокрЛП(Город.GUID)+ "</ikar:localityGuid>
	|      </ws:getStreetListByLocalityRequest>
	|   </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьУлицы(Город, Смещение=0) Экспорт

	Сообщить(" Запрос getStreetListByLocalityRequest "+Город+" ["+СокрЛП(Город.GUID) +"]","i");
	ЗапросXML = Список_Улиц_ЗапросXML( Город, Смещение );

	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/IkarService";
    метод.Action = "GetStreetListByLocality";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: " + ГМ.Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

	НачатьТранзакцию(); // Ускоримся
	Спр = СоздатьОбъект("Справочник.ВСД_Улица");
    List = objDom.selectNodes("//dt:street") ;
    Для i1 = 0 По List.length - 1 Цикл
        item=List.item(i1);

		uuid = item.selectSingleNode("bs:uuid").text;
		guid = item.selectSingleNode("bs:guid").text;
		st = item.selectSingleNode("bs:status").text;
		name = item.selectSingleNode("dt:name").text;
		view = item.selectSingleNode("dt:view").text;

		ГМ.Справочник_НайтиПоGUID( "ВСД_Улица", guid, view, Город );
		
    КонецЦикла;
	ЗафиксироватьТранзакцию();

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Если List.length=1000 Тогда 
		ИнициализацияХС_ЗагрузитьУлицы(Город, Смещение+List.length );
	КонецЕсли;
	
	Сообщить("Загрузка завершена");
КонецФункции


//} Адреса

//{ Продукция

Функция ЗагрузитьВидыПродукции_ЗапросXML( guid, Смещение=0 )
	
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|				  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|				  xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|				  xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getSubProductByProductListRequest>
	|          <bs:listOptions>
	|            <bs:count>1000</bs:count>
	|            <bs:offset>" + Смещение + "</bs:offset>
	|         </bs:listOptions>
	|         <dt:productGuid>"+ guid +"</dt:productGuid>
	|      </ws:getSubProductByProductListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
	
КонецФункции

Функция ИнициализацияХС_ЗагрузитьВидыПродукции(ВидПродукцииGUID, Владелец, Смещение=0) Экспорт

	Если ПустоеЗначение(Владелец)=1 Тогда
		Сообщить("Не указан владелец "+ВидПродукцииGUID,"!");
		Возврат 0;
	КонецЕсли;

	ЗапросXML = ЗагрузитьВидыПродукции_ЗапросXML( ВидПродукцииGUID, Смещение );
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/ProductService";
    метод.Action = "GetSubProductByProductList";
	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	Сообщить("Загрузка XML-файла: "+ ГМ.Компонента.LogFilename);

	objDom=СоздатьОбъект("MSXML2.DOMDocument");
	objDom.load(ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
	
	Попытка		
		subProductList = objDom.selectSingleNode("//dt:subProductList");		
	Исключение
		//ее всего ошибка при загрузке ответа 
		ГМ.СообщитьОбОшибке("Не удалось загрузить ["+ВидПродукцииGUID+"] "+Владелец+" "+Смещение+ "
		|"+ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	КолвоПолучено = Число(subProductList.getAttribute("count"));
	КолвоВсего = Число(subProductList.getAttribute("total"));
	
	List = objDom.selectNodes("//dt:subProduct");
	//Попытка КолвоПолучено = Число(List.length); Исключение КолвоПолучено = 1; КонецПопытки;	
	Для i1 = 0 По КолвоПолучено - 1 Цикл
	    item = List.item(i1);

		uuid = item.selectSingleNode("bs:uuid").text;
		guid = item.selectSingleNode("bs:guid").text;
		st = item.selectSingleNode("bs:status").text;
		updateDate = item.selectSingleNode("bs:updateDate").text;
		createDate = item.selectSingleNode("bs:createDate").text;
		name = item.selectSingleNode("dt:name").text;
		Попытка
			code = item.selectSingleNode("dt:code").text;
		Исключение
			code ="";
		КонецПопытки;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.КодТНВЭД = code;
		Спр.Владелец = Владелец.ТекущийЭлемент();
		Спр.Записать();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
	КонецЦикла;
	
	Если КолвоПолучено=1000 Тогда 
	//Если КолвоВсего > ( КолвоПолучено + Смещение) Тогда 
		Смещение = Смещение + КолвоПолучено;
		ИнициализацияХС_ЗагрузитьВидыПродукции( ВидПродукцииGUID, Владелец, Смещение);
	КонецЕсли;

	Возврат 1;
	
КонецФункции


Функция ЗагрузитьПродукцию_ЗапросXML(тип)
	
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|				   xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|				   xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|				   xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getProductByTypeListRequest>
	|   	<bs:listOptions>
	|           <bs:count>1000</bs:count>
	|           <bs:offset>0</bs:offset>
	|        </bs:listOptions>
	|        <dt:productType>"+ Тип +"</dt:productType>
	|      </ws:getProductByTypeListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
	
КонецФункции

Функция ИнициализацияХС_ЗагрузитьПродукцию(Тип) Экспорт
	
	Состояние("Загрузить Продукцию "+Тип);
	
	ЗапросXML = ЗагрузитьПродукцию_ЗапросXML(Тип);
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/ProductService";
    метод.Action = "GetProductByTypeList";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);


	Сообщить("Загрузка XML-файла: "+ ГМ.Компонента.LogFilename);

	objDom=СоздатьОбъект("MSXML2.DOMDocument");
	objDom.load(ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Продукция");

	productList = objDom.selectNodes("//dt:product") ;
	Для i1 = 0 По productList.length - 1 Цикл
	    product=productList.item(i1);

		uuid = product.selectSingleNode("bs:uuid").text;
		guid = product.selectSingleNode("bs:guid").text;
		st = product.selectSingleNode("bs:status").text;
		updateDate = product.selectSingleNode("bs:updateDate").text;
		createDate = product.selectSingleNode("bs:createDate").text;
		name = product.selectSingleNode("dt:name").text;
		Попытка
			code = product.selectSingleNode("dt:code").text;
		Исключение
			code ="";
		КонецПопытки;
		productType = product.selectSingleNode("dt:productType").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+name+"] не найдена");
			Спр.Новый();
			//рез = Спр.ТекущийЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.КодТНВЭД = code;
			Спр.Тип = ProductType;
			Спр.Записать();
		КонецЕсли;
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);

		Сообщить("Загрузка [Видов продукции] "+name);
		ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Спр.ТекущийЭлемент());
	КонецЦикла;

	Сообщить("Загрузка завершена");

КонецФункции

//} Продукция

//{ Единицы Измерения

Функция ЗагрузитьXML_ЕдиницыИзмерения(имяФайла) Экспорт

	//стандартное поведение функции
    Сообщить("Загрузка XML-файла: "+ИмяФайла);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(ИмяФайла);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");

    unitList = objDom.selectNodes("//dt:unit") ;
    Для i1 = 0 По unitList.length - 1 Цикл
        unit=unitList.item(i1);

		uuid = unit.selectSingleNode("bs:uuid").text;
		guid = unit.selectSingleNode("bs:guid").text;
		name = unit.selectSingleNode("dt:name").text;
		factor = unit.selectSingleNode("dt:factor").text;
		//commonUnitGuid = unit.selectSingleNode("commonUnitGuid").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+name+"] не найдена");
			Спр.Новый();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Коэффициент = factor;
		Спр.Записать();
		Сообщить("Записан "+Спр.Вид()+" = "+Спр);
	КонецЦикла;

КонецФункции

Функция ЗагрузитьЕдиницыИзмерения_ЗапросXML()
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|      xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getUnitListRequest>
	|         <bs:listOptions>
	|            <bs:count>1000</bs:count>
	|            <bs:offset>0</bs:offset>
	|         </bs:listOptions>
	|      </ws:getUnitListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЕдиницыИзмерения() Экспорт

	//стандартное поведение функции
	Сообщить("Запрос UnitList","i");

	ЗапросXML = ЗагрузитьЕдиницыИзмерения_ЗапросXML();
	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/DictionaryService";
    метод.Action = "GetUnitList";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	НачатьТранзакцию();
	ГМ.ПометитьНаУдалениеСправочник("ВСД_ЕдиницыИзмерения");
	ЗагрузитьXML_ЕдиницыИзмерения( ГМ.Компонента.LogFilename );
	ЗафиксироватьТранзакцию();
	
	Сообщить("Загрузка ВСД_ЕдиницыИзмерения завершена");
КонецФункции

//}
//{ Цели

Функция ИнициализацияХС_ЗагрузитьЦели_ЗапросXML()
	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <ws:getPurposeListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	//|        <base:offset>2</base:offset>
	|      </base:listOptions>
	|    </ws:getPurposeListRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";
	Возврат Запрос;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЦели(  ) Экспорт

	ЗапросXML = ИнициализацияХС_ЗагрузитьЦели_ЗапросXML( );

	метод = ГМ.Компонента.GetMethod();
    метод.Service = "platform/services/2.1/DictionaryService";
    метод.Action = "GetPurposeList";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);


	Сообщить("Загрузка XML-файла: " + ГМ.Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load( ГМ.Компонента.LogFilename);

	Если ГМ.НайтиОшибки()>0 Тогда
		Возврат "";
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ВСД_Цель");
    List = objDom.selectNodes("//dt:purpose") ;
    Для i1 = 0 По List.length - 1 Цикл
        item=List.item(i1);

		uuid = item.selectSingleNode("bs:uuid").text;
		guid = item.selectSingleNode("bs:guid").text;
		//st = item.selectSingleNode("status").text;
		name = item.selectSingleNode("dt:name").text;

		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Спр.СнятьПометкуУдаления();
		Иначе
			Сообщить("Новый ВСД_Цель ["+name+"] ","i");
			Спр.Новый();
		КонецЕсли;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Спр.Записать();
		Сообщить("Записан ВСД_Цель ["+name+"] ","");
    КонецЦикла;

	Сообщить("Загрузка завершена");
	Возврат appID;

КонецФункции

//} Цели 

// *** Классификатор Форм Упаковки
Процедура  ЗаполнитьФормыУпаковки() Экспорт
	
	//http://help.vetrf.ru/wiki/PackingForm
	// Соответствие между старым справочником упаковок и новым классификатором.
    НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
    НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8","Мешок большой");
    НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8","Бочка");
    НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8","Банка, жестяная (консервная)");
    НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8","Коробка, картонная");
    НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8","Мешок бумажный многослойный");
    НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8","Мешок");
    НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8","Мешок из полимерной ткани");
    НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8","Неупакованный или нерасфасованный");
    НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
    НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8","Пакет");
    НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
    НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8","Коробка, пенопластовая");
    НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8","Поддон");
    НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
    НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
    НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
    НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8","Коробка");
    НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
    НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8","Корзина");
    НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8","Цистерна контейнер универсальный");
    НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8","Мешок, бумажный");
    НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8","Коробка, пенопластовая");
    НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8","Контейнер средней грузоподъемности для массовых грузов");
    НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8","Поддон");
    НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8","Крюк");
    НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
    НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660","Упаковка не определена");
    НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660","Коробка, пластмассовая");

    НайтиФормуУпаковки("5ad138ef-2493-4117-bf83-b76e4e5f609d","Ампула, защищенная");
    НайтиФормуУпаковки("1f9a9273-be63-4e4b-b29b-dfee1f0da370","Ампула, незащищенная");
    НайтиФормуУпаковки("975160ee-6cb0-4501-a821-9e3574f09446","Аэрозольная упаковка");
    НайтиФормуУпаковки("ec29a5a8-17fa-480c-a1d5-333a4411e393","Багаж");
    НайтиФормуУпаковки("0f4cc0b5-af48-4571-a06b-96504ec89012","Бадья");
    НайтиФормуУпаковки("93bdc740-0f32-4019-a3fd-ed661f2bc3b9","Бак");
    НайтиФормуУпаковки("bc29f22a-6086-4438-acd2-1f40a3b00a66","Балка");
    НайтиФормуУпаковки("491e8863-7850-4b06-8abc-52c09dd05d0d","Балка в пакете/пачке/связке");
    НайтиФормуУпаковки("6a10e7ae-b8ff-4249-a23d-1dec8128c4a1","Баллон, газовый");
    НайтиФормуУпаковки("0fdf7f98-6595-480b-8988-5544d8ff40b3","Баллон, защищенный");
    НайтиФормуУпаковки("49e8e70e-e539-4ce1-8d20-5a49ae276f77","Баллон, незащищенный");
    НайтиФормуУпаковки("8a9c1190-aeeb-498d-8e80-5ddfbc3f7df2","Бандероль");
    НайтиФормуУпаковки("0cc66f67-3111-4e77-9dcc-c9a9df725bed","Банка (емкостью менее 5 л) жестяная прямоугольная");
    НайтиФормуУпаковки("18a67ab0-21a3-4e8c-9058-d8f42820938d","Банка (емкостью менее 5 л) жестяная с ручкой и выпускным отверстием");
    НайтиФормуУпаковки("54ed0793-c32e-41c1-9321-608c1a224edc","Банка (емкостью менее 5 л) жестяная цилиндрическая");
    НайтиФормуУпаковки("91f360ff-5731-4c1c-bf11-7ea3d6d1a3ca","Банка жестяная для сухих продуктов (массой до 2,2 кг)");
    НайтиФормуУпаковки("c1f40234-bff1-42c8-8e19-d6cad7f00fce","Банка широкогорлая (емкостью около 4,5 литров)");
    НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8","Банка, жестяная (консервная)");
    НайтиФормуУпаковки("13f13e66-adf4-431a-9cff-22cfd839047b","Барабан");
    НайтиФормуУпаковки("2e53354c-4023-434b-926f-bbdd1af00a37","Барабан алюминиевый с несъемным днищем");
    НайтиФормуУпаковки("970e40fd-3436-48ed-ac99-e78802f57119","Барабан алюминиевый со съемным днищем");
    НайтиФормуУпаковки("eec09740-2c4c-460b-94ed-c4d4ef437f1b","Барабан пластмассовый с несъемным днищем");
    НайтиФормуУпаковки("d565dd82-5fc1-4303-a55d-495c35ac22ec","Барабан пластмассовый со съемным днищем");
    НайтиФормуУпаковки("02f1c682-8f53-47f8-b8dc-72404d986e66","Барабан стальной");
    НайтиФормуУпаковки("c113fb0c-23eb-4ce5-ad44-8250598f173e","Барабан стальной с несъемным днищем");
    НайтиФормуУпаковки("1852b14d-39a0-4712-9e55-90a7005d5469","Барабан стальной со съемным днищем");
    НайтиФормуУпаковки("e5f7f98d-6a9c-4866-8cac-4819f71e41b3","Барабан фанерный");
    НайтиФормуУпаковки("6bf25be3-0cf7-4dd8-a383-049a02862968","Барабан фибровый");
    НайтиФормуУпаковки("ed90911b-d130-4d3b-ae0b-2f0754d23fd4","Барабан, алюминиевый");
    НайтиФормуУпаковки("0ef53349-5258-4efc-ac2a-23d1e33f387b","Барабан, деревянный");
    НайтиФормуУпаковки("bbe136bd-0da4-42fd-800a-79435f4dd2c0","Барабан, железный");
    НайтиФормуУпаковки("dd7c7ba0-dbc3-435d-94f7-5b758ca36898","Барабан, пластмассовый");
    НайтиФормуУпаковки("ae0b5e58-8771-48f7-8c3c-11dfdb17ebad","Без клети");
    НайтиФормуУпаковки("34e245a7-cd7c-4d8b-a436-482dcbcf1f38","Бидон");
    НайтиФормуУпаковки("41e9ff79-b6c4-46e7-a2d4-6f5bf3ee1002","Бобина");
    НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8","Бочка");
    НайтиФормуУпаковки("3630beae-fe03-49ff-9264-93925ca7ce80","Бочка (емкостью около 164 л)");
    НайтиФормуУпаковки("5623e14a-903b-48e4-8afa-07db65991173","Бочка (емкостью около 164 л) деревянная");
    НайтиФормуУпаковки("3c78e2e1-d19a-40d3-b970-4fe6d2b722d0","Бочка (емкостью около 164 л) деревянная со съемным днищем");
    НайтиФормуУпаковки("021bc2d9-f514-4491-b21a-ffe63023236f","Бочка (емкостью около 164 л) деревянная шпунтованная");
    НайтиФормуУпаковки("37495e99-e19f-4221-97e8-39565c0192b8","Бочка деревянная (емкостью около 200 л)");
    НайтиФормуУпаковки("c8066a6e-5f19-4429-85e1-9b2df548afa1","Бочка для вина или пива");
    НайтиФормуУпаковки("f1d48fb7-8536-4b99-8668-bd6a55167306","Бочка для вина или пива большая (емкостью около 1146 л) (тан)");
    НайтиФормуУпаковки("6583f8bf-8317-4ba4-bf4b-fafcd1d13bc1","Бочка емкостью 238 л (хогсхед)");
    НайтиФормуУпаковки("8915e7eb-4f39-48aa-8171-7a629c95b69e","Бочонок (емкостью около 41 л)");
    НайтиФормуУпаковки("8fe0727a-b2ed-4040-9df5-a14e4ad7f6a8","Бочонок (емкостью около 46 л)");
    НайтиФормуУпаковки("07f35ce7-6d5a-49e7-a7e2-659b6cf74def","Бревно");
    НайтиФормуУпаковки("0e0ccdf4-8779-4d65-84e2-d9e689314630","Бревно в пакете/пачке/связке");
    НайтиФормуУпаковки("d9afec35-b224-404f-a3ff-74a0496c128d","Брезент");
    НайтиФормуУпаковки("0ed01082-9c8e-49fa-8ba4-a91879d4b192","Брус (брусок)");
    НайтиФормуУпаковки("086a3064-ab16-4d38-a7fa-3a28ee66b58b","Брус (брусок) в пакете/пачке/связке");
    НайтиФормуУпаковки("d2ed24d1-c72a-4dc6-b3a8-ff8ca179c5c4","Бункер");
    НайтиФормуУпаковки("a23634f3-9e71-4c80-abc5-e4c77ac70c88","Бутылка оплетенная");
    НайтиФормуУпаковки("f7183d0a-5cee-4de8-9d08-bd5c7512ea7c","Бутылка с выпуклыми стенками защищенная");
    НайтиФормуУпаковки("883a32f4-984e-43c1-8e03-ad02929cbfe4","Бутылка с выпуклыми стенками незащищенная");
    НайтиФормуУпаковки("9adfe441-f411-4fcc-9568-8274ec2a0697","Бутылка цилиндрическая защищенная");
    НайтиФормуУпаковки("1b986c7e-dcff-452f-b9c5-bc47afa6ccdc","Бутылка цилиндрическая незащищенная");
    НайтиФормуУпаковки("3e311a74-00dd-4554-b656-748aa45cc069","Бутыль оплетенная большая (емкостью от 9 до 54 л) защищенная");
    НайтиФормуУпаковки("b654b00e-7601-408e-b059-783ab0371b35","Бутыль оплетенная большая (емкостью от 9 до 54 л) незащищенная");
    НайтиФормуУпаковки("fc881dea-5868-43ea-8b84-768aad44bc39","Бутыль оплетенная защищенная");
    НайтиФормуУпаковки("f8552b0c-1de2-4509-8de9-06284d01bdff","Бутыль оплетенная незащищенная");
    НайтиФормуУпаковки("87cff419-7bd1-4a2a-b52e-3f6c358138c8","Бухта");
    НайтиФормуУпаковки("04735711-516d-4331-92c6-b55e5f8e3710","В вакуумной упаковке");
    НайтиФормуУпаковки("b49dbb7b-56b9-48e3-9fd3-74a328dbcea3","В термоусадочной пленке");
    НайтиФормуУпаковки("165fd412-0bfa-4bb5-8993-bcfaa5d82e1b","Ведро");
    НайтиФормуУпаковки("657fad4d-71a4-4939-90a4-3fb0c9aea7f7","Гильза");
    НайтиФормуУпаковки("a423d25a-2a14-40b8-bf13-f6a85b8fc887","Гнездо (ячейка)");
    НайтиФормуУпаковки("4a7ea673-c3ac-40b5-836f-cfdd066b8020","Горшок");
    НайтиФормуУпаковки("668e236b-70b0-4afc-8ab3-3fb9335f909e","Грейферный ковш");
    НайтиФормуУпаковки("17f78e53-8978-4b58-9be5-d919c049a239","Гроб");
    НайтиФормуУпаковки("d2612f44-ca2a-4146-986d-6650e6fe9194","Грузовая партия (лот)");
    НайтиФормуУпаковки("af4d4677-3ea7-46ba-9fe0-504ba81ebea7","Дозатор");
    НайтиФормуУпаковки("b8d3ee58-c120-4c4e-bd31-0e1d3451f5de","Доска");
    НайтиФормуУпаковки("c84cb473-a0cc-4433-8b56-c7beb88fc59b","Доска в пакете/пачке/связке");
    НайтиФормуУпаковки("3dca7c38-3a10-4fb6-9c1f-0c64ab79d63b","Доска толстая в пакете/пачке/связке");
    НайтиФормуУпаковки("4d5772a0-9fa4-47ab-8c32-9a07729740ad","Доска, толстая");
    НайтиФормуУпаковки("5e5f4afb-d5f8-483a-999e-cb985af7580b","Единица");
    НайтиФормуУпаковки("207dccd8-7a12-44c3-a77b-7dd945a7b0bd","Кадка");
    НайтиФормуУпаковки("6046383e-9e59-40bc-a70b-a0538ef536ca","Кадка с крышкой");
    НайтиФормуУпаковки("4d9bd778-5ce4-411c-8d78-a1959ac55590","Канистра пластмассовая с несъемным днищем");
    НайтиФормуУпаковки("ba61904f-f946-448a-958b-518655d8f567","Канистра пластмассовая со съемным днищем");
    НайтиФормуУпаковки("a2110164-70b4-49f6-afaa-f3abde1be0f1","Канистра стальная с несъемным днищем");
    НайтиФормуУпаковки("72896fbf-b156-4c7b-868d-ac13c5a85c7e","Канистра стальная со съемным днищем");
    НайтиФормуУпаковки("12829e8e-7983-4745-8d01-5425d0244df6","Канистра, пластмассовая");
    НайтиФормуУпаковки("a17e05ea-2fd6-485f-8db6-5aed1606f851","Канистра, прямоугольная");
    НайтиФормуУпаковки("315646b0-01b2-4728-ab20-39911b080c26","Канистра, стальная");
    НайтиФормуУпаковки("a7eb10cf-5a71-4cd2-97eb-c7369a407ccf","Канистра, цилиндрическая");
    НайтиФормуУпаковки("8bcdee71-cca5-4536-ae2e-8a423d7dab60","Капсула");
    НайтиФормуУпаковки("0f402761-1d53-45dc-9566-d709cd1ccb4d","Кардная лента");
    НайтиФормуУпаковки("8211a6d5-11ea-4a5e-96dd-b52c3fe0a801","Кассета");
    НайтиФормуУпаковки("c7ee807d-56a9-47c5-95d7-72021f303167","Кассета с пленкой (фильмпак)");
    НайтиФормуУпаковки("4b3478b2-bd43-4fe1-85bd-77a457a1cd72","Катушка");
    НайтиФормуУпаковки("31ff0ebc-8b93-4ab4-9e6f-04dcab641eb2","Кипа, неспрессованная");
    НайтиФормуУпаковки("90ae449d-76c3-47a2-a0ec-39febdc0c965","Кипа, спрессованная");
    НайтиФормуУпаковки("6da6c216-abc1-4534-825c-821a41b2dbc2","Клеть");
    НайтиФормуУпаковки("09f4ec10-6101-4c3d-b57a-251aa11e7752","Клеть (многооборотная) Общего фонда транспортировочного оборудования EC");
    НайтиФормуУпаковки("4770cd27-c22b-4da6-bba5-c69dcd601b74","Клеть, роликовая");
    НайтиФормуУпаковки("538f0705-e05d-4154-bfb5-0e63ab30122b","Кольцо");
    НайтиФормуУпаковки("d0416c04-368d-48bf-b5fb-d3fe21f3977c","Комбинированная упаковка: пластмассовый сосуд");
    НайтиФормуУпаковки("858efe47-f7d6-4f6e-9408-79b8e3d9ae83","Комбинированная упаковка: пластмассовый сосуд в барабане алюминиевом");
    НайтиФормуУпаковки("b95eb3b6-d08a-441e-9a3a-6d3f9501cc99","Комбинированная упаковка: пластмассовый сосуд в барабане пластмассовом");
    НайтиФормуУпаковки("6b8efc02-9611-451c-b215-503bc29301cd","Комбинированная упаковка: пластмассовый сосуд в барабане стальном");
    НайтиФормуУпаковки("21246938-dd6f-49aa-8e2a-d1cb13b0be17","Комбинированная упаковка: пластмассовый сосуд в барабане фибровом");
    НайтиФормуУпаковки("05e4976b-9504-44ac-8645-06bf6a24ad59","Комбинированная упаковка: пластмассовый сосуд в деревянной коробке");
    НайтиФормуУпаковки("5e8755cb-a874-499d-bb4d-34e465df0978","Комбинированная упаковка: пластмассовый сосуд в коробке из твердой пластмассы");
    НайтиФормуУпаковки("eb55f088-06cc-4bab-9f84-49f2f999f428","Комбинированная упаковка: пластмассовый сосуд в коробке из фибрового картона");
    НайтиФормуУпаковки("ab579955-759f-4de1-b8b9-460ad80facfb","Комбинированная упаковка: пластмассовый сосуд в коробке фанерной");
    НайтиФормуУпаковки("95307257-321c-4dd1-9a30-e30cbcffcfb1","Комбинированная упаковка: пластмассовый сосуд в ящике решетчатом (или обрешетке) из алюминия");
    НайтиФормуУпаковки("43c6ad00-832f-42c6-8e2a-fe2273814b66","Комбинированная упаковка: пластмассовый сосуд в ящике решетчатом (или обрешетке) из стали");
    НайтиФормуУпаковки("380c561e-749a-4408-88de-ad5399c8a53f","Комбинированная упаковка: стеклянный сосуд");
    НайтиФормуУпаковки("2e460cc7-7c38-4bf4-aa19-7768cb14d234","Комбинированная упаковка: стеклянный сосуд в барабане алюминиевом");
    НайтиФормуУпаковки("fa1d17e8-e12d-4544-9461-db80f49cfe4b","Комбинированная упаковка: стеклянный сосуд в барабане фанерном");
    НайтиФормуУпаковки("40c8a0db-74c9-4190-9449-6f3f8ac2eaa7","Комбинированная упаковка: стеклянный сосуд в барабане фибровом");
    НайтиФормуУпаковки("32936c38-e9fa-439b-8108-5b7e3c482f6c","Комбинированная упаковка: стеклянный сосуд в корзине плетеной с крышкой");
    НайтиФормуУпаковки("4195a944-7c45-44e9-9cf9-d366386ad86e","Комбинированная упаковка: стеклянный сосуд в коробке деревянной");
    НайтиФормуУпаковки("eabbfb7f-b3ea-4858-981a-201a18be8a0a","Комбинированная упаковка: стеклянный сосуд в коробке из фибрового картона");
    НайтиФормуУпаковки("5a349e4c-ce4c-485e-81db-beec4aa09fa4","Комбинированная упаковка: стеклянный сосуд в пакете из твердой пластмассы");
    НайтиФормуУпаковки("ce9f36bf-2f90-424c-b34f-e8715dd15e02","Комбинированная упаковка: стеклянный сосуд в пакете пенопластовом");
    НайтиФормуУпаковки("57eeeadf-7c4b-4614-9731-6e47d4b273a9","Комбинированная упаковка: стеклянный сосуд в стальном барабане");
    НайтиФормуУпаковки("6355c3ee-6d1c-4bc5-a6ff-2a808274f222","Комбинированная упаковка: стеклянный сосуд в ящике решетчатом (или обрешетке) из алюминия");
    НайтиФормуУпаковки("5893d315-48c8-49f7-9dc4-2dde43e090b9","Комбинированная упаковка: стеклянный сосуд в ящике решетчатом (или обрешетке) из стали");
    НайтиФормуУпаковки("b5cd2c76-152f-4d8f-a5c2-d196dd920426","Комплект");
    НайтиФормуУпаковки("3cb38979-51da-44a5-8bdc-8f549bb0aa68","Конверт");
    НайтиФормуУпаковки("dddd429e-0376-4030-bb9e-2ad9cba0f3c4","Конверт, стальной");
    НайтиФормуУпаковки("d90e17f4-8bed-46be-a1d1-9bb7f0f4d736","Консоль для оборудования, помещающаяся в минифургон");
    НайтиФормуУпаковки("5d753d93-c512-4f55-8fc8-0c0f1461d6a0","Контейнер для пищевых продуктов");
    НайтиФормуУпаковки("9ef6b142-22e7-4a1c-bc5f-7945dc5a654f","Контейнер металлический");
    НайтиФормуУпаковки("d273dbfd-c8ed-4637-9ad2-5e40d7ecbf3a","Контейнер наружный");
    НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8","Контейнер средней грузоподъемности для массовых грузов");
    НайтиФормуУпаковки("b86afba4-7492-4910-b266-6ab67235095c","Контейнер средней грузоподъемности для массовых грузов алюминиевый");
    НайтиФормуУпаковки("6505c314-3e58-496e-becc-9ee71c08eacc","Контейнер средней грузоподъемности для массовых грузов алюминиевый герметизированный свыше 10 КПа");
    НайтиФормуУпаковки("caeda84d-f591-4ca8-888f-2b0857d6d66a","Контейнер средней грузоподъемности для массовых грузов бумажный многослойный");
    НайтиФормуУпаковки("566c12fc-5fc1-4189-8fc4-f4ff072c4897","Контейнер средней грузоподъемности для массовых грузов бумажный многослойный влагонепроницаемый");
    НайтиФормуУпаковки("800fc586-864c-4c29-ae15-d0d405e5d82a","Контейнер средней грузоподъемности для массовых грузов герметизированный 10 Кпа");
    НайтиФормуУпаковки("3a762c62-7b9e-4ccc-95e7-50fed26da877","Контейнер средней грузоподъемности для массовых грузов герметизированный свыше 10 КПа");
    НайтиФормуУпаковки("1061b465-9f46-48ba-8939-e4e14afd6270","Контейнер средней грузоподъемности для массовых грузов гибкий");
    НайтиФормуУпаковки("c5f0a52e-2496-45f0-9c5d-0cca7c1643a1","Контейнер средней грузоподъемности для массовых грузов из естественной древесины с внутренним вкладышем");
    НайтиФормуУпаковки("e143c99a-f5c3-4e66-a50b-52a5cabc6325","Контейнер); средней грузоподъемности для массовых грузов из древесного материала");
    НайтиФормуУпаковки("828064d7-80be-4ba4-a13c-7a17476e763e","Контейнер средней грузоподъемности для массовых грузов из древесного материала с внутренним вкладышем");
    НайтиФормуУпаковки("057ea6ec-aab1-4e2c-be58-f976fd3bbb37","Контейнер средней грузоподъемности для массовых грузов из естественной древесины");
    НайтиФормуУпаковки("5cea30bc-bd13-4c2a-af79-90a2e1804b07","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы");
    НайтиФормуУпаковки("e729238b-88ff-4991-a67e-8ec66cded23c","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы автономный герметизированный");
    НайтиФормуУпаковки("2b58bc8f-b007-4ef4-808b-a4eedc9df54c","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы с конструкционным оснащением герметизированный");
    НайтиФормуУпаковки("c159513f-dcf5-4402-ab16-8a1970e7b9d4","Контейнер средней грузоподъемности для массовых грузов из пластикового волокна с покрытием и вкладышем");
    НайтиФормуУпаковки("92765566-620c-4877-a58f-4107c3c6d468","Контейнер средней грузоподъемности для массовых грузов из полимерной пленки");
    НайтиФормуУпаковки("9c415e68-6f34-4e5c-81c2-696e994a77cc","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани без покрытия/вкладыша");
    НайтиФормуУпаковки("fed6b6cb-60b7-4df5-b81e-37b7a2b2a24e","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани с вкладышем");
    НайтиФормуУпаковки("3d3bf9e3-12bb-4f0c-82ab-c79df71fcfdf","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани с покрытием");
    НайтиФормуУпаковки("778afe34-03a9-4255-89ce-78229c9d233c","Контейнер средней грузоподъемности для массовых грузов из прочего металла, кроме стали");
    НайтиФормуУпаковки("5a86d172-8b82-4992-b88c-8b1f80765ff5","Контейнер средней грузоподъемности для массовых грузов из фибрового картона");
    НайтиФормуУпаковки("769f3e00-3bc6-4b59-b201-8972cd649ccc","Контейнер средней грузоподъемности для массовых грузов металлический");
    НайтиФормуУпаковки("fab06db6-977d-48df-8822-fb5ef954434c","Контейнер средней грузоподъемности для массовых грузов составной");
    НайтиФормуУпаковки("a3ee4967-a24f-4815-8f07-9d49ffe1de53","Контейнер средней грузоподъемности для массовых грузов составной из гибкой пластмассы герметизированный");
    НайтиФормуУпаковки("fee9277d-adb9-4af6-aae9-3117412de104","Контейнер средней грузоподъемности для массовых грузов составной из жесткой пластмассы герметизированный");
    НайтиФормуУпаковки("a14e9f47-e745-4fb5-861e-642b8da576d9","Контейнер средней грузоподъемности для массовых грузов стальной");
    НайтиФормуУпаковки("cb247727-4eaf-49dd-85cf-6e2dd7f2a3ab","Контейнер средней грузоподъемности для массовых грузов текстильный без покрытия/вкладыша");
    НайтиФормуУпаковки("5c416509-50d7-464b-9455-9439604c2479","Контейнер средней грузоподъемности для массовых грузов текстильный с вкладышем");
    НайтиФормуУпаковки("111583f5-39e6-4b45-a941-b67d41ef4cae","Контейнер средней грузоподъемности для массовых грузов текстильный с покрытием");
    НайтиФормуУпаковки("0d51ebba-b636-4a01-9a3a-e1f10fcc73df","Контейнер средней грузоподъемности для массовых грузов текстильный с покрытием и вкладышем");
    НайтиФормуУпаковки("6bc17666-63d7-49fd-9a82-fd98ff408dff","Контейнер средней грузоподъемности для массовых грузов фанерный");
    НайтиФормуУпаковки("8015c596-6a81-40bc-bfca-f5961327bca4","Контейнер средней грузоподъемности для массовых грузов фанерный с внутренним вкладышем");
    НайтиФормуУпаковки("a41e2a9a-d9f8-43f7-8781-15da3e5713d8","Контейнер средней грузоподъемности для наливных грузов алюминиевый");
    НайтиФормуУпаковки("4dfaab91-aacd-4a1b-a052-f40f873e6a46","Контейнер средней грузоподъемности для наливных грузов из жесткой пластмассы автономный");
    НайтиФормуУпаковки("5389a88d-8a7d-4fc6-9758-4205df09bd30","Контейнер средней грузоподъемности для наливных грузов из жесткой пластмассы с конструкционным оснащением");
    НайтиФормуУпаковки("ceb9b05c-6a68-4663-ae9a-72c1f38e1ef8","Контейнер средней грузоподъемности для наливных грузов металлический");
    НайтиФормуУпаковки("dd97947e-4e78-41df-a4ef-1f34346db79e","Контейнер средней грузоподъемности для наливных грузов составной из гибкой пластмассы");
    НайтиФормуУпаковки("f9c0a4b5-0576-4aeb-9822-0a85f59b4c7f","Контейнер средней грузоподъемности для наливных грузов составной из жесткой пластмассы");
    НайтиФормуУпаковки("517d28bb-afa9-4a66-87e7-b707121a70fb","Контейнер средней грузоподъемности для наливных грузов стальной");
    НайтиФормуУпаковки("690e086c-89b8-4c17-8838-4478d4c2e4eb","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов из жесткой пластмассы автономный");
    НайтиФормуУпаковки("c979e057-03e8-4dda-8fcd-3dba27e4dfc5","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов из жесткой пластмассы с конструкционным оснащением");
    НайтиФормуУпаковки("9eba63f1-0e89-47a1-b75a-8c0cb099af3d","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов составной из гибкой пластмассы");
    НайтиФормуУпаковки("3850fb20-746c-4001-827c-5825630f7ce7","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов составной из жесткой пластмассы");
    НайтиФормуУпаковки("4258d946-8f37-43ac-90c2-ab29814daaeb","Контейнер, галлон");
    НайтиФормуУпаковки("0239b3d5-ec19-498f-9379-013e4df8c882","Контейнер, гибкий");
    НайтиФормуУпаковки("8f20bf8f-afd5-4e30-9e6b-b664f3973c16","Контейнер, прочее транспортировочное оборудование, кроме поименованного");
    НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8","Корзина");
    НайтиФормуУпаковки("2bbef079-d872-469a-9a38-37101bba2e07","Корзина из шпона для ягод и фруктов");
    НайтиФормуУпаковки("4be2b716-28a4-4d33-8d3e-266ce1e34942","Корзина с крышкой");
    НайтиФормуУпаковки("497050a3-b994-4ba4-badd-8b7fd98426ac","Корзина с ручкой из древесины");
    НайтиФормуУпаковки("02684a03-6f18-43d0-b79d-3ce05d562435","Корзина с ручкой, картонная");
    НайтиФормуУпаковки("ecd94698-e572-4b54-91a8-54bccd9f5644","Корзина с ручкой, пластмассовая");
    НайтиФормуУпаковки("e3c233ff-30d4-4ee1-89ac-c19062f1a09d","Корзина, рыбацкая");
    НайтиФормуУпаковки("2b91c7f0-2705-40a1-a180-64e20626a2a0","Короб деревянный (лифтван) размером около 220 см (длина) x 115 см (ширина) x 220 см (высота)");
    НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8","Коробка");
    НайтиФормуУпаковки("5a5960a3-121e-4da1-8437-130b3cbc55c6","Коробка (многооборотная) из Общего фонда транспортировочного оборудования ЕС, Еврокоробка");
    НайтиФормуУпаковки("ff3bfc50-0b9f-47cc-ada2-ac40a4a18cc0","Коробка деревянная из естественной древесины обыкновенная");
    НайтиФормуУпаковки("fddc5698-8738-460f-b603-f49c7053b473","Коробка деревянная из естественной древесины с плотно пригнанными стенками");
    НайтиФормуУпаковки("77b8f79a-6a69-4b4f-b0b2-a8a9f0f4ca12","Коробка для жидкостей");
    НайтиФормуУпаковки("9f0f9e11-cce0-4484-9a50-bc4fed7ee1e9","Коробка из древесного материала");
    НайтиФормуУпаковки("89f4e420-504e-4b2e-9291-ae483d7e9bdd","Коробка из естественной древесины");
    НайтиФормуУпаковки("8b1ffe26-1485-477f-8d2d-8050397beab2","Коробка из твердой пластмассы");
    НайтиФормуУпаковки("aa308c04-0fe0-4a87-ab8c-7527b3f261f4","Коробка из фибрового картона");
    НайтиФормуУпаковки("56e38905-209b-43cc-ac8f-3657f5ec2bdc","Коробка, алюминиевая");
    НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8","Коробка, картонная");
    НайтиФормуУпаковки("50c21cb9-3e09-4cc7-a30f-c724d248e996","Коробка, пенопластовая");
    НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660","Коробка, пластмассовая");
    НайтиФормуУпаковки("9c0e3d26-e6c5-4b8e-bb47-0a4ecf8867a3","Коробка, стальная");
    НайтиФормуУпаковки("2c76df5b-bdf1-4c36-b136-41240961deb0","Коробка, фанерная");
    НайтиФормуУпаковки("890d2d2d-9ed5-40a5-8d6f-bad8546bfee4","Кофр");
    НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8","Крюк");
    НайтиФормуУпаковки("3ae14a0a-3970-45ef-bd53-f278e217bf4f","Кувшин, большой");
    НайтиФормуУпаковки("548062b8-8f49-4fe2-8e93-d6c5103a9113","Кувшин, маленький");
    НайтиФормуУпаковки("5444b894-aa2b-456f-aa27-e1f470568338","Кулек");
    НайтиФормуУпаковки("62120ab7-da8c-46f5-8d06-8cb3f9376a13","Лента");
    НайтиФормуУпаковки("b9dec3d6-c0d8-4170-8b57-2f79042b9a8d","Лист");
    НайтиФормуУпаковки("b883ff05-483d-4e82-be5f-c1b90d004d1c","Лист в пакете/пачке/связке");
    НайтиФормуУпаковки("a2e60b9e-ee4d-47b5-956b-690bda852392","Лист с пластмассовым покрытием");
    НайтиФормуУпаковки("d6831ad1-3dc9-48d0-8c92-402db32c4031","Лист, металлический");
    НайтиФормуУпаковки("e49e5e21-09f1-4194-b637-655959ce5510","Лист, прокладной");
    НайтиФормуУпаковки("3d72e4ec-f771-4c0d-a9b9-452dd7a08406","Лоток");
    НайтиФормуУпаковки("ea504ad8-c159-449f-a752-1ab2eecc8fe1","Лоток");
    НайтиФормуУпаковки("a5c9db95-0858-401c-a0f8-f1e17f44c156","Лоток с двумя настилами без покрытия деревянный");
    НайтиФормуУпаковки("816aecc8-f89d-4bce-add3-bcea3782ebfa","Лоток с двумя настилами без покрытия картонный");
    НайтиФормуУпаковки("2834ba2d-8030-4b5d-8812-186ff267f89c","Лоток с двумя настилами без покрытия пластмассовый");
    НайтиФормуУпаковки("d5122def-d46e-4989-b845-9ed0754c2a07","Лоток с одним настилом без покрытия деревянный");
    НайтиФормуУпаковки("b6b93b6c-286a-4c49-b646-bef408d4cf8b","Лоток с одним настилом без покрытия картонный");
    НайтиФормуУпаковки("3614ce14-9970-453c-81df-9645c4c5fe2c","Лоток с одним настилом без покрытия пластмассовый");
    НайтиФормуУпаковки("9c27dc4c-875d-4de5-af1f-d6d066e0d88f","Лоток с одним настилом без покрытия полистироловый");
    НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8","Мешок");
    НайтиФормуУпаковки("c8bc51d4-de57-44ee-9492-85360eada3a5","Мешок");
    НайтиФормуУпаковки("803b1dd4-ea8b-464e-9f7e-1bfa573c90bc","Мешок (куль)");
    НайтиФормуУпаковки("a71f0123-63c4-440b-bce8-eb46d7a854e2","Мешок (куль) многослойный");
    НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8","Мешок большой");
    НайтиФормуУпаковки("933312a8-dc11-43ee-9daa-abb240bf9e3f","Мешок большой для крупноразмерных навалочных грузов");
    НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8","Мешок бумажный многослойный");
    НайтиФормуУпаковки("9f15aaba-d9e1-43ea-8cc7-0f0a29ed7be8","Мешок бумажный многослойный влагонепроницаемый");
    НайтиФормуУпаковки("87da1e8c-2d92-4de6-8448-6ab233f3847e","Мешок из мешковины");
    НайтиФормуУпаковки("5080bd27-e2b5-4c27-9cb0-7004109f362f","Мешок из полимерной пленки");
    НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8","Мешок из полимерной ткани");
    НайтиФормуУпаковки("c088e3b0-4d1f-4079-8ce3-eca7486da24f","Мешок из полимерной ткани без внутреннего покрытия/вкладыша");
    НайтиФормуУпаковки("8d2b467f-d19a-49ad-9d4d-9769fc8adb68","Мешок из полимерной ткани влагонепроницаемый");
    НайтиФормуУпаковки("c311b4f0-1f83-47ff-b5eb-085aa296a443","Мешок из полимерной ткани, плотный");
    НайтиФормуУпаковки("f8296670-1b9b-42fa-9e29-76dc5ba0a8c0","Мешок текстильный");
    НайтиФормуУпаковки("e50c3c66-a104-46d2-bf1c-b1fb6f649698","Мешок текстильный без внутреннего покрытия/вкладыша");
    НайтиФормуУпаковки("84b62344-fe4f-4585-bdf2-efb3bc68d982","Мешок текстильный влагонепроницаемый");
    НайтиФормуУпаковки("c97033bd-2cf6-4029-a570-0a59b238e68b","Мешок текстильный плотный");
    НайтиФормуУпаковки("8bb62b02-1b8b-4d1e-8886-93c9484fa5c2","Мешок, большой");
    НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8","Мешок, бумажный");
    НайтиФормуУпаковки("fdbf9ad8-68d8-49ee-814f-b7d76d806545","Мешок, гибкий контейнер");
    НайтиФормуУпаковки("198ddc36-88da-4659-a5a6-d9acb8416d9d","Мешок, джутовый");
    НайтиФормуУпаковки("501e2c46-d364-44f5-9f7f-c9697115e4fd","Мешок, пластмассовый");
    НайтиФормуУпаковки("e806470b-dcf2-447e-8394-b4144b9138df","Мешок, рогожный");
    НайтиФормуУпаковки("577431f6-7f08-4f20-af71-7ede3ac2a564","Мягкий мешок, Гибкая цистерна");
    НайтиФормуУпаковки("d2aeda76-b593-42c6-b6b0-dc1c8338dc54","Набор");
    НайтиФормуУпаковки("3050ca0a-7e39-4cd4-a762-253b981bad21","Навалом металлолом");
    НайтиФормуУпаковки("a521f8b3-eeeb-4027-941c-45928d0ecb16","Наливом газ (при 1031 мБар и 15°C)");
    НайтиФормуУпаковки("791bd3df-24eb-466f-b575-57d9dd1f95b7","Наливом газ сжиженный (при температуре/давлении, отличающихся от нормальных)");
    НайтиФормуУпаковки("22f90a6e-6872-4bd5-a143-063761da6e1a","Наливом жидкость");
    НайтиФормуУпаковки("f8ca4252-9ca3-45bd-9a95-8b6a5b538208","Насыпью твердые гранулированные частицы (гранулы)");
    НайтиФормуУпаковки("df053993-cf00-43c9-97ea-4c2fa0d07f96","Насыпью твердые крупные частицы (мелкие куски)");
    НайтиФормуУпаковки("efb4b760-611d-4f20-80a8-273c315f4db0","Насыпью твердые мелкие частицы (порошки)");
    НайтиФормуУпаковки("0e254eeb-d882-425d-85cf-ae68b8e50980","Нет сведений");
    НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8","Неупакованный или нерасфасованный");
    НайтиФормуУпаковки("3fd40265-127d-4fc6-9999-1cdf62f25faf","Неупакованный или нерасфасованный многоместный груз");
    НайтиФормуУпаковки("2def57e9-6280-4d7d-8765-840aa86e45e1","Неупакованный или нерасфасованный одноместный груз");
    НайтиФормуУпаковки("ed9473f1-647c-4dfc-8ac2-3cba09217165","Октабин");
    НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8","Пакет");
    НайтиФормуУпаковки("cd449f46-29f4-42af-8d36-046f0954ae63","Пакет (мешочек)");
    НайтиФормуУпаковки("f0b0ec9b-8341-4e95-bc0e-80898be598cb","Пакет (пачка/связка)");
    НайтиФормуУпаковки("6fddb358-43dd-4030-a1a7-a1a3c8c489ad","Пакет бумажный многослойный");
    НайтиФормуУпаковки("cf45058e-1f10-42fa-ae97-b2afefac9489","Пакетик");
    НайтиФормуУпаковки("63c5ba04-a314-4d41-9a0f-d328fba0144a","Пачка (пакет/связка)");
    НайтиФормуУпаковки("aeba3537-a7ed-4c11-8cfc-a05de5280f73","Пачка деревянная");
    НайтиФормуУпаковки("240ef107-fad5-4fca-bad1-ae65ab388ac6","Плита");
    НайтиФормуУпаковки("4b2de153-2c3e-499e-91f8-a7ce1926157a","Плиты в пакете/пачке/связке");
    НайтиФормуУпаковки("a8e05c09-1c89-46a8-8362-b2388f820fdb","По взаимному определению");
    НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8","Поддон");
    НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8","Поддон");
    НайтиФормуУпаковки("83ee9a1e-5c1c-438b-bb63-48ed654e63ef","Поддон 100 x 110 см");
    НайтиФормуУпаковки("280069cf-3cff-4cb3-a96d-5632944e3f9c","Поддон в термоусадочной пленке");
    НайтиФормуУпаковки("d520e4b3-dd9b-4f34-9148-ccac220b9c84","Поддон деревянный");
    НайтиФормуУпаковки("82286818-b97d-42ef-b5e2-d1a1ac1c18cf","Поддон модульный с обечайкой 80 x 100 см");
    НайтиФормуУпаковки("d1d65e12-85c6-4492-8407-de44d792ac1f","Поддон модульный с обечайкой 80 x 60 см");
    НайтиФормуУпаковки("d79600b3-7498-4a9b-a873-d58fce2a667d","Поддон модульный с обечайкой 80 х 120 см");
    НайтиФормуУпаковки("d9d55e79-0ba6-4c11-9761-0e10dc1c6c8e","Поддон, ящичный");
    НайтиФормуУпаковки("81b74091-f9db-436f-b6a9-2438f3fbba32","Прут");
    НайтиФормуУпаковки("cfc437d8-9bfe-4d56-8d0e-4f35e5ae3af6","Прут в пакете/пачке/связке");
    НайтиФормуУпаковки("c91b91dc-6dff-49f6-90eb-19824f81b675","Пульверизатор");
    НайтиФормуУпаковки("770d2025-1d5e-463a-82bc-ce7bceb3cc90","Рама");
    НайтиФормуУпаковки("2d523fde-44a2-4c21-891b-4bccdcb1a33e","Рулон (обивочного или настилочного материала)");
    НайтиФормуУпаковки("f65e0788-1ba1-46f5-b677-d7590cc6c745","Рулон (полосового материала)");
    НайтиФормуУпаковки("07aa7b0e-2a80-45ba-b3bd-6060eef8376b","Связка");
    НайтиФормуУпаковки("ed7372ee-8b55-4e69-aa90-956a68b836ae","Сетка");
    НайтиФормуУпаковки("5f3d0b50-196e-498d-8994-7dfd1d9661cc","Сетка типа используемой для овощей или фруктов");
    НайтиФормуУпаковки("fe9cc400-101e-4dee-a90f-705c71bb560e","Сетка трубчатая пластмассовая");
    НайтиФормуУпаковки("1943c156-b96c-4b64-8935-dfd11e95d495","Сетка трубчатая текстильная");
    НайтиФормуУпаковки("29f1456b-e328-4f1b-b855-41eda829a9e1","Слитки в пакете/пачке/связке");
    НайтиФормуУпаковки("c954a839-e145-40f0-8945-de8e4faad748","Слиток");
    НайтиФормуУпаковки("000000f8-8e27-4cb0-9e34-6d99fd90d7df","Сляб");
    НайтиФормуУпаковки("322566af-9e46-4f63-bf22-041d4d2d9c58","Сосуд с пластмассовым покрытием");
    НайтиФормуУпаковки("bc592630-266f-425c-be8b-911425c04ccf","Сосуд, бумажный");
    НайтиФормуУпаковки("a7a51764-3c6d-4dec-997d-c5b08d8e2d74","Сосуд, деревянный");
    НайтиФормуУпаковки("0509b85d-01ca-4a62-bc40-283eff6ead2d","Сосуд, металлический");
    НайтиФормуУпаковки("876203e4-1352-455a-8c97-92c3460acc3a","Сосуд, пластмассовый");
    НайтиФормуУпаковки("251a4096-c3d6-4b0c-8534-65b31d41f633","Сосуд, стеклянный");
    НайтиФормуУпаковки("ef542239-f46a-4552-a332-db330f73b646","Сосуд, фибровый");
    НайтиФормуУпаковки("6bcddbae-2d7b-455c-83b3-6a65731d4e9f","Спичечный коробок");
    НайтиФормуУпаковки("2f2ba5e2-c9ab-41af-83d8-592f65c01db4","Стеллаж");
    НайтиФормуУпаковки("2d3b2408-d028-42e1-bc72-941b7fa149b5","Стойка");
    НайтиФормуУпаковки("28f26068-5294-4c8a-b409-c0a7ae10efd9","Стойка, вешалка для одежды");
    НайтиФормуУпаковки("ed6ec9a4-fb93-420a-9e1d-884aa58849c4","Сундук");
    НайтиФормуУпаковки("bf12e4f9-56be-4b62-a0d6-22f01585db25","Сундук, дорожный");
    НайтиФормуУпаковки("022887ce-8f39-4b81-b26e-785f114c7ac7","Сундук, морской");
    НайтиФормуУпаковки("dbff7b51-2571-451e-bf15-66e2ceed2fcb","Сундучок");
    НайтиФормуУпаковки("730968d5-30e1-4cc8-b413-d5997e8898a5","Таблетка");
    НайтиФормуУпаковки("7c585ad5-34f3-4975-a0aa-a78229e71808","Труба");
    НайтиФормуУпаковки("f5144819-a94a-486d-91d7-eb38a074c6c1","Труба в пакете/пачке/связке");
    НайтиФормуУпаковки("06eb9e3a-d6a8-49c3-809a-b4150b90e210","Трубка или туба");
    НайтиФормуУпаковки("54d1cc31-f51c-4e2a-9230-009c57aaa517","Трубка или туба в пакете/пачке/связке");
    НайтиФормуУпаковки("0c009153-57e0-4dfa-8e5f-ece82ae4dfef","Трубка или туба с насадкой");
    НайтиФормуУпаковки("6858e1ff-229f-43e0-9b3b-dd6ac0b41485","Трубка или туба, складывающаяся");
    НайтиФормуУпаковки("eb23a947-4fd9-46e6-8a6f-f258433500e7","Упаковка");
    НайтиФормуУпаковки("7ca4b4f3-fcac-4c00-8d7a-b258acaa97f0","Упаковка в оберточной бумаге");
    НайтиФормуУпаковки("b5dd6d4d-b99e-4245-8a92-abc119e1889f","Упаковка демонстрационная деревянная");
    НайтиФормуУпаковки("67129e5f-36d2-4397-8122-0c18747d2344","Упаковка демонстрационная картонная");
    НайтиФормуУпаковки("add23067-88c7-4cc0-a251-8c67953d00ce","Упаковка демонстрационная металлическая");
    НайтиФормуУпаковки("dfe5cf21-dbc5-4f51-b7fd-ad45259f9677","Упаковка демонстрационная пластмассовая");
    НайтиФормуУпаковки("c2645eda-085d-4ae7-bfc2-641fc380ebae","Упаковка картонная с отверстиями для бутылок");
    НайтиФормуУпаковки("9b0b180a-7cbb-4d9a-ba41-fd08b0eae3ba","Упаковка, выпрессованная");
    НайтиФормуУпаковки("ec874c34-8d51-4e04-bd2c-9ec9642d1e0e","Упаковка, выставочная");
    НайтиФормуУпаковки("a283d481-0a41-4d0a-9c38-e386caac0d70","Флакон");
    НайтиФормуУпаковки("2ca9172d-edad-4d6f-a4b8-e4fbaae098cb","Фляга");
    НайтиФормуУпаковки("07c59e7c-4a8c-4035-8048-2847491c88ea","Цилиндр");
    НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8","Цистерна контейнер универсальный");
    НайтиФормуУпаковки("a5e4fb2f-f40b-40ab-bd2d-f6ddabbd4460","Цистерна, прямоугольная");
    НайтиФормуУпаковки("6fd54b8c-d35a-4655-b2f2-2491429b0931","Цистерна, цилиндрическая");
    НайтиФормуУпаковки("59eac884-a3ee-4c87-86ef-2508d1328ee6","Чайная коробка");
    НайтиФормуУпаковки("6eb46a7f-f1c0-49fd-b38c-47c8177aa9e1","Чан");
    НайтиФормуУпаковки("bfbecab2-acff-4791-8f4f-b03d435d00c8","Чаша");
    НайтиФормуУпаковки("8f4c7cbd-7d4a-48d6-873f-9f4a37bd576c","Чемодан");
    НайтиФормуУпаковки("354aee98-06a3-4780-bc9a-00a57edd8ca7","Чехол");
    НайтиФормуУпаковки("62f322c4-ce6d-4584-ba3f-4c771406f54d","Шар");
    НайтиФормуУпаковки("0bf57833-4b9d-4d99-96a3-53c7263e01e6","Шина");
    НайтиФормуУпаковки("dd7b8b5b-fcf3-46bf-9955-e2c5f9cc25f6","Шпиндель");
    НайтиФормуУпаковки("969bfad0-be8f-43fe-84d8-32ebfe32d37d","Шпулька");
    НайтиФормуУпаковки("25b9eab3-0f9f-42c1-912b-10f78bc63901","Штабель");
    НайтиФормуУпаковки("6090531d-d038-4f6c-a8df-77ba92267ec4","Штука");
    НайтиФормуУпаковки("bd8a4719-4595-4e82-a2e6-9ea20afcbf6e","Ящик");
    НайтиФормуУпаковки("7c29a864-e469-4c64-89e7-153000939d61","Ящик");
    НайтиФормуУпаковки("563fadd5-faa2-4d28-9139-1f23e08ae0af","Ящик автомобильный");
    НайтиФормуУпаковки("61079f21-ef62-44bc-97a7-817029f4d251","Ящик деревянный");
    НайтиФормуУпаковки("3d01bd9f-6629-4ec1-9ebe-532d82379a14","Ящик деревянный");
    НайтиФормуУпаковки("d8f7a02c-5076-41a2-9258-cca3427993b4","Ящик металлический");
    НайтиФормуУпаковки("668f1a9f-3b4c-496a-8c01-c6d1bd87d917","Ящик решетчатый (или обрешетка) мелкий");
    НайтиФормуУпаковки("aabbf190-ba1f-4611-8a97-6ce660a1dbc3","Ящик решетчатый (или обрешетка) многослойный деревянный");
    НайтиФормуУпаковки("f1a52766-b434-4e89-8440-60ba8df518c3","Ящик решетчатый (или обрешетка) многослойный картонный");
    НайтиФормуУпаковки("5fc55705-10dd-4071-a5ec-bd2337e98b95","Ящик решетчатый (или обрешетка) многослойный пластмассовый");
    НайтиФормуУпаковки("c1444369-7a47-4e53-8e62-c33c290d73c2","Ящик решетчатый (или обрешетка) рамный");
    НайтиФормуУпаковки("fe47d256-3d2b-4460-87e3-349ee65f6ac0","Ящик решетчатый для бутылок");
    НайтиФормуУпаковки("e879ae24-cac7-4dd1-a0e5-1d433b3493ab","Ящик решетчатый для массовых грузов деревянный");
    НайтиФормуУпаковки("ebf8776f-0e3d-4aff-bc64-28fb6e93a6fb","Ящик решетчатый для массовых грузов картонный");
    НайтиФормуУпаковки("7c4ea86f-477d-499e-b9b5-281c8d7cb2a5","Ящик решетчатый для массовых грузов пластмассовый");
    НайтиФормуУпаковки("dcf6eeb2-a0fd-4f1c-83db-7a85354a7c84","Ящик решетчатый для молока");
    НайтиФормуУпаковки("9e2b9bfb-8f54-4a66-ad38-d650ca479e44","Ящик решетчатый для пива");
    НайтиФормуУпаковки("3ea227b5-df09-40c2-b802-8abd1427c73e","Ящик решетчатый для фруктов");
    НайтиФормуУпаковки("93266aa3-4642-4162-8155-01851a5c0811","Ящик с поддоном");
    НайтиФормуУпаковки("a106dd9b-f9ee-45d6-a4f7-d8c18a1c53ea","Ящик с поддоном деревянный");
    НайтиФормуУпаковки("dbb7a1d0-aa1f-4141-90e2-1db559dd20f7","Ящик с поддоном картонный");
    НайтиФормуУпаковки("4ad07608-39ee-4991-baac-9cd2bdb5b2b0","Ящик с поддоном металлический");
    НайтиФормуУпаковки("215592ec-b08d-401b-800d-d36bda9ba0b5","Ящик с поддоном пластмассовый");
    НайтиФормуУпаковки("a451a297-b510-48fc-8a31-a41e311a0d82","Ящик, изотермический");
    НайтиФормуУпаковки("5bca0d26-c06d-4fbd-a75a-39b098f7a5d8","Ящик, каркасный");
    НайтиФормуУпаковки("e2437340-c529-4655-9774-c61054d429a5","Ящик, решетчатый (или обрешетка)");
    НайтиФормуУпаковки("a4992438-8d0c-45b2-9ffd-669dff708417","Ящик, стальной");
	
КонецПроцедуры

//}