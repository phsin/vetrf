// Меркурий_Интеграция.ert = модуль для замены стандартных функций ГМ (Глобального Модуля)
// для кастомизации модуля внедрения под конфигурацию заказчика
// ВНИМАНИЕ:
// При обновлении этот модуль НЕ ОБНОВЛЯТЬ
//
// ===============================================================
// Автор Анисимов Михаил mbIkola
// AnisimovM(не кошка)mail.ru
// сентябрь 2017

//{Служебные функции

Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Процедура Конструктор()
КонецПроцедуры

Процедура Деструктор() 
КонецПроцедуры

Процедура Инициализация(модульМеркурий) Экспорт
	
	ГМ2 = модульМеркурий;
	
	//Здесь описываются все функции которые будут переопределены
	// для активации функции нужно раскоментировать следующую строку !!!
	//ГМ2.ПереопределитьФункцию("ЗаполнитьВСД2_Транзакция_После", Сам());
		
КонецПроцедуры // Инициализация

//}

//Функция ВСД_Инвентаризация_ЗаполнитьТЧ( док ) экспорт 			//пример переопределения функции ПолучитьИНН
//	//_ИНН = ВыбКлиент.Инн;
//	//_КПП = "";
//	Возврат док;
//КонецФункции // 

Процедура СкопироватьРеквизиты( ДокИсточник, ДокПриемник )
	
	НазваниеВидаДокументаРеализация = "ВСД2_Транзакция";
	
	Для nn = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		ИмяРеквизита = Метаданные.ОбщийРеквизитДокумента(nn).Идентификатор;
		ДокПриемник.УстановитьАтрибут( ИмяРеквизита, ДокИсточник.ПолучитьАтрибут(ИмяРеквизита) );
	КонецЦикла;
	Для nn = 1 По Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки() Цикл
		ИмяРеквизита = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Идентификатор;
		ДокПриемник.УстановитьАтрибут( ИмяРеквизита, ДокИсточник.ПолучитьАтрибут(ИмяРеквизита) );
	КонецЦикла;
	
КонецПроцедуры
	
Процедура СкопироватьСтрокуТЧ( ДокИсточник, ДокПриемник )
	
	ДокПриемник.НоваяСтрока();
	
	НазваниеВидаДокументаРеализация = "ВСД2_Транзакция";
	
	Для nn = 1 По Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитТабличнойЧасти() Цикл
		ИмяРеквизита = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитТабличнойЧасти(nn).Идентификатор;
		ДокПриемник.УстановитьАтрибут( ИмяРеквизита, ДокИсточник.ПолучитьАтрибут(ИмяРеквизита) );
	КонецЦикла;
КонецПроцедуры


Функция ЗаполнитьВСД2_Транзакция_После(КонтДокумента, ДокОснование, тзТабличнаяЧасть, ЗаполнитьПартии) Экспорт
	// проверим термические условия перевозки, если несколько условий - разобъем на несколько документов
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	КонтДокумента.ВыгрузитьТабличнуюЧасть(тз);
	тз.НоваяКолонка("ТермическиеУсловия");
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		тз.ТермическиеУсловия = тз.Продукция_Элемент.ТермическоеСостояние;
		Если ПустоеЗначение( тз.ТермическиеУсловия )=1 Тогда 
			тз.ТермическиеУсловия = ГМ.ПолучитьКонстанту("ТермУсловияПеревозки");
		КонецЕсли;
	КонецЦикла;
	тз.Свернуть("ТермическиеУсловия","");
	
	Если тз.КоличествоСтрок()=1 Тогда 
		Возврат КонтДокумента; // ничего переносить не надо = только 1 термические условия
	Иначе
		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
			НовыйДок = СоздатьОбъект("Документ.ВСД2_Транзакция");
			НовыйДок.Новый();
			СкопироватьРеквизиты( КонтДокумента, НовыйДок );
			НовыйДок.ДатаДок = КонтДокумента.ДатаДок;
			НовыйДок.ТермическоеСостояние = тз.ТермическиеУсловия;
			
			КонтДокумента.ВыбратьСтроки();
			Пока КонтДокумента.ПолучитьСтроку() = 1 Цикл
				Если КонтДокумента.Продукция_Элемент.ТермическоеСостояние = тз.ТермическиеУсловия Тогда 
					СкопироватьСтрокуТЧ( КонтДокумента, НовыйДок );
				КонецЕсли;
			КонецЦикла;
						
			НовыйДок.Записать();
			НовыйДок.Провести();
			
		КонецЦикла;
	КонецЕсли;
		
	КонтДокумента = НовыйДок;
	Возврат НовыйДок;
	
КонецФункции
