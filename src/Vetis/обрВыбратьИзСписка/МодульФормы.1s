
Перем сзВхПараметры; //:СписокЗначений

Перем оДиспетчер; //:ТПерехватчик.Диспетчер
Перем оПривязки;

Перем сзКолонки;

Перем тпСписок;
Перем тзСписок; //:ТаблицаЗначений

Перем командаВыбор;
Перем командаОтмена;
//===========================================================


///******************************** ADirks 22.12.2017 ************
Процедура тпСписок_Инит()
	Если тпСписок = Неопределено Тогда
		тпСписок = СоздатьОбъект("ТТабличноеПоле.ТЗ");
		тпСписок.Инит(Контекст, "тпСписок");
		
		Если сзКолонки = Неопределено Тогда
			тпСписок.УстановитьТЗ(тзСписок);
		Иначе
			Для н = 1 По сзКолонки.РазмерСписка() Цикл
				Имя = сзКолонки.ПолучитьЗначение(н);
				тпСписок.ДобавитьКолонку(Имя);
			КонецЦикла;
		КонецЕсли;
	
		тпСписок.Показать();
	КонецЕсли;
	
	тпСписок.УстановитьПоставщикаДанных(тзСписок);
	
	тпСписок.ТекущаяСтрока = тзСписок.НомерСтроки;
КонецПроцедуры
///******************************** ADirks 22.12.2017 ************

///******************************** ADirks 27.12.2017 ************
Функция Выбор()
	Если ПустоеЗначение(тпСписок.ТекущаяСтрока) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	тзВыбор = КопироватьСтруктуруТЗ(тзСписок);
	тзВыбор.НоваяСтрока();
	тзСписок.ПолучитьСтрокуПоНомеру(тпСписок.ТекущаяСтрока);
	КопироватьСтрокуТЗ(тзВыбор, тзСписок);

	сзВхПараметры.Установить("нВыбСтр", тпСписок.ТекущаяСтрока);
	сзВхПараметры.Установить("тзВыбор", тзВыбор);
	сзВхПараметры.Установить("ОК", 1);
	
	Если командаВыбор <> Неопределено Тогда
		сзВыбор = Фаб.сзПарам("нСтр", тпСписок.ТекущаяСтрока, "тзВыбор", тзВыбор); //:СписокЗначений
		командаВыбор.Выполнить(сзВыбор);
	КонецЕсли;
	
	Возврат 1;
КонецФункции
///******************************** ADirks 27.12.2017 ************

///******************************** ADirks 25.12.2017 ************
Функция тпСписок_Выбор(Источник, СтрТП, КолТП, ТипРегиона, ТипОбластиЯчейки) Экспорт
	Если Выбор() = 1 Тогда
		Форма.Закрыть();
	КонецЕсли;
	
	Возврат 1;
КонецФункции
///******************************** ADirks 25.12.2017 ************

///******************************** ADirks 25.12.2017 ************
Процедура ОК()
	Если Выбор() = 1 Тогда
		Форма.Закрыть();
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 25.12.2017 ************

///******************************** ADirks 25.12.2017 ************
Процедура кнЗакрыть()
	Если командаОтмена <> Неопределено Тогда
		командаОтмена.Выполнить();
	КонецЕсли;
	Форма.Закрыть();
КонецПроцедуры
///******************************** ADirks 25.12.2017 ************


///******************************** ADirks 04.06.2018 ************
Функция сзВсеКолонки()
	Для нКол = 1 По тзСписок.КоличествоКолонок() Цикл
	КонецЦикла;

КонецФункции
///******************************** ADirks 04.06.2018 ************

//__________________________________________________________________________
Процедура Привязки_Инит()
	Если Форма.МодальныйРежим() <> 1 Тогда
		оПривязки = СоздатьОбъект("Общие.Форма.Привязки");
		оПривязки.Инит(Контекст);
		оПривязки.Добавить("тпСписок", "ПП", "Форма", "НН", "Форма");
		оПривязки.Добавить("кнОК, кнЗакрыть", "ВН", "Форма");
	КонецЕсли;
КонецПроцедуры


///******************************** ADirks 22.12.2017 ************
Процедура ПриОткрытии()
	сзВхПараметры = Форма.Параметр;
	Если ТипЗначенияСтр(сзВхПараметры) <> "СписокЗначений" Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Привязки_Инит();
	
	тзСписок = сзВхПараметры.Получить("ТЗ");
	сзКолонки = сзВхПараметры.Получить("сзКолонки");
	Если сзКолонки = Неопределено Тогда
		//сзКолонки = сзВсеКолонки();
	ИначеЕсли ТипЗначенияСтр(сзКолонки) = "Строка" Тогда
		сзКолонки = СтрокуВСписок(сзКолонки, ",", 1);
	КонецЕсли;
	
	Заголовок = сзВхПараметры.Получить("Заголовок");
	Форма.Заголовок(Заголовок);
	
	командаВыбор = сзВхПараметры.Получить("командаВыбор");
	командаОтмена = сзВхПараметры.Получить("командаОтмена");
КонецПроцедуры
///******************************** ADirks 22.12.2017 ************

//******************************************************************************
Процедура ПослеСозданияФормы()
	//оПоляВвода = СоздатьОбъект("Форма.КоллекцияПолейВыбораЗначения");
	//оПоляВвода.Инит(Контекст);
	//оПоляВвода.Добавить("Контрагент, Договор", 1);
	
	тпСписок_Инит();
	
КонецПроцедуры

///******************************** ADirks 27.12.2017 ************
Процедура ПослеОткрытия() Экспорт
	//Если Форма.МодальныйРежим() = 1 Тогда
	//	//Привязки_Инит();
	//	оПривязки.СохранятьРазмерыОкна(0);
	//	оПривязки._ПослеОткрытия();
	//	
	//	оФорма = СоздатьОбъект("РасширениеФормы");
	//	
	//	оПривязки._ПриИзмененииРазмераОкна(0, оФорма.Ширина+100, оФорма.Высота);
	//	//оФорма.Ширина = оФорма.Ширина + 100;
	//	
	//КонецЕсли;
КонецПроцедуры
///******************************** ADirks 27.12.2017 ************

///******************************** ADirks 21.06.2018 ************
Процедура ПриПовторномОткрытии()
	сзВхПараметры = Форма.Параметр;
	тзСписок = сзВхПараметры.Получить("ТЗ");
	тпСписок_Инит();
КонецПроцедуры
///******************************** ADirks 21.06.2018 ************


//===========================================================
//===========================================================
оДиспетчер = оДиспетчерПерехвата(Контекст);



