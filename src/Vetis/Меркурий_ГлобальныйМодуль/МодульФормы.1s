// ГМ = Глобавльный Модуль 
//
// ===============================================================
//Авторы:
// Синявский Филипп phsin@kb99.pro
// Жуков Дмитрий zhukov@kb99.pro

Перем Компонента Экспорт;
Перем СписокКонстант Экспорт;
Перем СписокФирм Экспорт;
Перем ПараметрыФирм Экспорт; // ЖД  Многофирм
Перем базаДанных Экспорт;
Перем ЭтоSQL Экспорт;
Перем ТаблицаПереопределенныхФункций;
Перем КлассыМаркировки Экспорт;
Перем КолонкаСортировкиПартииСписания Экспорт;
Перем RS Экспорт;
Перем Сервис Экспорт;
Перем _ФабрикаОбъектов Экспорт;

Перем ТекущаяИнициализированнаяФирма Экспорт;
Перем ТекущаяФирма_ЗагруженыПараметры;

Перем Версия Экспорт;
Перем ВерсияОписание Экспорт;

Перем цвКрасный Экспорт;
Перем цвЖелтый Экспорт;
Перем цвЗеленый Экспорт;
Перем цвГолубой Экспорт;
Перем цвФиолетовый Экспорт;
Перем цвСерый Экспорт;

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Функция ПолучитьСписокКонстант(ВыбФирма = "") Экспорт Далее
Функция ИмяФайлаНастроек() Экспорт Далее
Функция ПолучитьКонстанту(НаименованиеКонстанты) Экспорт Далее

//******************************************************************************
// ЗагрузитьКомпоненту(ИмяФайлаКомп)
//
// Параметры:
//  ИмяФайлаКомп =
//
// Возвращаемое значение:
//  1  - компонента загружена
//  0  - компонента не найдена
//  -1 - компонента не загружена (ошибка при загрузке)
// Описание:
//  Загружает внешнюю компоненту
//
Функция ЗагрузитьКомпоненту(ИмяФайлаКомп) Экспорт
	Результат = 1;
	ИмяФайла = ПолучитьКонстанту("КаталогМодуля") + ИмяФайлаКомп;
	Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
	    ИмяФайла = КаталогИБ() + "ExtForms\" + ИмяФайлаКомп;
		Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
			ИмяФайла = КаталогИБ() + ИмяФайлаКомп;
			Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
				ИмяФайла = КаталогПрограммы() + ИмяФайлаКомп;
				Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
					Результат = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат = 1 Тогда
	    Если ЗагрузитьВнешнююКомпоненту(ИмяФайла) <> 1 Тогда
			Сообщить("Ошибка при загрузке компоненты " + ИмяФайлаКомп + " !","!");
	        Результат = -1;
		КонецЕсли;
	Иначе
		Сообщить("Не найден файл внешней компоненты: " + ИмяФайлаКомп,"!");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗагрузитьКомпоненту()

Процедура СообщитьОбОшибке(Описание, ТекущийКонтекст="", НомерСтрокиОшибки="" ) Экспорт

	Попытка
		ВерсияФайла = ТекущийКонтекст.Версия;
	Исключение
		ВерсияФайла = Версия;
	КонецПопытки;

	Попытка
		ИмяФайла = ТекущийКонтекст.ИмяФайла;
	Исключение
		Попытка
			ИмяФайла = ТекущийКонтекст.ПолучитьПуть();
		Исключение
			ИмяФайла = Этот(Контекст).ПолучитьПуть();
		КонецПопытки;
	КонецПопытки;

	Сообщить(Описание,"!");
	Сообщить("Файл ["+ИмяФайла+"] Версия: ["+ВерсияФайла+"]");

	ЗаписьЖурналаРегистрации(Описание,,,ТекущийКонтекст);
	
	Попытка
		//отправим сообщение об ошибке И версии файла в bugtracker
		Компонента.SendError(Описание, ВерсияФайла, ИмяФайла, НомерСтрокиОшибки);
	Исключение
		//Сообщить("Необходимо обновить dll","!");
	КонецПопытки;
	
	Если Вопрос("Продолжить?",4)=7 Тогда
	    СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры

Процедура  СообщитьИнфо(Описание, ВыбДокумент="", ИмиджМаркера="i") Экспорт

	Сообщить(""+ВыбДокумент+" "+Описание, ИмиджМаркера);
	ЗаписьЖурналаРегистрации(Описание,,,ВыбДокумент);
	
КонецПроцедуры

//======================================================================
Процедура ИнициализацияОбщихБиблиотек()
	Попытка
		RS = СоздатьОбъект("ODBCRecordset");
		//RS.УстБД1С();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(109)");
	КонецПопытки;
	Попытка
		Сервис = СоздатьОбъект("Сервис");
		Сервис.ВключитьРаскраскуТаблиц();
		Сервис.ИспользоватьПланРаскраски(0);
		_ФабрикаОбъектов=СоздатьОбъект("ФабрикаОбъектов");
	Исключение
		Если ЗагрузитьКомпоненту("FormEx.dll")=0 Тогда Возврат; КонецЕсли;
		Сервис = СоздатьОбъект("Сервис");
		Сервис.ВключитьРаскраскуТаблиц();
		Сервис.ИспользоватьПланРаскраски(0);
	КонецПопытки;

	ЭтоSQL = ФС.СуществуетФайл(КаталогИБ()+"1cv7.dba");
	Если ЭтоSQL = 0 Тогда
		Попытка
			базаДанных = СоздатьОбъект("SQLiteBase");
		Исключение
			Если ЗагрузитьКомпоненту("1sqlite.dll")=0 Тогда Возврат; КонецЕсли;
			базаДанных = СоздатьОбъект("SQLiteBase");
		КонецПопытки;
		базаДанных.Открыть(":memory:");
	КонецЕсли;

КонецПроцедуры // ИнициализацияКомпонент

Процедура ИнициализацияПодключенияВетис()

	//В идеале долно быть 1 подключение к Ветису	
	ИмяDLL = ?(ПолучитьКонстанту("ТестовыйРежим")=0,"SoapDLL_work","SoapDLL_test");
	Попытка
		ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);
		Компонента = СоздатьОбъект("AddIn."+ИмяDLL);
	Исключение
		ошибка = "Компонента [AddIn."+ИмяDLL+"] не зарегистрирована ";
		Сообщить(ошибка,"!");
		СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(154)"); Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура Конструктор()

	ТекущаяИнициализированнаяФирма = "";

	//Служебная таблица для перекрытия переопределенных функций
	ТаблицаПереопределенныхФункций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПереопределенныхФункций.НоваяКолонка("НаименованиеФункции");
	ТаблицаПереопределенныхФункций.НоваяКолонка("Объект");

	СписокКонстант = СоздатьОбъект("СписокЗначений");
	СписокФирм = СоздатьОбъект("СписокЗначений");
	ПараметрыФирм  = СоздатьОбъект("СписокЗначений");	//ЖД Многофирм

//	ТермическиеУсловияПеревозки = СоздатьОбъект("СписокЗначений");
//	ТермическиеУсловияПеревозки.ДобавитьЗначение("FROZEN", 		"Замороженный");
//	ТермическиеУсловияПеревозки.ДобавитьЗначение("CHILLED",		"Охлажденный");
//	ТермическиеУсловияПеревозки.ДобавитьЗначение("COOLED", 		"Охлаждаемый");
//	ТермическиеУсловияПеревозки.ДобавитьЗначение("VENTILATED",	"Вентилируемый");

	КолонкаСортировкиПартииСписания = СоздатьОбъект("СписокЗначений");
	КолонкаСортировкиПартииСписания.ДобавитьЗначение("ДатаИзменения",		"Дата изменения");
	КолонкаСортировкиПартииСписания.ДобавитьЗначение("ДатаСрокГодности1",	"Срок годности");
	КолонкаСортировкиПартииСписания.ДобавитьЗначение("ДатаИзготовления1",	"Изготовлено");


	КлассыМаркировки = СоздатьОбъект("СписокЗначений");
	КлассыМаркировки.ДобавитьЗначение("UNDEFINED", "Неопределенный класс");
	КлассыМаркировки.ДобавитьЗначение("BN", "Номер производственной партии");
	КлассыМаркировки.ДобавитьЗначение("SSCC", "SSCC-код (глобально-уникальный код грузовых контейнеров)");
	КлассыМаркировки.ДобавитьЗначение("EAN8", "Маркировка в соответствии с EAN-8");
	КлассыМаркировки.ДобавитьЗначение("EAN13", "Маркировка в соответствии с EAN-13");
	КлассыМаркировки.ДобавитьЗначение("EAN128", "Маркировка в соответствии с EAN-128");
	КлассыМаркировки.ДобавитьЗначение("BUNDLE", "Маркировка вышестоящей групповой упаковки (паллеты И т.п.)");

	// Загрузка настроек
	ИмяФайла = ИмяФайлаНастроек();

	Если фс.СуществуетФайл(ИмяФайла)=0 Тогда
		//Сообщить("Файл с константами ["+ИмяФайла+"] не найден","!");
	Иначе
		Попытка			
			ЗначениеИзФайла(ИмяФайла,ПараметрыФирм);
			СообщитьИнфо("Загружены параметры "+ИмяФайла);
			
			// Настройки хранятся в ПараметрыФирм. Т.к. это СписокЗначений, а не ТЗ,
			// нужен еще один списокзначений с самими фирмами, Иначе во всех обработках/документах
			// надо делать этот списокфирм для загрузки параметров
			// Если конфигурация без фирм/других справочников (бухгалерия) - в названии будет -=основная фирма=-
			Для СЦ = 1 По ПараметрыФирм.РазмерСписка() Цикл
				стр = ""; ВремФирма = "";
				НаименованиеФирмы = "-=Основная фирма=-";
				к = ПараметрыФирм.ПолучитьЗначение(СЦ,стр);
				Если ПустоеЗначение(стр) = 0 Тогда
					ВремФирма = ЗначениеИзСтрокиВнутр(стр);
					Попытка
						НаименованиеФирмы = ВремФирма.Наименование;
					Исключение
						НаименованиеФирмы = "-=Основная фирма=-";
					КонецПопытки;
				КонецЕсли;
				СписокФирм.ДобавитьЗначение(ВремФирма, НаименованиеФирмы);
			КонецЦикла;
		Исключение
			СообщитьОбОшибке("Не удалось загрузить параметры
			|"+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	ПолучитьСписокКонстант("");
	ИнициализацияОбщихБиблиотек();

	глМеркурийИнтеграция = СоздатьОбъект("МеркурийИнтеграция");
    глМеркурийИнтеграция.Инициализация(Сам());
	
	Попытка	
		фВерсия = СоздатьОбъект("Текст");
		фВерсия.Открыть( ПолучитьКонстанту("КаталогМодуля")+"version.txt" );
		Версия = "Версия: "+фВерсия.ПолучитьСтроку(1);
		ВерсияОписание = фВерсия.ПолучитьСтроку(2);
	Исключение
		// Версия = "Версия не определена ";
		// ВерсияОписание = "";
	КонецПопытки;
	
КонецПроцедуры

Процедура Деструктор()
КонецПроцедуры
//

//======= ФУНКЦИИ ПО РАБОТЕ С ПЕРЕОПРЕДЕЛЕННЫМИ ФУНКЦИЯМИ ==============
// Автор Анисимов Михаил mbIkola
Функция ПереопределитьФункцию(ИмяФункции,Объект) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);


	Если ТаблицаПереопределенныхФункций.НайтиЗначение(ИмяФункции,НС,"НаименованиеФункции")=0 Тогда
		
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию") = 1 Тогда 
			Сообщить("Выполняется переопределение функции <"+ИмяФункции+"> ","i");
		КонецЕсли;
		
		ТаблицаПереопределенныхФункций.НоваяСтрока();
		ТаблицаПереопределенныхФункций.НаименованиеФункции 	= темп;
		ТаблицаПереопределенныхФункций.Объект 				= Объект;
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		ТаблицаПереопределенныхФункций.Объект 		= Объект;
	КонецЕсли;

	Возврат 1;
КонецФункции // ПереопределитьФункцию(ИмяФункции,Объект)

Функция ПроверитьПереопределениеФункции(ИмяФункции) Экспорт
	НС = 0;
	темп = Врег(ИмяФункции);

	Если ТаблицаПереопределенныхФункций.НайтиЗначение(темп,НС,"НаименованиеФункции")=0 Тогда
		Возврат "";
	Иначе
		ТаблицаПереопределенныхФункций.ПолучитьСтрокуПоНомеру(НС);
		Возврат ТаблицаПереопределенныхФункций.Объект;
	КонецЕсли;
КонецФункции // МодульВыполнения
//======================================================================

///******************************** ADirks 13.11.2019 ************
Функция фЭтоВСД_Транзакция(Док) Экспорт
	ВидДок = Врег(Док.Вид());
	Если ВидДок = "ВСД_ТРАНЗАКЦИЯ" Тогда
		Возврат 1;
	ИначеЕсли ВидДок = "ВСД2_ТРАНЗАКЦИЯ" Тогда
		Возврат 1;
	КонецЕсли;

	Возврат 0;
КонецФункции
///******************************** ADirks 13.11.2019 ************

//======= ФУНКЦИИ ПО СБОРУ ИНФОРМАЦИИ О КЛИЕНТЕ ==============

Функция ПолучитьНомерАвто(Док) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьНомерАвто");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьНомерАвто(Док);
	КонецЕсли;
	//}
	Рез = "Не исп.";
	Попытка 
		Рез = Док.Маршрут.Авто.НомернойЗнак;	
	Исключение	
		Рез = ПолучитьКонстанту("НомерАвто")
	КонецПопытки;

	Возврат Рез;
КонецФункции


// Получение реквизитов связанных документов, в параметре Тип нужного документа

// Возвращаемое значение: СписокЗначений - Серия Номер И Дата документа

Функция ПолучитьСвязанныйДокумент(Док,ТипДокумента = "ТТН") Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля

	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьСвязанныйДокумент");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьСвязанныйДокумент(Док,ТипДокумента);
	КонецЕсли;
	//}

	сзРеквизитыДок = СоздатьОбъект("СписокЗначений");

	Если ТипДокумента = "ТТН" Тогда
		сзРеквизитыДок.Установить("ДокСерия","");
		сзРеквизитыДок.Установить("ДокНомер",Док.НомерДок);
		сзРеквизитыДок.Установить("ДокДата",Док.ДатаДок);
	ИначеЕсли ТипДокумента = "Маршрут" Тогда
		сзРеквизитыДок.Установить("ДокСерия","");
		сзРеквизитыДок.Установить("ДокНомер",Док.НомерДок);
		сзРеквизитыДок.Установить("ДокДата",Док.ДатаДок);
		Попытка сзРеквизитыДок.Установить("НомерАвто",Док.Маршрут.Авто.НомернойЗнак); Исключение КонецПопытки;
	ИначеЕсли ТипДокумента = "ТОРГ12" Тогда
		сзРеквизитыДок.Установить("ДокСерия","");
		Попытка сзРеквизитыДок.Установить("ДокНомер",Док.НомерДок); Исключение КонецПопытки;
		Попытка сзРеквизитыДок.Установить("ДокДата",Док.ДатаДок); Исключение КонецПопытки;
	ИначеЕсли ТипДокумента = "Заказ" Тогда
		сзРеквизитыДок.Установить("ДокСерия","");
		Попытка сзРеквизитыДок.Установить("ДокНомер", Док.ДокОснование.НомерЗаказаПокупателя); Исключение КонецПопытки;
		Попытка сзРеквизитыДок.Установить("ДокДата", Док.ДокОснование.ДатаЗаказаПокупателя); Исключение КонецПопытки;
	КонецЕсли;
	Возврат сзРеквизитыДок;
КонецФункции


//======================================================================
Функция ПолучитьКонстанту(НаименованиеКонстанты) Экспорт

	Если ПустоеЗначение(НаименованиеКонстанты)=1 Тогда 
		Возврат "";
	КонецЕсли;

	ЗначениеКонстанты = СписокКонстант.Получить(НаименованиеКонстанты);
	Если ПустоеЗначение(ЗначениеКонстанты) = 1 Тогда
		//ЗначениеКонстанты = "";
		Если НаименованиеКонстанты = "НазваниеВидаСправочникаФирмы" Тогда
			Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
				ЗначениеКонстанты = "Фирмы";
			КонецЕсли;
		ИначеЕсли НаименованиеКонстанты = "НазваниеВидаДокументаРеализация" Тогда
			Если Метаданные.Документ("Реализация").Выбран() = 1 Тогда
				ЗначениеКонстанты = "Реализация";
			КонецЕсли;
		ИначеЕсли НаименованиеКонстанты = "НазваниеВидаДокументаПеремещениеТМЦ" Тогда
			Если Метаданные.Документ("ПеремещениеТМЦ").Выбран() = 1 Тогда
				ЗначениеКонстанты = "ПеремещениеТМЦ";
			ИначеЕсли Метаданные.Документ("ПеремещениеТоваров").Выбран() = 1 Тогда
				ЗначениеКонстанты = "ПеремещениеТоваров";
			КонецЕсли;
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаГрузополучатель" Тогда
			ЗначениеКонстанты = "Контрагент";
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаКонтрагент" Тогда
			ЗначениеКонстанты = "Контрагент";
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаНоменклатура" Тогда
			НазваниеВидаДокументаРеализация = ПолучитьКонстанту("НазваниеВидаДокументаРеализация");
			Попытка
				Для nn = 1 По Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитТабличнойЧасти() Цикл
					Рекв = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитТабличнойЧасти(nn).Вид;
					Если Рекв = "Номенклатура" Тогда
						ЗначениеКонстанты = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитТабличнойЧасти(nn).Идентификатор;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
				ЗначениеКонстанты="";
				СообщитьОбОшибке("Неправильно определен параметр [НазваниеВидаДокументаРеализация]");
			КонецПопытки;
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаКоличество" Тогда
			Попытка
				Если Метаданные.Документ(ПолучитьКонстанту("НазваниеВидаДокументаРеализация")).РеквизитТабличнойЧасти("Количество").Выбран() = 1 Тогда
					ЗначениеКонстанты = "Количество";
				КонецЕсли;
			Исключение
				ЗначениеКонстанты="";
				СообщитьОбОшибке("Неправильно определен параметр [НазваниеВидаДокументаРеализация]");
			КонецПопытки;
		ИначеЕсли НаименованиеКонстанты = "НазваниеРеквизитаКоличествоМест" Тогда
			Попытка
				Если Метаданные.Документ(ПолучитьКонстанту("НазваниеВидаДокументаРеализация")).РеквизитТабличнойЧасти("КоличествоМест").Выбран() = 1 Тогда
					ЗначениеКонстанты = "КоличествоМест";
				Иначе
					ЗначениеКонстанты = ПолучитьКонстанту("НазваниеРеквизитаКоличество");
				КонецЕсли;
			Исключение
				ЗначениеКонстанты="";
				СообщитьОбОшибке("Неправильно определен параметр [НазваниеВидаДокументаРеализация]");
			КонецПопытки;

		ИначеЕсли НаименованиеКонстанты = "ТермУсловияПеревозки" Тогда
			ЗначениеКонстанты = Перечисление.ВСД_ТермическиеУсловияПеревозки.FROZEN;
		ИначеЕсли НаименованиеКонстанты = "ВСД_Экспертиза" Тогда
			ЗначениеКонстанты = "Произ.лабор ";
		ИначеЕсли НаименованиеКонстанты = "ВСД_Местность" Тогда
			ЗначениеКонстанты = "местность благополучная По остро инфекционным заболеваниям с\х животных И птиц";
		ИначеЕсли НаименованиеКонстанты = "ПаузаСек" Тогда
			ЗначениеКонстанты = 10;
		ИначеЕсли НаименованиеКонстанты = "КаталогМодуля" Тогда
					
			ЗначениеКонстанты = КаталогИБ()+"Vetis\";
			Если ФС.СуществуетФайл( ЗначениеКонстанты ) = 0 Тогда
				СообщитьОбОшибке( НаименованиеКонстанты+" не существует ["+ЗначениеКонстанты+"]");
			КонецЕсли;

		ИначеЕсли НаименованиеКонстанты = "КаталогЛогов" Тогда
					
			//ЗначениеКонстанты = КаталогИБ()+"Vetis\logs\";
			ЗначениеКонстанты = ПолучитьКонстанту("КаталогМодуля")+"logs\";
			Если ФС.СуществуетФайл( ЗначениеКонстанты ) = 0 Тогда
				
				Если Вопрос("каталог ["+ЗначениеКонстанты+"] не существует. Создать каталог?",4,30)=6 Тогда 
					ФС.СоздатьКаталог(ЗначениеКонстанты);
				Иначе
					СообщитьОбОшибке( НаименованиеКонстанты+" не существует ["+ЗначениеКонстанты+"]");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (НаименованиеКонстанты = "ТестовыйРежим") И (ЗначениеКонстанты="") Тогда
			ТестовыйРежим = 1;
		ИначеЕсли НаименованиеКонстанты = "ПарамРазрешенныйТНВЭД" Тогда
			ЗначениеКонстанты = "";
		ИначеЕсли НаименованиеКонстанты = "ПарамПроверятьСрокГодностиКоличествоДней" Тогда
			ЗначениеКонстанты = 7;
		ИначеЕсли НаименованиеКонстанты = "ПарамПричинаАннулирования" Тогда
			ЗначениеКонстанты = "Возврат товара";
		ИначеЕсли НаименованиеКонстанты = "КоличествоПовторовОтправки" Тогда
			ЗначениеКонстанты = 10;
		ИначеЕсли ( ЗначениеКонстанты <> 0) Тогда
			Если ТестовыйРежим = 1 Тогда 
				Сообщить("Константа ["+НаименованиеКонстанты+"] не определена!","!");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НаименованиеКонстанты = "КаталогМодуля" Тогда
					
			Если Лев(ЗначениеКонстанты,1)="." Тогда
			    ЗначениеКонстанты = КаталогИБ()+Сред(ЗначениеКонстанты, 3, СтрДлина(ЗначениеКонстанты)-2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеКонстанты;
КонецФункции // ПолучитьКонстанту

Функция НазваниеРеквизитаНоменклатура() Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НазваниеРеквизитаНоменклатура");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НазваниеРеквизитаНоменклатура();
	КонецЕсли;
	//}

	рез = ПолучитьКонстанту("НазваниеРеквизитаНоменклатура");

	Если ПустоеЗначение(рез)=1 Тогда
		рез = "Номенклатура";
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция ПолучитьНаименованиеКлиента(ВыбКлиент) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьНаименованиеКлиента");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьНаименованиеКлиента(ВыбКлиент);
	КонецЕсли;
	//}

	Если ПустоеЗначение( ВыбКлиент )=1 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ПолнНаименование);
КонецФункции

Функция ПолучитьЮрАдрес(ВыбКлиент) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьЮрАдрес");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьЮрАдрес(ВыбКлиент);
	КонецЕсли;
	//}

	Если ПустоеЗначение( ВыбКлиент )=1 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ЮрАдрес);
КонецФункции

Функция ПолучитьФактАдрес(ВыбКлиент) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьФактАдрес");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьФактАдрес(ВыбКлиент);
	КонецЕсли;
	//}

	Если ПустоеЗначение( ВыбКлиент )=1 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат  СокрЛП(ВыбКлиент.ЮрФизЛицо.ФактАдрес);
КонецФункции

Функция ПолучитьИНН(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИНН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИНН(ВыбКлиент);
	КонецЕсли;
	//}

	Если ПустоеЗначение( ВыбКлиент )=1 Тогда
		Возврат "";
	КонецЕсли;
	
	//стандартное поведение функции
	Попытка
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);
	КонецЕсли;
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьКПП(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьКПП");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьКПП(ВыбКлиент);
	КонецЕсли;
	//}

	Если ПустоеЗначение( ВыбКлиент )=1 Тогда
		Возврат "";
	КонецЕсли;
	
	//стандартное поведение функции
	ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "/") + 1);
	Иначе
		Возврат "";

	КонецЕсли;
КонецФункции // ПолучитьКПП() 

Функция ПолучитьОГРН(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОГРН");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОГРН(ВыбКлиент);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Попытка
		Возврат ВыбКлиент.ОГРН;
	Исключение
	КонецПопытки;

	Возврат "";
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ПолучитьАвтора() Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьАвтора");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьАвтора();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Возврат глПользователь;
	//Возврат ИмяПользователя();
КонецФункции

Функция ПоказатьАвтора(Конт) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПоказатьАвтора");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПоказатьАвтора(Конт);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Возврат Конт.Автор;
КонецФункции

//{ =================== Добавление в ЛОГ ================================
// 
Функция Старт(Конт="") Экспорт
	
    tt1=_GetPerformanceCounter(); 
	Возврат tt1; 
	
КонецФункции       

// Внимание! разделитель изменен с ":" на "="
Функция Финиш(ВремяНачала, Конт, Имя="", Док="", ТипСобытия="ВнешняяОбработка", ДопИнфо="") Экспорт
        
 	Попытка 
 		Путь = Конт.РасположениеФайла();
   	Исключение
	   	Попытка
	 		// класс
	   		Путь = Конт.ПолучитьПуть();  
	   	Исключение   
			ФормаРасш = СоздатьОбъект("РасширениеФормы");
			Попытка 
				ФормаРасш.УстановитьФорму( Конт );
		 		Путь = ФормаРасш.ПолныйТипОбъекта();  		 		
		 	Исключение
		 		Путь = "Модуль";
		 	КонецПопытки;	   		
	   	КонецПопытки;
	КонецПопытки;                
	
    Время= _GetPerformanceCounter() - ВремяНачала;  
	Сообщение = "Путь="+Путь+" ВремяВыполнения="+Время;
	
	Попытка 
		Сообщение = Сообщение + " Вид="+Конт.Вид();
	Исключение
	КонецПопытки;
	
	Если ПустоеЗначение(Имя)=0 Тогда 
		Сообщение = Сообщение +" Имя="+Имя;
	КонецЕсли;
	
	Сообщение = Сообщение + " "+ДопИнфо;
	
	ЗаписьЖурналаРегистрации(Сообщение, ТипСобытия, , Док, 3);
	Возврат Время; 
	
КонецФункции  
//}

// ЖД из глМодуля 1С
Функция глЗначениеПоУмолчанию(ИмяРеквизита) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("глЗначениеПоУмолчанию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.глЗначениеПоУмолчанию(ИмяРеквизита);
	КонецЕсли;
	//}
	Значение = "";	
	//Основую фирму берем из параметров
		
	Если ИмяРеквизита="ОсновнаяФирма" Тогда 
		
		Попытка
			ВыбФирмаПредставление = "";
			СписокКонстант = ПараметрыФирм.ПолучитьЗначение(1, ВыбФирмаПредставление); // первую из параметров
			Значение = ЗначениеИзСтрокиВнутр(ВыбФирмаПредставление);
		Исключение
			Сообщить("Параметры не заполнены!","!");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

	Иначе
		Сообщить("Не удалось получить ЗначениеПоУмолчанию = "+ИмяРеквизита,"!");
	КонецЕсли;
	
	Возврат Значение;

КонецФункции // глЗначениеПоУмолчанию()

Функция глВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции // глВзятьКонтекст

Функция ПолучитьОсновнуюФирму() Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьОсновнуюФирму");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьОсновнуюФирму();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции

Функция ПолучитьФилиал() Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьФилиал");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьФилиал();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Возврат "";
КонецФункции

//{ Процедуры из Глобального модуля  / дубль /

//******************************************************************************
// глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента)
//
// Параметры:
//  ИмяРеквизита - имя реквизита (строка)
//  ВидДокумента - вид документа (строка)
//
// Возвращаемое значение:
//  0 - нет реквизита,
//  1 - есть реквизит
//
// Описание:
//  Проверяет, есть ли в структуре метаданных документа указанного вида
// 	реквизит шапки с указанным названием
//
Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт

	Если ( ПустоеЗначение(ИмяРеквизита) = 1 ) ИЛИ
		 ( ПустоеЗначение(ВидДокумента) = 1 ) Тогда		

		 Возврат 0;
	
	ИначеЕсли ( Метаданные.ОбщийРеквизитДокумента(ИмяРеквизита).Выбран() = 1 ) ИЛИ
		( Метаданные.Документ(ВидДокумента).РеквизитШапки(ИмяРеквизита).Выбран() = 1 ) Тогда

		Возврат 1;

	Иначе
	//Если ( ПустоеЗначение(ИмяРеквизита) = 1 ) ИЛИ
	//	 ( ПустоеЗначение(ВидДокумента) = 1 ) Тогда		
		Возврат 0;
		
	КонецЕсли;

КонецФункции //глЕстьРеквизитШапки()

//******************************************************************************
// глНомерНаПечать(Документ, НеПечататьВходящийНомер = 0) Экспорт
//
// Параметры:
//  Документ                - документ, чей номер надо получить для печати.
//  НеПечататьВходящийНомер - Число, 0 - печатем входящий номер, если он есть,
//                                   1 - независимо ни от чего будем печатать номер документа
//
// Возвращаемое значение.
//  Строка - номер документа для печати
//
// Описание:
//  Процедура предназначена для преобразования номера документа.
//  Используется, например, при выводе номера документа на печать.
//
Функция глНомерНаПечать(Документ, НеПечататьВходящийНомер = 0) Экспорт

	Номер = "";

	Если ПустоеЗначение(Документ)= 0 Тогда
		// Если документ имеет входящий номер, то печатать будем его.
		Если ( глЕстьРеквизитШапки("НомерДокВходящий", Документ.Вид() ) = 1 )
		   и (НеПечататьВходящийНомер = 0) Тогда
			Номер=СокрЛП(Документ.НомерДокВходящий);
		КонецЕсли;

		ВидДокумента = Документ.Вид();
		// Если входящий номер пуст или его вообще нет, то печатаем номер документа
		Если ВидДокумента = "СчетФактураВыданный" Тогда
			Номер=СокрЛП(Документ.НомерДок);
			Номер=Сред(Номер, 2);
			// в документах, перенессеных из старых редакций, может остаться "минус" впереди
			Если Лев(Номер, 1) = "-" Тогда
				Номер	= Сред(Номер, 2);
			КонецЕсли;

			// удаление ведущих нулей
			Пока Лев(Номер, 1)="0" Цикл
				Номер=Сред(Номер, 2);
			КонецЦикла;
		ИначеЕсли ПустоеЗначение(Номер) = 1 Тогда
			Номер=СокрЛП(Документ.НомерДок);

			// назначенный документу префикс
			Попытка
				Префикс=СокрЛП(Константа.ПрефиксИБ);//+ СокрЛП(Документ.Фирма.ЮрЛицо.ПрефиксНомеровДокументов);
			Исключение
				Префикс="";
			КонецПопытки;

			// удаление префикса из номера документа
			Если Найти(Номер, Префикс)=1 Тогда
				Номер=Сред(Номер, СтрДлина(Префикс)+1);
			КонецЕсли;

			// в документах, перенессеных из старых редакций, может остаться "минус" впереди
			Если Лев(Номер, 1) = "-" Тогда
				Номер	= Сред(Номер, 2);
			КонецЕсли;

			// удаление ведущих нулей
			Пока Лев(Номер, 1)="0" Цикл
				Номер=Сред(Номер, 2);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Номер;
КонецФункции // глНомерНаПечать()

// }

//======= ВСПОМОГАЛЬНЫЕ ФУНКЦИИ ==============

Функция Преобразовать_СтрокаДата_в_Дата(ДатаСтр) Экспорт
	// возвращаемый тип - Дата
	Если ПустоеЗначение(ДатаСтр) = 1 Тогда
		Возврат Дата(0); // ИЛИ что?
	КонецЕсли;
	день1= Число(Сред(ДатаСтр,9,2));
	мес1 = Число(Сред(ДатаСтр,6,2));
	// час1 = Сред(ДатаСтр,12,2);
	год1 = Число(Лев(ДатаСтр,4));
	
	Если мес1 = 0 Тогда
		мес1 = 1;
	КонецЕсли;
	
	Если день1 = 0 Тогда
		день1 = ДатаЧисло(КонМесяца(Дата(год1,мес1,1)));
	КонецЕсли;
	
	Возврат Дата(год1,мес1,день1);
	
КонецФункции

Функция Преобразовать_СтрокаДата_в_ФормализованнаяДата(ДатаСтр) Экспорт 
	// возвращаемый тип - Строка
	Если ПустоеЗначение(ДатаСтр) = 1 Тогда
		Возврат "";
	КонецЕсли;
	день1= Сред(ДатаСтр,9,2);
	мес1 = Сред(ДатаСтр,6,2);
//	час1 = Сред(ДатаСтр,12,2);
	год1 = Лев(ДатаСтр,4);
	Рез = ""+день1+"."+мес1+"."+год1;
	Возврат Рез;
КонецФункции

//ДатаXML
Функция Преобразовать_Дата_в_Строка(ВыбДата, Время="", УказыватьТекущееВремя=0) Экспорт
	стрДата = ""+ДатаГод(ВыбДата)+"-";
	Если ДатаМесяц(ВыбДата)<10 Тогда
		стрДата=стрДата+"0"+ДатаМесяц(ВыбДата)+"-";
	Иначе
		стрДата=стрДата + ДатаМесяц(ВыбДата) + "-";
	КонецЕсли;
	Если ДатаЧисло(ВыбДата)<10 Тогда
		стрДата=стрДата + "0" + ДатаЧисло(ВыбДата);
	Иначе
		стрДата=стрДата + ДатаЧисло(ВыбДата);
	КонецЕсли;

	Если УказыватьТекущееВремя=1 Тогда
		ч=0; м=0; с=0;
		ТекущееВремя(ч,м,с);
		Время = "T"+Формат(ч,"Ч(0)2.0")+":"+Формат(м,"Ч(0)2.0")+":"+Формат(с,"Ч(0)2.0");
	КонецЕсли;
		
	Если ТипЗначенияСтр(Время)="Число" Тогда 
		Время = "T"+Формат(Время,"Ч(0)2.0")+":"+"00:00";
	КонецЕсли;
	
	стрДата=стрДата+Время;

	Возврат стрДата;
КонецФункции

Функция булево(знЧисло) Экспорт

	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции

//Процедура ИзменитьСтатусДокументОснования(докОснование, СтатусДок)
//	Если ПустоеЗначение(докОснование)=0 Тогда
//		докОснованиеОбъект = СоздатьОбъект("Документ");
//		докОснованиеОбъект.НайтиДокумент(ДокОснование);
//		Если ((СтатусДок="COMPLETED") ИЛИ (СтатусДок="CONFIRMED")) Тогда
//			Попытка
//				докОснованиеОбъект.Провести();
//			Исключение
//			КонецПопытки;
//		ИначеЕсли (СтатусДок="REJECTED") И НЕ(( СокрЛП(докОснование.Статус) ="COMPLETED") ИЛИ ( СокрЛП(докОснование.Статус) ="CONFIRMED")) Тогда
//			Попытка
//				докОснованиеОбъект.СделатьНеПроведенным();
//			Исключение
//			КонецПопытки;
//		ИначеЕсли (СтатусДок="WITHDRAWN") Тогда
//			Попытка
//				докОснованиеОбъект.Удалить(0);
//			Исключение
//			КонецПопытки;
//		КонецЕсли;
//	КонецЕсли;
//
//КонецПроцедуры

//Найти ошибки в XML ответе сервера И показать в строке сообщений
Функция НайтиОшибки(док="") Экспорт
	Результат=0;
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(Компонента.LogFilename);

	ДокОбъект = СоздатьОбъект("Документ");

	Попытка
	    errors=objDom.selectNodes("//*[local-name() = 'error']");
		//errors = objDom.selectSingleNode("//*[local-name() = 'errors']");

		Если errors.length>0 Тогда

			СтрОшибки ="";
			Сообщить("Ошибок = "+errors.length+" ","!");
		    Для i1 = 0 По errors.length - 1 Цикл
		        error=errors.item(i1);
				id = error.getAttribute("qualifier");
				code = error.getAttribute("code");
				СтрОшибка = "Ошибка" + " "+ code;
				Если ПустоеЗначение(id)=0 Тогда
					СтрОшибка = СтрОшибка + " в строке "+id ;
				КонецЕсли;
				СтрОшибка = СтрОшибка +" = " + СокрЛП(error.text);

				Сообщить(СтрОшибка,"!");
				Результат=Результат+1;
				СтрОшибки = СтрОшибка + РазделительСтрок;
			КонецЦикла;


			Если ПустоеЗначение(Док)=0 Тогда
				ДокОбъект.НайтиДокумент(док);
				ДокОбъект.Комментарий = СтрОшибки;
				ДокОбъект.Записать();
				//ДокОбъект.Удалить(0);

				//ИзменитьСтатусДокументОснования(док, "REJECTED");
			КонецЕсли;
		КонецЕсли;
	Исключение
		СообщитьИнфо("ОШИБКА: "+Компонента.ErrorMessage, док, "!!");
	КонецПопытки;

	Попытка
		// Внутренние ошибки
	    error=objDom.selectSingleNode("//*[local-name() = 'Fault']");

		Если ПустоеЗначение(error)=0 Тогда
			Сообщить("Ошибка : код = "+ error.selectSingleNode("faultcode").text +" ","!");
			Сообщить("Ошибка : строка = "+ error.selectSingleNode("faultstring").text +" ","!");
			Сообщить("Ошибка : сервис = "+ error.selectSingleNode("faultactor").text +" ","!");
			Сообщить("Ошибка : detail описание = "+ error.selectSingleNode("detail").text +" ","!");
			Результат=Результат+1;

		КонецЕсли;
	Исключение
	КонецПопытки;

	Возврат Результат;
КонецФункции


Функция ИмяФайлаНастроек() Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ИмяФайлаНастроек");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ИмяФайлаНастроек();
	КонецЕсли;
	//}

	//стандартное поведение функции

	// Личные настройки в приоритете
	ВремФайл = КаталогИБ()+"Меркурий_Параметры_"+ИмяПользователя()+".cfg";	
	Если ФС.СуществуетФайл(ВремФайл) = 0 Тогда
		// если нет оичных настроек - загружаем общие
		ВремФайл = КаталогИБ()+"Меркурий_Параметры.cfg";
	КонецЕсли;

	Возврат ВремФайл;
КонецФункции

Функция УдалитьXML(ИмяФайла) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("УдалитьXML");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.УдалитьXML();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПолучитьКонстанту("ОтладкаЗапросовXML")=0 Тогда
		Попытка
			ФС.УдалитьФайл(ИмяФайла);
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(763)");
		КонецПопытки;
	КонецЕсли;

КонецФункции

Функция УстановитьНазваниеОкна(КонтекстФормы)
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("УстановитьНазваниеОкна");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.УстановитьНазваниеОкна();
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПолучитьКонстанту("ТестовыйРежим") = 0 Тогда
		Заголовок = "Меркурий - РАБОЧАЯ версия";
	Иначе
		Заголовок = "Меркурий - ТЕСТОВАЯ версия !!!";
	КонецЕсли;

	КонтекстФормы.Форма.Заголовок(Заголовок);
	Возврат 1;
КонецФункции


Функция ПолучитьСписокКонстант(ВыбФирма = "") Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьСписокКонстант");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьСписокКонстант(ВыбФирма);
	КонецЕсли;
	//}
	Если ПустоеЗначение(ВыбФирма) = 0 Тогда
		СписокКонстант = ПараметрыФирм.Получить(ЗначениеВСтрокуВнутр(ВыбФирма));
		ТекущаяФирма_ЗагруженыПараметры = ВыбФирма;
	Иначе
		Попытка
			ВыбФирмаПредставление = "";
			СписокКонстант = ПараметрыФирм.ПолучитьЗначение(1, ВыбФирмаПредставление); // первую попавшуюся
			ТекущаяФирма_ЗагруженыПараметры = ЗначениеИзСтрокиВнутр(ВыбФирмаПредставление);
		Исключение
			//Сообщить("Нет сохраненных настроек");
			ПараметрыФирм = СоздатьОбъект("СписокЗначений");
		КонецПопытки;
	КонецЕсли;

	Если НЕ(ТипЗначенияСТР(СписокКонстант) = "СписокЗначений") Тогда // Переходный период Многофирм ИЛИ НЕТ Параметров для указанной фирмы
		Если ПустоеЗначение(СписокКонстант)  = 0 Тогда  // Первый запуск с настройками прежней версии
			СписокКонстант = ПараметрыФирм;             // Предложим выбрать фирму, чтобы руками не вбивать потом заново настройки
			ПараметрыФирм = СоздатьОбъект("СписокЗначений");
			СпрФирм = СоздатьОбъект("Справочник.Фирмы");
			Если СпрФирм.Выбрать("Выберите Фирму для настроек прежней версии",) = 1 Тогда
			    ПараметрыФирм.Установить(ЗначениеВСтрокуВнутр(СпрФирм.ТекущийЭлемент()),СписокКонстант);
			КонецЕсли;
		Иначе
			Сообщить("Нет настроек По выбранной фирме");
			СписокКонстант = СоздатьОбъект("СписокЗначений");
		КонецЕсли;
	КонецЕсли;
КонецФункции

//Функция ЗагрузитьПараметры(ВыбФирма = "") Экспорт
//	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПараметры");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ЗагрузитьПараметры(ВыбФирма);
//	КонецЕсли;
//	//}
//
//	ПолучитьСписокКонстант(ВыбФирма);
//	//ТестовыйРежим = ПолучитьКонстанту("ТестовыйРежим");
//	//КаталогМодуля = ПолучитьКонстанту("КаталогМодуля")"
//	//КаталогЛогов = ПолучитьКонстанту("КаталогМодуля") + "logs\";
//	//Если ФС.СуществуетФайл(КаталогЛогов) = 0 Тогда
//	//	Попытка
//	//	    ФС.СоздатьКаталог(КаталогЛогов);
//	//	Исключение
//	//		Предупреждение("Не создан каталог логов!");
//	//	КонецПопытки;
//	//КонецЕсли;
//
//КонецФункции

//======================================================================
// Возвращает наличие реквизита Фирма: 0 - не найдено, 1 - общий реквизит, 2 - реквизит документа
// Параметры: Докум - документ, в котором ищем фирму
// ФирмаИмяРеквизита - возвращаемое значение
Функция ПолучитьИмяРеквизитаФирма(НазваниеВидаДокументаРеализация, ФирмаИмяРеквизита) Экспорт
	
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьИмяРеквизитаФирма");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьИмяРеквизитаФирма(НазваниеВидаДокументаРеализация, ФирмаИмяРеквизита);
	КонецЕсли;
	//}
	
	НазваниеВидаСправочникаФирмы = ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");
	ФирмаОбщийРеквизит = 0; ФирмаИмяРеквизита = "";
	Для nn = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
        Рекв = Метаданные.ОбщийРеквизитДокумента(nn).Вид;
		Если Рекв = НазваниеВидаСправочникаФирмы Тогда
			ФирмаИмяРеквизита = Метаданные. ОбщийРеквизитДокумента(nn).Идентификатор;
			ФирмаОбщийРеквизит = 1; Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ФирмаОбщийРеквизит = 0 Тогда
		Для nn = 1 По Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки() Цикл
			Рекв = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Вид;
			Если Рекв = НазваниеВидаСправочникаФирмы Тогда
				ФирмаИмяРеквизита = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Идентификатор;
				ФирмаОбщийРеквизит = 2; Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ФирмаОбщийРеквизит;
КонецФункции // ПолучитьИмяРеквизитаФирма

Функция ПолучитьФирмуПоХС(ВыбХС) Экспорт Далее

Функция ЗагрузитьПараметрыВФорму(КонтекстФормы) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПараметрыВФорму");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПараметрыВФорму(КонтекстФормы);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(КонтекстФормы)=0 Тогда

		Попытка
			КонтекстФормы.param_username 	= ПолучитьКонстанту("param_username"); ;  // для базовой авторизации
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_password 		= ПолучитьКонстанту("param_password");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_issuer_id		= ПолучитьКонстанту("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
		Исключение КонецПопытки;
		//Попытка
		//	КонтекстФормы.param_service_id 		= ПолучитьКонстанту("param_service_id") ;
		//Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_api_key 		= ПолучитьКонстанту("param_api_key") ;
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_intiator_login 	= ПолучитьКонстанту("param_intiator_login"); // ! логин ветврача ИЛИ др. пользователя в Меркурии
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_vetdoctor_login = ПолучитьКонстанту("param_vetdoctor_login");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_vetdoctor_fio 	= ПолучитьКонстанту("param_vetdoctor_fio");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.param_vetdoctor_post 	= ПолучитьКонстанту("param_vetdoctor_post");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Отправитель_ХозСубъект = ПолучитьКонстанту("Отправитель_ХозСубъект");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Отправитель_Площадка 	= ПолучитьКонстанту("Отправитель_Площадка");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Страна 				= ПолучитьКонстанту("Страна");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Регион 				= ПолучитьКонстанту("Регион");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Город 				= ПолучитьКонстанту("Город");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.ВСД_Экспертиза 		= ПолучитьКонстанту("ВСД_Экспертиза");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.ВСД_Местность 		= ПолучитьКонстанту("ВСД_Местность");
		Исключение
		КонецПопытки;
		Попытка
			КонтекстФормы.ВСД_ОсобыеОтметки 	= ПолучитьКонстанту("ВСД_ОсобыеОтметки");
		Исключение КонецПопытки;

		Попытка 
			КонтекстФормы.КаталогМодуля 		= ПолучитьКонстанту("КаталогМодуля");
		Исключение
		КонецПопытки;

		Попытка
			КонтекстФормы.КаталогЛогов 			= ПолучитьКонстанту("КаталогЛогов");
		Исключение
		КонецПопытки;
		Попытка
			КонтекстФормы.ПаузаСек 				= ПолучитьКонстанту("ПаузаСек");
		Исключение
		КонецПопытки;
		Попытка
			КонтекстФормы.НазваниеРеквизитаГрузополучатель  = ПолучитьКонстанту("НазваниеРеквизитаГрузополучатель");
		Исключение КонецПопытки;

		Попытка
			КонтекстФормы.ОтладкаЗапросовXML  	= ПолучитьКонстанту("ОтладкаЗапросовXML");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.Перевозчик_ХозСубъект = ПолучитьКонстанту("Перевозчик_ХозСубъект");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.ПропускатьПустыеСвойства = ПолучитьКонстанту("ПропускатьПустыеСвойства");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.НазваниеВидаДокументаРеализация = ПолучитьКонстанту("НазваниеВидаДокументаРеализация");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.НазваниеРеквизитаКоличество = ПолучитьКонстанту("НазваниеРеквизитаКоличество");
		Исключение КонецПопытки;
		Попытка
			КонтекстФормы.НазваниеРеквизитаКоличествоМест  = ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест");
		Исключение КонецПопытки;

		Попытка
			КонтекстФормы.НазваниеРеквизитаНоменклатура = ПолучитьКонстанту("НазваниеРеквизитаНоменклатура");
		Исключение КонецПопытки;

		Попытка
			КонтекстФормы.ОчищатьСправочникВСД_Партии = ПолучитьКонстанту("ОчищатьСправочникВСД_Партии");
		Исключение
		КонецПопытки;

		Попытка
			КонтекстФормы.ТестовыйРежим = ПолучитьКонстанту("ТестовыйРежим");
		Исключение
		КонецПопытки;

		//Попытка КонтекстФормы.КаталогБиблиотек = ПолучитьКонстанту("КаталогБиблиотек"); Исключение КонецПопытки;

		Попытка КонтекстФормы.Цель = ПолучитьКонстанту("Цель"); Исключение КонецПопытки;

		//ФормаВСД = ПолучитьКонстанту("ФормаВСД");
		//Попытка КонтекстФормы.спФормаВСД.ТекущаяСтрока( КонтекстФормы.спФормаВСД.НайтиЗначение(ФормаВСД) ); Исключение КонецПопытки;

//		ТермУсловияПеревозки = ПолучитьКонстанту("ТермУсловияПеревозки");
//		Попытка КонтекстФормы.спТермическиеУсловияПеревозки.ТекущаяСтрока( ТермУсловияПеревозки ); Исключение КонецПопытки;
		Попытка КонтекстФормы.ТермУсловияПеревозки = ПолучитьКонстанту("ТермУсловияПеревозки"); Исключение КонецПопытки;
		Попытка КонтекстФормы.ДобавлятьУпаковки = ПолучитьКонстанту("ДобавлятьУпаковки"); Исключение КонецПопытки;

		Попытка КонтекстФормы.Поставщик_Площадка = ПолучитьКонстанту("Поставщик_Площадка"); Исключение КонецПопытки;
		Попытка КонтекстФормы.Поставщик_ХозСубъект = ПолучитьКонстанту("Поставщик_ХозСубъект"); Исключение КонецПопытки;
		Попытка КонтекстФормы.Поставщик_Фирма = ПолучитьКонстанту("Поставщик_Фирма"); Исключение КонецПопытки;
		Попытка КонтекстФормы.ВСД_РезультатыИсследований = ПолучитьКонстанту("ВСД_РезультатыИсследований"); Исключение КонецПопытки;

		ПарамКолонкаСортировкиПартииСписания = СокрЛП(ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания"));
		Попытка КонтекстФормы.спКолонкаСортировкиПартииСписания.ТекущаяСтрока( КолонкаСортировкиПартииСписания.НайтиЗначение(ПарамКолонкаСортировкиПартииСписания)); Исключение КонецПопытки;

		Попытка КонтекстФормы.ПарамЗнакСортировкиУбывание = ПолучитьКонстанту("ПарамЗнакСортировкиУбывание"); Исключение КонецПопытки;
		Попытка КонтекстФормы.ПарамЗаполнятьВСДБезПартий = ПолучитьКонстанту("ПарамЗаполнятьВСДБезПартий"); Исключение КонецПопытки;
			
		Попытка КонтекстФормы.ЗагружатьТолькоНеПустыеПартии = ПолучитьКонстанту("ЗагружатьТолькоНеПустыеПартии"); Исключение КонецПопытки;
		
		Попытка КонтекстФормы.ПарамВидСвязанногоДокумента = ПолучитьКонстанту("ПарамВидСвязанногоДокумента"); Исключение КонецПопытки;
		Попытка КонтекстФормы.ПарамНомерСвязанногоДокумента = ПолучитьКонстанту("ПарамНомерСвязанногоДокумента"); Исключение КонецПопытки;
		Попытка КонтекстФормы.ПарамДатаСвязанногоДокумента = ПолучитьКонстанту("ПарамДатаСвязанногоДокумента"); Исключение КонецПопытки;
		
		Попытка
			Если ПустоеЗначение(КонтекстФормы.ВыбФирма) = 1 Тогда
				КонтекстФормы.ВыбФирма = ПолучитьФирмуПоХС(КонтекстФормы.Отправитель_Хозсубъект);
			КонецЕсли;
		Исключение КонецПопытки;

		Попытка
			КонтекстФормы.НазваниеВидаСправочникаФирмы  = ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецФункции


Функция СохранитьПараметры() Экспорт
		//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СохранитьПараметры");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СохранитьПараметры(ПараметрыФирм);
	КонецЕсли;
	//}

	//стандартное поведение функции
//	ПараметрыФирм = _ПараметрыФирм;  //перезапишем список фирм

	ИмяФайла = ИмяФайлаНастроек();
	ЗначениеВФайл(ИмяФайла,ПараметрыФирм);
	Сообщить("Настройки сохранены в "+ИмяФайла,"i");
КонецФункции

Функция Пауза(СвоеЗначение=0) Экспорт
    //{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
    ОбъектВыполнения = ПроверитьПереопределениеФункции("Пауза");
    Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
        Возврат ОбъектВыполнения.Пауза( СвоеЗначение );
    КонецЕсли;
    //}

    //стандартное поведение функции
    Если СвоеЗначение = 0 Тогда
        ЗадержкаСекунд = ПолучитьКонстанту("ПаузаСек");
    Иначе
        ЗадержкаСекунд = СвоеЗначение; //[+]serpent, 29.08.2019
    КонецЕсли;

    Состояние("Пауза "+ЗадержкаСекунд+" сек");

    //стандартное поведение функции
    Компонента.Pause(ЗадержкаСекунд*1000); // в ms
КонецФункции

Процедура ИнициализацияКомпоненты(ВыбФирма="") Экспорт

	Если ( ПустоеЗначение(ВыбФирма)=0 ) И ( ТекущаяИнициализированнаяФирма = ВыбФирма ) Тогда
		Возврат;
	КонецЕсли;

	Состояние("Инициализация компоненты, подключение к ВЕТИС");

	ПолучитьСписокКонстант( ВыбФирма );

	ИнициализацияПодключенияВетис();
	
	Попытка
		
		Опции = Компонента.GetOptions();
	
		Опции.USERNAME 			= ПолучитьКонстанту("param_username");
	    Опции.PASSWORD 			= ПолучитьКонстанту("param_password");
	    Опции.ISSUER_ID 		= ПолучитьКонстанту("param_issuer_id");
	    //Опции.SERVICE_ID 		= ПолучитьКонстанту("param_service_id");
		Опции.SERVICE_ID		= "mercury-g2b.service";
	    Опции.API_KEY 			= ПолучитьКонстанту("param_api_key");
	    Опции.INITIATOR_LOGIN 	= ПолучитьКонстанту("param_intiator_login");
	    Опции.VETDOCTOR_LOGIN 	= ПолучитьКонстанту("param_vetdoctor_login");
		Опции.LogsDir 			= ПолучитьКонстанту("КаталогЛогов");
		Опции.VETDOCTOR_FIO 	= ПолучитьКонстанту("param_vetdoctor_fio");
		Опции.VETDOCTOR_POST 	= ПолучитьКонстанту("param_vetdoctor_post");
	
		Если ПолучитьКонстанту("proxy_enable")="1" Тогда
			Опции.PROXY_ENABLE 		= Компонента.TRUE();
			Опции.PROXY_URL 		= ПолучитьКонстанту("proxy_url");
			Опции.PROXY_PORT 		= ПолучитьКонстанту("proxy_port");
			Опции.PROXY_USERNAME 	= ПолучитьКонстанту("proxy_username");
			Опции.PROXY_PASSWORD 	= ПолучитьКонстанту("proxy_password");
		КонецЕсли;
	
		Если ПолучитьКонстанту("ОтладкаЗапросовXML")=1 Тогда
			Опции.DEBUG = Компонента.TRUE(); // запросы И ответы записываются в XML файлы в папке LogsDir
		Иначе
			Опции.DEBUG = Компонента.FALSE(); // запросы И ответы НЕ записываются
		КонецЕсли;
		//отправка статистики в Google Analitycs
		Опции.SEND_STAT = Компонента.TRUE();
		//Опции.SEND_STAT = Компонента.FALSE();
	
		//выводить ошибки в диалоговом окне
		//все ошибки И предупреждения записываются в SoapDll.log
		Опции.SILENT = Компонента.FALSE(); // = По умолчанию, ошибки выводятся диалоговом окне
		//Опции.SILENT = Компонента.TRUE(); // ошибки НЕ выводятся диалоговом окне
	
		Компонента.Init(Опции);
	
		ТекущаяИнициализированнаяФирма = ВыбФирма;
		
	Исключение
		Сообщить("Компонента не установлена. ","!")
	КонецПопытки;
	
	Состояние("");
КонецПроцедуры

Функция СохранитьЗапросВДокументе( док, applicationId ) Экспорт
	
	Если ( ПустоеЗначение(док)=0 ) Тогда 
		Если (ТипЗначенияСтр(док) = "Документ") Тогда
			ДокОб = СоздатьОбъект("Документ");
			ДокОб.НайтиДокумент(док);
		Иначе
			ДокОб = СоздатьОбъект("Справочник.ВСД_Док");
			ДокОб.НайтиЭлемент(док);
		КонецЕсли;
	
		ДокОб.applicationId = applicationId;
		ДокОб.Статус = Компонента.Status;
		ДокОб.ИмяФайлаЗапрос = Компонента.LogFilenameRequest;
		Попытка ДокОб.Комментарий = ""; Исключение КонецПопытки;
		ДокОб.Записать();		
	КонецЕсли;
	
КонецФункции

Функция СохранитьОтветВДокументе(док, СтатусВСД="", applicationId="") Экспорт
	Если (ПустоеЗначение(док)=0) Тогда 
		Если (ТипЗначенияСтр(док) = "Документ") Тогда	
			ДокОб = СоздатьОбъект("Документ");
			ДокОб.НайтиДокумент(док);
		Иначе
			ДокОб = СоздатьОбъект("Справочник.ВСД_Док");
			ДокОб.НайтиЭлемент(док);
		КонецЕсли;
	
		Если ПустоеЗначение(СтатусВСД)=0 Тогда 
			ДокОб.СтатусВСД = СтатусВСД;
		КонецЕсли;
		
		Если ПустоеЗначение(applicationId)=0 Тогда			
			ДокОб.applicationId = applicationId;
		КонецЕсли;
		ДокОб.ИмяФайлаОтвет = Компонента.LogFilenameResponse;
		ДокОб.Статус = Компонента.Status; // = Статус ЗАПРОСА 
		ДокОб.Записать();
	Иначе 
		СообщитьОбОшибке("Пустое значение док при сохранении ответа Ветис "+Док, док);
	КонецЕсли;
КонецФункции

// *********************
Функция ПолучитьХСПоФирме(ВыбФирма) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьХСПоФирме");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьХСПоФирме(ВыбФирма);
	КонецЕсли;
	//}
	
	
	Рез = "";
	ВремСзПФ = СоздатьОбъект("СписокЗначений");
	ПараметрыФирм.Выгрузить(ВремСзПФ);
	ВремПараметры = ВремСзПФ.Получить(ЗначениеВСтрокуВнутр(ВыбФирма));
	Если ПустоеЗначение(ВремПараметры) = 0 Тогда
		Рез = ВремПараметры.Получить("Отправитель_ХозСубъект");
	КонецЕсли;
    Возврат Рез;
КонецФункции

Функция ПолучитьФирмуПоХС(ВыбХС) Экспорт
	Рез = "";
	ВремСзПФ = СоздатьОбъект("СписокЗначений");
	ПараметрыФирм.Выгрузить(ВремСзПФ);
	к = 0;
	Для к = 1 По ВремСзПФ.РазмерСписка() Цикл
		стр = "";
		ВремПараметры = ВремСзПФ.ПолучитьЗначение(к,стр);
		Если ВремПараметры.Получить("Отправитель_ХозСубъект") = ВыбХС Тогда
			Рез = ЗначениеИзСтрокиВнутр(стр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
    Возврат Рез;
КонецФункции

//======================================================================
Функция ПолучитьФирмуИзКонтекста(КонтекстДокумента) Экспорт
	ВыбФирма = "";

	НазваниеВидаСправочникаФирмы = ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");
	Если ПустоеЗначение(НазваниеВидаСправочникаФирмы)=1 Тогда
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию") = 1 Тогда 
				Сообщить("Не заполнено Название Вида Справочника Фирмы","!");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Метаданные.Справочник(НазваниеВидаСправочникаФирмы).Выбран() = 1 Тогда
			ФирмаИмяРеквизита = "";

			_ТипОбъекта = ТипЗначенияСтр(КонтекстДокумента);
			Если _ТипОбъекта = "ГрупповойКонтекст" Тогда
				РасширениеФормы=СоздатьОбъект("РасширениеФормы");
				РасширениеФормы.УстановитьФорму(КонтекстДокумента.Форма);
				_ТипОбъекта = РасширениеФормы.ТипОбъекта();
			КонецЕсли;

			Если _ТипОбъекта = "ВнешнийОтчет" Тогда
				Попытка ВыбФирма = КонтекстДокумента.ВыбФирма; Исключение КонецПопытки;
			ИначеЕсли ( _ТипОбъекта = "Документ" ) Тогда
				ПолучитьИмяРеквизитаФирма(КонтекстДокумента.Вид(), ФирмаИмяРеквизита);
				Если ФирмаИмяРеквизита = "" Тогда
					Попытка 
						ВыбФирма = КонтекстДокумента.ВыбФирма;
					Исключение
						// Нет общего реквизита Фирма, в наших документах можно получить из ХС
						ВыбХС = "";
						ВидДок = КонтекстДокумента.Вид();
						Если глЕстьРеквизитШапки("Отправитель_ХозСубъект", ВидДок) = 1 Тогда
							ВыбХС = КонтекстДокумента.Отправитель_ХозСубъект;
						ИначеЕсли глЕстьРеквизитШапки("Производитель_ХозСубъект", ВидДок) = 1  Тогда
							ВыбХС = КонтекстДокумента.Производитель_ХозСубъект;
						ИначеЕсли глЕстьРеквизитШапки("Владелец_ХозСубъект", ВидДок) = 1  Тогда
							ВыбХС = КонтекстДокумента.Владелец_ХозСубъект;
						ИначеЕсли глЕстьРеквизитШапки("Владелец_ХозСубъект", ВидДок) = 1  Тогда
							ВыбХС = КонтекстДокумента.Владелец_ХозСубъект;
						КонецЕсли;
						Если ВыбХС <> "" Тогда
							ВыбФирма = ПолучитьФирмуПоХС(ВыбХС);
						КонецЕсли;
					КонецПопытки;
				Иначе
					ВыбФирма = КонтекстДокумента.ПолучитьАтрибут(ФирмаИмяРеквизита);
				КонецЕсли;
			ИначеЕсли ( _ТипОбъекта = "Справочник" ) Тогда
				ФирмаИмяРеквизита = "Фирма"; // для ВСД_Док
				Попытка						
					ВыбФирма = КонтекстДокумента.ПолучитьАтрибут(ФирмаИмяРеквизита);
				Исключение
					// Нет реквизита Фирма				
					ВыбФирма=ТекущаяИнициализированнаяФирма;
				КонецПопытки;						
				
			КонецЕсли;
		Иначе
			Попытка ВыбФирма = КонтекстДокумента.ВыбФирма; Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбФирма)=1 Тогда 
		ВыбФирма = ТекущаяФирма_ЗагруженыПараметры;
	КонецЕсли;
	
	Возврат ВыбФирма;
КонецФункции // ПолучитьФирмуИзКонтекста

// ================== ВСД отправка ===================

Функция Получить_ApplicationID(LogFilename) Экспорт

	Попытка

	    objDom=СоздатьОбъект("MSXML2.DOMDocument");
	    objDom.load(LogFilename);

	    item = objDom.selectSingleNode("//application") ;

		applicationId = item.selectSingleNode("applicationId").text;
		st = item.selectSingleNode("status").text;

		Сообщить("Ответ: ["+applicationId+"] ["+st+"]");
	Исключение
		applicationId= Компонента.applicationId;
	КонецПопытки;

	Возврат applicationId;
КонецФункции

Функция  ОтправитьЗапросSoap( ЗапросXML, метод ) Экспорт

	appID = Компонента.GUID();
	Сообщить("Отправляем запрос "+appID ,"i");
	результат = Компонента.SendRequestSoap(метод, ЗапросXML, appID);

	appID = Получить_ApplicationID(Компонента.LogFilename);

	Возврат appID;

КонецФункции


//======= ФУНКЦИИ ПО ПОИСКУ ИНФОРМАЦММ ==============

Функция НайтиЕдИзмерения(guid, uuid="")	Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиЕдИзмерения");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиЕдИзмерения(guid, uuid);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Рез="";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ЕдиницыИзмерения");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения GUID ["+guid+"] добавлена");
			//создать
			Спр.Новый();
			//Спр.Код = ;
			//Спр.Наименование = Название;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(Рез)=1 Тогда
		Сообщить("Единица измерения не определена ["+guid+"]","!");
	КонецЕсли;

	Возврат Рез;

КонецФункции

Функция НайтиПродукцию(guid) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПродукцию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПродукцию(guid);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Рез = "";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Продукция");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_Продукция GUID ["+guid+"] не найдена. Выполните загрузку справочника Продукция");
			//создать
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = Guid;
			Спр.GUID = guid;
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid продукции");
	КонецЕсли;

	Возврат рез;
КонецФункции



//Функция Найти_Продукция_Элемент2(productItemName, productItemGuid, ВСД_Продукция, ВСД_ВидПродукции) Экспорт
Функция Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Найти_Продукция_Элемент2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Попытка
		productItemName = productItem.selectSingleNode("*[local-name()='name']").text;
	Исключение
		//Сообщить("Не удалось получить элемент [productItem]","!");
		productItemName = "";
	КонецПопытки;
		
	Попытка
		productItemGuid = productItem.selectSingleNode("bs:guid").text;
	Исключение
		productItemGuid="";
	КонецПопытки;

	Попытка
		productItemUuid = productItem.selectSingleNode("bs:uuid").text;
	Исключение
		productItemUuid="";
	КонецПопытки;
	
	Рез = "";
	Спр = СоздатьОбъект("Справочник.ВСД_Продукция_Элемент");

	// в справочнике ограничение на длину Наименования = 100 симвовлов
	productItemName = Лев(productItemName, 100);	
	productItemName = СтрЗаменить( productItemName, "'", "''");

	Если ЭтоSQL=1 Тогда

		ТекстЗапроса = "
		|select
	    |   Элемент.id [id $Справочник.ВСД_Продукция_Элемент]
	    |from $Справочник.ВСД_Продукция_Элемент as Элемент (NOLOCK)
	  	|where
	  	|";
	  	Если ПустоеЗначение(productItemGuid)=0 Тогда
	  		ТекстЗапроса=ТекстЗапроса+"
		  	|	$Элемент.GUID= :productItemGuid
		  	|";
		Иначе
	  		ТекстЗапроса=ТекстЗапроса+"
		  	|	$Элемент.GUID = '' AND
		  	|	Элемент.descr = :productItemName
		  	|";
		КонецЕсли;
		RS.УстановитьТекстовыйПараметр("productItemGuid", productItemGuid);
		RS.УстановитьТекстовыйПараметр("productItemName", productItemName);

		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			RS.Отладка(1);
		КонецЕсли;
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе

		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   Элемент.id [id $Справочник.ВСД_Продукция_Элемент]
	    |from [Справочник.ВСД_Продукция_Элемент] as Элемент
	  	|where
	  	|";
	  	Если ПустоеЗначение(productItemGuid)=0 Тогда
	  		ТекстЗапроса=ТекстЗапроса+"
		  	|	Элемент.GUID= :productItemGuid
		  	|";
		Иначе
	  		ТекстЗапроса=ТекстЗапроса+"
		  	|	Элемент.GUID = '' AND
		  	|	Элемент.descr = :productItemName
		  	|";

		КонецЕсли;
		Запрос.Подставлять("productItemGuid", productItemGuid);
		Запрос.Подставлять("productItemName", productItemName);
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Запрос.Отладка(1);
		КонецЕсли;		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	Если ПустоеЗначение(тз)=1 Тогда
		//создать
		Спр.Новый();
		Если ПустоеЗначение(productItemName)=0 Тогда 
			Спр.Наименование = productItemName;
		Иначе
			Спр.Наименование = productItemGuid;
		КонецЕсли;
		Спр.GUID = productItemGuid;
		Спр.Uuid = productItemUuid;
		Спр.Продукция = ВСД_Продукция;
		Спр.ВидПродукции = ВСД_ВидПродукции;
		Спр.ТермическоеСостояние = СписокКонстант.Получить("ТермУсловияПеревозки");//1;
		Спр.Записать();

		Если ПустоеЗначение(productItemGuid)=0 Тогда				
			//получим наименование И все остальные реквизиты
			ГМ2.Получить_Инфо_Продукции(Спр.ТекущийЭлемент())
		КонецЕсли;
	Иначе
		Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,1));
		//Спр.СделатьНеПроведенным();
		Спр.СнятьПометкуУдаления();
	КонецЕсли;
	рез = Спр.ТекущийЭлемент();

	Возврат рез;
КонецФункции

Функция НайтиВидПродукции(guid) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВидПродукции");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВидПродукции(guid);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Рез = "";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ВидПродукции");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ВидПродукции GUID ["+guid+"] не найдена. Выполните инициализацию", "!");
			//создать
			//Спр.Новый();
			////Спр.Код = ;
			//Спр.Наименование = Guid;
			//Спр.GUID = guid;
			//Спр.Записать();

		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid Вида продукции");
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция НайтиСтрануПоGUID(GUID, name) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиСтрануПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиСтрануПоGUID(GUID, name);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Результат = "";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Страна");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда
			Результат = Спр.ТекущийЭлемент();
		Иначе
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Спр.Записать();
			Сообщить("Создан ВСД_Страна "+GUID);
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Страна");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция Справочник_НайтиПоGUID( ВидСправочника, GUID, name="", Родитель="") Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Справочник_НайтиПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Справочник_НайтиПоGUID(GUID, name);
	КонецЕсли;
	//}
	
	Результат = "";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник."+ВидСправочника);
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда
			Результат = Спр.ТекущийЭлемент();
			Спр.СнятьПометкуУдаления(); //!! снятие пометки на удаление активных 
		//ИначеЕсли ПустоеЗначение(Родитель)=0 Тогда 
		Иначе
			НачатьТранзакцию(); // Ускоримся
			Спр.Новый();
			Спр.GUID = GUID;
			Спр.Наименование = name;
			Если ПустоеЗначение(Родитель)=0 Тогда				
				Спр.ParentGUID = Родитель.GUID;
			КонецЕсли;
			Спр.Записать();
			ЗафиксироватьТранзакцию();
			Сообщить("Создан "+Спр.Вид()+" - "+GUID+" - "+name);
			Результат = Спр.ТекущийЭлемент();
			
		//Иначе 
		//	Сообщить(ВидСправочника+" не найден, выполните инициализацию ");
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid "+ВидСправочника);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция НайтиХозСубъект(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиХозСубъект");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиХозСубъект(ВыбКлиент);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Попытка
		Если ПустоеЗначение(ВыбКлиент.Плательщик) = 0 Тогда
			ВыбКлиент = ВыбКлиент.Плательщик;
		КонецЕсли;
	Исключение
	КонецПопытки;


	Если ЭтоSQL=1 Тогда

		ТекстЗапроса = "select
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	$СпрХС.GUID,
		|	$СпрХС.Контрагент
		|from $Справочник.ВСД_ХозСубъект as СпрХС (NOLOCK)
		|where
		|	$СпрХС.Контрагент=:ВыбКлиент
		|";
		RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			RS.Отладка(1);
		КонецЕсли;
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);

	Иначе

		Запрос = базаДанных.НовыйЗапрос();

		ТекстЗапроса = "select
		|	СпрХС.ID [id $Справочник.ВСД_ХозСубъект],
		|	СпрХС.descr,
		|	СпрХС.GUID,
		|	СпрХС.Контрагент
		|from [Справочник.ВСД_ХозСубъект] as СпрХС
		|where
		|	СпрХС.Контрагент=:ВыбКлиент
		|";

		Запрос.Подставлять("ВыбКлиент", ВыбКлиент);

		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			Запрос.Отладка(1);
		КонецЕсли;		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;

	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	Иначе
		СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		СпрХС.Новый();
		СпрХС.Наименование = ВыбКлиент.Наименование;
		СпрХС.Контрагент = ВыбКлиент;
		СпрХС.Записать();
		Сообщить("Создан новый элемент справочника ВСД_ХозСубъект: "+ВыбКлиент);

		результат = спрХС.ТекущийЭлемент();
	КонецЕсли;

	Возврат результат;
КонецФункции

Функция НайтиПартиюПоGUID(GUID) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПартиюПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПартиюПоGUID(GUID);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Спр = СоздатьОбъект("Справочник.ВСД_Партия");
	Если ЭтоSQL=1 Тогда

		ТекстЗапроса = "
		|select
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from $Справочник.ВСД_Партия as Партия (NOLOCK)
	  	|where
	  	|	$Партия.GUID= :GUID
	  	|";
		RS.УстановитьТекстовыйПараметр("GUID", GUID);
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			RS.Отладка(1);
		КонецЕсли;
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе

		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   Партия.id [id $Справочник.ВСД_Партия]
	    |from [Справочник.ВСД_Партия] as Партия
	  	|where
	  	|	Партия.GUID= :GUID
	  	|";
		Запрос.Подставлять("GUID", GUID);
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			Запрос.Отладка(1);
		КонецЕсли;		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	Если ПустоеЗначение(тз)=1 Тогда
		Спр.Новый();
		//Док.ДокОснование = ДокОснование;
	Иначе
		Спр.НайтиЭлемент(тз.ПолучитьЗначение(1,1));
		//Спр.СделатьНеПроведенным();
		Спр.СнятьПометкуУдаления();
	КонецЕсли;

	Возврат  Спр;
КонецФункции

Функция НайтиВСДпоUUID( uuid )
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВСДпоUUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВСДпоUUID( uuid );
	КонецЕсли;
	//}

	//стандартное поведение функции

	Если ПустоеЗначение(UUID)=1 Тогда
		Возврат "";
	КонецЕсли;

	ВидДокумента = "ВСД";

	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ЭтоSQL=1 Тогда

		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД (NOLOCK)
	  	|where
	  	|	( $ДокВСД.UUID = :uuid)
	  	|";
		RS.УстановитьТекстовыйПараметр("uuid", uuid);
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			RS.Отладка(1);
		КонецЕсли;
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД
	  	|where
	  	|	( ДокВСД.UUID = :uuid)
	  	|";
		Запрос.Подставлять("uuid", uuid);
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			Запрос.Отладка(1);
		КонецЕсли;		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	//Возврат тз;
	Док = СоздатьОбъект("Документ."+ВидДокумента);
	Если ПустоеЗначение(тз)=1 Тогда
		Док.Новый();
		//Док.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+Док.НомерДок);
	Иначе
		Док.НайтиДокумент(тз.ПолучитьЗначение(1,1));
		Док.СделатьНеПроведенным();
		Док.СнятьПометкуУдаления();

		Состояние("Найден "+Док.ТекущийДокумент());
	КонецЕсли;

	Возврат Док;
КонецФункции

Функция НайтиВСДпоApplicationId(applicationId, ВидДокумента)
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиВСДпоApplicationId");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиВСДпоApplicationId(applicationId, ВидДокумента);
	КонецЕсли;
	//}

	//стандартное поведение функции
	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ЭтоSQL=1 Тогда

		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from $Документ."+ВидДокумента+" as ДокВСД (NOLOCK)
	  	|where
	  	|($ДокВСД.applicationId = :applicationId)
	  	|";
		RS.УстановитьТекстовыйПараметр("applicationId", applicationId);
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			RS.Отладка(1);
		КонецЕсли;
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе

		Запрос = базаДанных.НовыйЗапрос();
		ТекстЗапроса = "
		|select
	    |   ДокВСД.iddoc [id $Документ."+ВидДокумента+"]
	    |from [Документ."+ВидДокумента+"] as ДокВСД
	  	|where
	  	|	(ДокВСД.applicationId= :applicationId)
	  	|";
		Запрос.Подставлять("applicationId", applicationId);
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			Запрос.Отладка(1);
		КонецЕсли;		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;

	Возврат тз;
КонецФункции

//{ ******************  ХозСубъекты **************************

Функция ХозСубъект_ЗаполнитьПоXML( СпрОбъект, businessEntity)
	//СпрОбъект = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	
	Попытка
		name = businessEntity.selectSingleNode("*[local-name() = 'name']").text;
	Исключение
        Попытка //[+]serpent, 12.04.2019
			name = businessEntity.selectSingleNode("*[local-name() = 'fullName']").text;
        Исключение
            Попытка
                name = businessEntity.selectSingleNode("*[local-name() = 'fio']").text;
            Исключение
                name = "";
            КонецПопытки;
        КонецПопытки;
	КонецПопытки;
	
	active = businessEntity.selectSingleNode("*[local-name() = 'active']").text;
	Если Врег(active)="TRUE" Тогда  
		СпрОбъект.active =1;
	Иначе 
		СпрОбъект.active =0;
	КонецЕсли;
	СпрОбъект.ИНН =  businessEntity.selectSingleNode("*[local-name() = 'inn']").text;
	Попытка СпрОбъект.КПП = businessEntity.selectSingleNode("*[local-name() = 'kpp']").text; Исключение   КПП=""; 	КонецПопытки;
	Попытка СпрОбъект.ОГРН = businessEntity.selectSingleNode("*[local-name() = 'ogrn']").text; Исключение   ОГРН=""; 	КонецПопытки;
    СпрОбъект.Адрес = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'addressView']").text;
    Попытка 
		СтранаGUID = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'country']").selectSingleNode("*[local-name() = 'guid']").text;
		СтранаName = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'country']").selectSingleNode("*[local-name() = 'name']").text;
		СпрОбъект.Страна = НайтиСтрануПоGUID( СтранаGUID, СтранаName );
	Исключение
	КонецПопытки;
    Попытка 
		regionGUID = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'region']").selectSingleNode("*[local-name() = 'guid']").text;
		regionName = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'region']").selectSingleNode("*[local-name() = 'name']").text;
		СпрОбъект.Регион = Справочник_НайтиПоGUID( "ВСД_Регион", regionGUID, regionName, СпрОбъект.Страна );
	Исключение
	КонецПопытки;
    Попытка 
		districtGUID = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'district']").selectSingleNode("*[local-name() = 'guid']").text;
		districtName = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'district']").selectSingleNode("*[local-name() = 'name']").text;
		СпрОбъект.Район = Справочник_НайтиПоGUID( "ВСД_Район", districtGUID, districtName, СпрОбъект.Регион );
	Исключение
	КонецПопытки;
    Попытка 
		localityGUID = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'locality']").selectSingleNode("*[local-name() = 'guid']").text;
		localityName = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'locality']").selectSingleNode("*[local-name() = 'name']").text;
		СпрОбъект.Город = Справочник_НайтиПоGUID( "ВСД_Город", localityGUID, localityName, СпрОбъект.Регион );
	Исключение
	КонецПопытки;
    Попытка 
		streetGUID = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'street']").selectSingleNode("*[local-name() = 'guid']").text;
		streetName = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'street']").selectSingleNode("*[local-name() = 'name']").text;
		СпрОбъект.Улица = Справочник_НайтиПоGUID( "ВСД_Улица", streetGUID, streetName, СпрОбъект.Город );
	Исключение
	КонецПопытки;
    Попытка 
		СпрОбъект.Дом = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'house']").text;
	Исключение
	КонецПопытки;
    Попытка 
		СпрОбъект.Строение = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'building']").text;
	Исключение
	КонецПопытки;
    Попытка 
		СпрОбъект.Помещение = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'room']").text;
	Исключение
	КонецПопытки;
	
	СпрОбъект.Наименование = name;
	СпрОбъект.GUID = businessEntity.selectSingleNode("*[local-name() = 'guid']").text;
	СпрОбъект.UUID = businessEntity.selectSingleNode("*[local-name() = 'uuid']").text;

	УдалитьXML( Компонента.LogFilename);

	// Ищем контрагента
	Если ПустоеЗначение(СпрОбъект.Контрагент)=1 Тогда		
		СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
		ТекстВопроса = "Выберите контрагента для "+ СпрОбъект.ИНН+" "+ СпрОбъект.Наименование +" "+СпрОбъект.Адрес;
		Сообщить(ТекстВопроса);
		Если СпрКонтрагенты.Выбрать(ТекстВопроса,)=1 Тогда
			СпрОбъект.Контрагент = СпрКонтрагенты.ТекущийЭлемент();
		КонецЕсли;	    
	КонецЕсли;
	
	Если ПустоеЗначение(СпрОбъект.Контрагент)=0 Тогда
		СпрОбъект.Записать();
		Сообщить("Записан ВСД_Хозсубъект ["+СпрОбъект+"] GUID = "+ СпрОбъект.Guid+" Адрес: "+СпрОбъект.Адрес);
		Возврат СпрОбъект.ТекущийЭлемент();
	Иначе
		СпрОбъект.Записать();
		Сообщить("Не выбран контрагент для ХозСубъекта "+ СпрОбъект.ИНН+" "+ СпрОбъект.Наименование +" "+СпрОбъект.Адрес );
		//Сообщить("ХозСубъект не записан","!");
		Возврат СпрОбъект.ТекущийЭлемент();
	КонецЕсли;
	
КонецФункции


Функция ХС_ПолучитьGuid(ВыбХозСубъект) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьGuidХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьGuidХС(ВыбХозСубъект);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ПустоеЗначение(ВыбХозСубъект.Контрагент)=0 Тогда 
		ИНН = ПолучитьИНН( ВыбХозСубъект.Контрагент);
	Иначе
		ИНН = СокрЛП( ВыбХозСубъект.ИНН);
	КонецЕсли;
	
	Если ПустоеЗначение(ИНН)=1 Тогда
		Сообщить("Неправильно указан ИНН","!");
		Возврат "ERROR";
	КонецЕсли;
	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]","i");
	Результат = ГМ2.Загрузить_ХС_по_ИНН( ИНН );

  	Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );	
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

	СпрОбъект = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	СпрОбъект.НайтиЭлемент(ВыбХозСубъект);
	
	Попытка		
		businessEntity = objDom.selectSingleNode("//*[local-name() = 'businessEntity']");
		Результат = ХозСубъект_ЗаполнитьПоXML( СпрОбъект, businessEntity );
	Исключение
		Сообщить("ХозСубъект не найден По ИНН "+ИНН,"!");
	КонецПопытки;

	Возврат Результат;

КонецФункции


Функция ЗагрузитьХСПоGUID(GUID, ВыбХозСубъект="") Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьХСПоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьХСПоGUID(guid);
	КонецЕсли;
	//}

	Если ПустоеЗначение(GUID)=1 Тогда
		Сообщить("Пустой GUID для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;

	appID = ГМ2.ЗагрузитьХС( GUID );

	Если НайтиОшибки()>0 Тогда
		Возврат appID;
	КонецЕсли;

    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load( Компонента.LogFilenameResponse);
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|" );

	СпрОбъект = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
	Если ПустоеЗначение(ВыбХозСубъект)=0 Тогда
		СпрОбъект.НайтиЭлемент(ВыбХозСубъект);
	Иначе
		Если СпрОбъект.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
		
		Иначе
			СпрОбъект.Новый();
		КонецЕсли;
	КонецЕсли;			
		
	businessEntity = objDom.selectSingleNode("//*[local-name() = 'businessEntity']");

	Результат = ХозСубъект_ЗаполнитьПоXML( СпрОбъект, businessEntity );
	
	Возврат Результат;

КонецФункции

Функция НайтиХСпоGUID(Guid) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиХСпоGUID");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиХСпоGUID(guid);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Результат = "";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
		Если Спр.НайтиПоРеквизиту("Guid",Guid,1)=1 Тогда
			Результат = Спр.ТекущийЭлемент();
		Иначе
			//Сообщить("Guid "+Guid+" не найден, создайте ХС И выполните синхронизацию");
			Результат = ЗагрузитьХСПоGUID(Guid);
		КонецЕсли;
	Иначе
		//Сообщить("Пустой Guid ХозСубъекта");
	КонецЕсли;

	Возврат Результат;
КонецФункции
//}
//{ ******************  Площадки **************************

//Функция ЗагрузитьПлощадку(GUID) Экспорт
//
//	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадку");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ЗагрузитьПлощадку(guid);
//	КонецЕсли;
//	//}
//
//	Если ПустоеЗначение(GUID)=1 Тогда
//		Сообщить("Пустой GUID для поиска Площадки");
//		Возврат "REJECTED";
//	КонецЕсли;
//	ЗапросXML = "
//	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/enterprise/ws-definitions'
//	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' >
//	|<soapenv:Header/>
//	|<soapenv:Body>
//	|   <ws:getEnterpriseByGuidRequest>
//	|      <bs:guid>"+GUID+"</bs:guid>
//	|   </ws:getEnterpriseByGuidRequest>
//	|</soapenv:Body>
//	|</soapenv:Envelope>";
//
//
//	метод = Компонента.GetMethod();
//	метод.Service = "platform/cerberus/services/EnterpriseService";
//	метод.Action = "GetEnterpriseByGUID";
//
//	Сообщить(" Запрос GetEnterpriseByGUID [ "+СокрЛП(GUID)+" ]");
//
//	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
//
//	Возврат appID;
//КонецФункции

//Функция Площадка_ЗагрузитьПоGUID( ВыбПлощадка, GUID, ХС="", ИмяФайлаXML="") Экспорт
//	
//	Если ПустоеЗначение(ИмяФайлаXML)=1 Тогда 
//		Результат = ЗагрузитьПлощадку( СокрЛП(GUID) );
//		ИмяФайлаXML = Компонента.LogFilename;
//	КонецЕсли;
//
//    objDom=СоздатьОбъект("MSXML2.DOMDocument");
//    objDom.load( ИмяФайлаXML );
//
//	Если НайтиОшибки()>0 Тогда
//		Возврат Результат;
//	КонецЕсли;
//
//	СпрОбъект = СоздатьОбъект("Справочник.ВСД_Площадка");
//	СпрОбъект.НайтиЭлемент( ВыбПлощадка );
//
//	НачатьТранзакцию();
//	Попытка
//		
//		enterprise = objDom.selectSingleNode("//ent:enterprise") ;
//		
//		active = enterprise.selectSingleNode("bs:active").text;
//		Если Врег(active)="TRUE" Тогда  
//			СпрОбъект.active =1;
//			СпрОбъект.СнятьПометкуУдаления();
//		Иначе 
//			СпрОбъект.active =0;
//			СпрОбъект.Удалить(0);
//		КонецЕсли;
//	    СпрОбъект.Адрес = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:addressView").text;
//	    Попытка 
//			СтранаGUID = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:country").selectSingleNode("bs:guid").text;
//			СтранаName = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:country").selectSingleNode("ikar:name").text;
//			СпрОбъект.Страна = НайтиСтрануПоGUID( СтранаGUID, СтранаName );
//		Исключение
//		КонецПопытки;
//	    Попытка 
//			regionGUID = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:region").selectSingleNode("bs:guid").text;
//			regionName = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:region").selectSingleNode("ikar:name").text;
//			СпрОбъект.Регион = Справочник_НайтиПоGUID( "ВСД_Регион", regionGUID, regionName, СпрОбъект.Страна );
//		Исключение
//		КонецПопытки;
//	    Попытка 
//			districtGUID = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:district").selectSingleNode("bs:guid").text;
//			districtName = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:district").selectSingleNode("ikar:name").text;
//			СпрОбъект.Район = Справочник_НайтиПоGUID( "ВСД_Район", districtGUID, districtName, СпрОбъект.Регион );
//		Исключение
//		КонецПопытки;
//	    Попытка 
//			localityGUID = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:locality").selectSingleNode("bs:guid").text;
//			localityName = "";
//			СпрОбъект.Город = Справочник_НайтиПоGUID( "ВСД_Город", localityGUID, localityName, СпрОбъект.Регион );
//		Исключение
//		КонецПопытки;
//	    Попытка 
//			streetGUID = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:street").selectSingleNode("bs:guid").text;
//			streetName = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:street").selectSingleNode("ikar:name").text;
//			СпрОбъект.Улица = Справочник_НайтиПоGUID( "ВСД_Улица", streetGUID, streetName, СпрОбъект.Город );
//		Исключение
//		КонецПопытки;
//	    Попытка 
//			СпрОбъект.Дом = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:house").text;
//		Исключение
//		КонецПопытки;
//	    Попытка 
//			СпрОбъект.Строение = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:building").text;
//		Исключение
//		КонецПопытки;
//	    Попытка 
//			СпрОбъект.Помещение = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:room").text;
//		Исключение
//		КонецПопытки;
//		
//		СпрОбъект.Наименование = enterprise.selectSingleNode("ent:name").text;
//		СпрОбъект.GUID = enterprise.selectSingleNode("bs:guid").text;
//		СпрОбъект.UUID = enterprise.selectSingleNode("bs:uuid").text;
//	
//		УдалитьXML( Компонента.LogFilename);
//		
//		Если ПустоеЗначение(ХС)=0 Тогда			
//			СпрОбъект.GUIDХозСубъекта = ХС.GUID;			
//		Иначе						
//			Если ПустоеЗначение(ХС)=0 Тогда			
//				Сообщить("Не выбран ХозСубъект "+ СпрОбъект+" "+ СпрОбъект.Наименование +" "+СпрОбъект.Адрес );
//				//Сообщить("ХозСубъект не записан","!");			
//			КонецЕсли;
//		КонецЕсли;
//		Сообщить("Записан "+СпрОбъект.Вид()+" ["+СпрОбъект+"] GUID = "+ СпрОбъект.Guid+" Адрес: "+СпрОбъект.Адрес);					
//		СпрОбъект.Записать();
//		Результат = СпрОбъект.ТекущийЭлемент();
//		ЗафиксироватьТранзакцию();		
//		
//	Исключение
//		Сообщить("Площадка не найдена "+GUID,"!");
//		Сообщить(ОписаниеОшибки());
//	КонецПопытки;
//	
//	Возврат Результат;
//КонецФункции

//старая версия 
//Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="") Экспорт
//
//	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкуПоGUID");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ЗагрузитьПлощадкуПоGUID(GUID, ХС);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//
//	Результат = ЗагрузитьПлощадку( СокрЛП(GUID) );
//
//    objDom=СоздатьОбъект("MSXML2.DOMDocument");
//    objDom.load(Компонента.LogFilename);
//
//	Если НайтиОшибки()>0 Тогда
//		Возврат Результат;
//	КонецЕсли;
//
//	enterprise = objDom.selectSingleNode("//ent:enterprise") ;
//
//	guid = enterprise.selectSingleNode("bs:guid").text;
//	uuid = enterprise.selectSingleNode("bs:uuid").text;
//
//	//updateDate = unit.selectSingleNode("updateDate").text;
//	//createDate = unit.selectSingleNode("createDate").text;
//	name = enterprise.selectSingleNode("ent:name").text;
//	active = enterprise.selectSingleNode("bs:active").text;
//
//	address = enterprise.selectSingleNode("ent:address").selectSingleNode("ikar:addressView").text;
//
//	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
//	УровнейВСправочнике = Метаданные.Справочник("ВСД_Площадка").КоличествоУровней;
//	ВыбОбъект="";
//	
//	// не работает!!!
//	//Если Спр.ВыбратьЭлементыПоРеквизиту("GUID",Guid,0,0)=0 Тогда
//	//	Если (ХС<>"") Тогда
//	//		Если  (Сокрлп(спр.GuidХозСубъекта) = Сокрлп(ХС.GUID)) ИЛИ (Сокрлп(спр.GuidХозСубъекта) = "") Тогда
//	//			ВыбОбъект = Спр;
//	//		КонецЕсли;
//	//	Иначе
//	//		ВыбОбъект = Спр;
//	//	КонецЕсли;
//	//КонецЕсли;
//	
//	Если ЭтоSQL=1 Тогда
//
//		ТекстЗапроса = "select
//		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
//		|	СпрПл.descr,
//		|	$СпрПл.GUID,
//		|	$СпрПл.Контрагент
//		|from $Справочник.ВСД_Площадка as СпрПл (NOLOCK)
//		|where
//		|	$СпрПл.Guid=:GUID
//		|	%Отбор_по_Уровням%
//		|	%Отбор_по_ХС%
//		|";
//		RS.УстановитьТекстовыйПараметр("GUID", GUID);
//		Если УровнейВСправочнике = 1 Тогда
//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_Уровням%", "");
//		Иначе
//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_Уровням%", "AND СпрПл.isfolder=2");
//		КонецЕсли;
//		Если ПустоеЗначение(ХС)=0 Тогда
//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_ХС%", "AND RTRIM($СпрПл.GuidХозСубъекта)=:GuidХозСубъекта");
//			RS.УстановитьТекстовыйПараметр("GuidХозСубъекта", ХС.GUID);
//		Иначе
//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_ХС%", "");
//		КонецЕсли;
//		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
//			RS.Отладка(1);
//		КонецЕсли;
//		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
//
//	Иначе
//		Запрос = базаДанных.НовыйЗапрос();
//
//		ТекстЗапроса = "select
//		|	СпрПл.ID [id $Справочник.ВСД_Площадка],
//		|	СпрПл.descr,
//		|	СпрПл.GUID,
//		|	СпрПл.Контрагент
//		|from [Справочник.ВСД_Площадка] as СпрПл
//		|where
//		|	СпрПл.Guid=:GUID
//		|	%Отбор_по_ХС%
//		|	%Отбор_по_Уровням%
//		|";
//
//		Если УровнейВСправочнике = 1 Тогда
//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_Уровням%", "");
//		Иначе
//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_Уровням%", "AND СпрПл.isfolder=2");
//		КонецЕсли;
//
//		Если ПустоеЗначение(ХС)=0 Тогда
//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_ХС%", "AND RTRIM(СпрПл.GuidХозСубъекта)=:GuidХозСубъекта");
//			Запрос.Подставлять("GuidХозСубъекта", ХС.GUID);
//		Иначе
//			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Отбор_по_ХС%", "");
//		КонецЕсли;
//
//		Запрос.Подставлять("GUID", GUID);
//
//		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
//			Запрос.Отладка(1);
//		КонецЕсли;		
//		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
//		//ТЗ.ВыбратьСтроку();
//	КонецЕсли;
//
//	Тз.ВыбратьСтроки();
//	Пока ТЗ.ПолучитьСТроку()=1 Цикл
//		Спр.НайтиЭлемент(тз.id);
//		Спр.Наименование = name;
//		Спр.Адрес = address;
//		Спр.GUID = guid;
//		Спр.UUID = uuid;
//		Спр.Записать();
//		Если Спр.ПометкаУдаления() = 1 Тогда
//			Спр.СнятьПометкуУдаления();    
//		КонецЕсли;
//		ВыбОбъект = Спр;
//	КонецЦикла;
//	Если ВыбОбъект="" Тогда
//		Спр.Новый();
//		Спр.УстановитьНовыйКод("00");
//	КонецЕсли;
//
//	Спр.Наименование = name;
//	Спр.Адрес = address;
//	Спр.GUID = guid;
//	Спр.UUID = uuid;
//
//	Если (ПустоеЗначение(ХС)=1) И (ПустоеЗначение(Спр.GUIDХозСубъекта) = 1) Тогда
//		Сообщить("создана площадка ["+GUID+"] без указания ХозСубъекта ","!!");
//		//Возврат;
//	Иначе
//		Спр.GUIDХозСубъекта = ХС.GUID;
//	КонецЕсли;
//
//	спр.Записать();
//	
//	Площадка_ЗагрузитьПоGUID( спр.ТекущийЭлемент(), guid, ХС, Компонента.LogFilename);
//	
//	//Сообщить("Записан ВСД_Площадка ["+Спр.ТекущийЭлемент()+"] GUID = "+ Guid);
//
//	Возврат спр.ТекущийЭлемент();
//КонецФункции

Функция ПолучитьПлощадкиПоХС(ХС)
	Рез = СоздатьОбъект("СписокЗначений");
	СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");
	СпрПл.ВыбратьЭлементыПоРеквизиту("GuidХозСубъекта",СокрЛП(ХС.GUID),0,0);
	Пока СпрПл.ПолучитьЭлемент() = 1 Цикл
		Рез.ДобавитьЗначение(СпрПл.ТекущийЭлемент());    
	КонецЦикла;	
	Возврат рез;
КонецФункции

//Функция ЗагрузитьПлощадки(ХС)	Экспорт
//
//	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадки");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ЗагрузитьПлощадки(ХС);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//
//	Если ПустоеЗначение(ХС.GUID)=1 Тогда
//		ХС_ПолучитьGuid(ХС);
//
//		//{обновим ссылку на объект
//		Спр_ХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
//		Спр_ХС.НайтиЭлемент(ХС);
//		ХС = Спр_ХС.ТекущийЭлемент();
//		//}
//	КонецЕсли;
//
//	Если ПустоеЗначение(ХС.GUID)=1 Тогда
//		Сообщить("В ХозСубъекте ["+ХС+"] не указан GUID","!");
//		Возврат "";
//	КонецЕсли;
//
//	результат = ЗагрузитьХС( СокрЛП(ХС.GUID) );
//
//    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);
//
//    objDom=СоздатьОбъект("MSXML2.DOMDocument");
//    objDom.load(Компонента.LogFilename);
//
//	Если НайтиОшибки()>0 Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	Состояние("Плановая очистка Площадок По "+ХС);
//	НачатьТранзакцию();
//	ТекущиеПлощадки =  ПолучитьПлощадкиПоХС(ХС);
//	СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");
//	Для к = 1 По ТекущиеПлощадки.РазмерСписка() Цикл
//		СпрПл.НайтиЭлемент(ТекущиеПлощадки.ПолучитьЗначение(к));
//		СпрПл.Удалить(0);		
//	КонецЦикла;
//    ЗафиксироватьТранзакцию();
//	Состояние("Загрузка Площадок По "+ХС);
//	
//	
//    activityLocationList = objDom.selectNodes("//ent:activityLocation") ;
//    Для i1 = 0 По activityLocationList.length - 1 Цикл
//        activityLocation=activityLocationList.item(i1);
//
//		Попытка
//			guid = activityLocation.selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
//    		ЗагрузитьПлощадкуПоGUID(guid, ХС);			
//		Исключение
//        	Сообщить("Не удалось получить GUID площадки из файла "+Компонента.LogFilename);
//		КонецПопытки;
//
//	КонецЦикла;
//
//	Сообщить("Загрузка площадок завершена","i");
//КонецФункции

Функция ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС="", тзПлощадки) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкуПоGuidТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкуПоGuidТЗ(GUID, ХС, тзПлощадки);
	КонецЕсли;
	//}

	//стандартное поведение функции

	//Сообщить("Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]","i");
	//Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );
	Результат = ГМ2.ЗагрузитьПлощадку( СокрЛП(GUID) );


    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

    enterprise = objDom.selectSingleNode("//dt:enterprise") ;

	guid = enterprise.selectSingleNode("bs:guid").text;
	uuid = enterprise.selectSingleNode("bs:uuid").text;

	updateDate = enterprise.selectSingleNode("bs:updateDate").text;
	createDate = enterprise.selectSingleNode("bs:createDate").text;
	name = enterprise.selectSingleNode("dt:name").text;
	active = enterprise.selectSingleNode("bs:active").text;

	address = enterprise.selectSingleNode("dt:address").selectSingleNode("dt:addressView").text;

	Попытка
		owner = enterprise.selectSingleNode("dt:owner").selectSingleNode("bs:guid").text;
	Исключение
		owner="";
	КонецПопытки;
	Попытка
		ownerName = enterprise.selectSingleNode("dt:owner").selectSingleNode("dt:name").text;
	Исключение
		Попытка
			ownerName = enterprise.selectSingleNode("dt:owner").selectSingleNode("dt:fio").text;
		Исключение
			ownerName ="";
		КонецПопытки;
	КонецПопытки;

	Если owner<>СокрЛП(ХС.GUID) Тогда
		Сообщить("Площадка пропущена ["+name+"] принадлежит другому ХозСубъекту ["+ownerName+"] ","!");
		//Возврат;
	КонецЕсли;

	тзПлощадки.НоваяСтрока();

	тзПлощадки.Наименование = name;
	тзПлощадки.Адрес = address;
	тзПлощадки.Активна = active;
	тзПлощадки.GUID = guid;
	тзПлощадки.UUID = uuid;
	тзПлощадки.ДатаСоздания = createDate;
	тзПлощадки.ДатаИзменения = updateDate;
	Если ПустоеЗначение(owner)=0 Тогда
		тзПлощадки.ХозСубъект = НайтиХСпоGUID(owner);
		//тзПлощадки.ХозСубъектНаименование = ownerName;
	Иначе
		тзПлощадки.ХозСубъект = ХС;
		//тзПлощадки.ХозСубъектНаименование = ХС.Наименование;
	КонецЕсли;

	Сообщить("Загружена информация о площадке ["+name+"] GUID = "+ guid,"i");

	УдалитьXML( Компонента.LogFilename );
КонецФункции

Функция ЗагрузитьПлощадкиТЗ(ХС) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьПлощадкиТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗагрузитьПлощадкиТЗ(ХС);
	КонецЕсли;
	//}

	//стандартное поведение функции


	Результат = ГМ2.ЗагрузитьХС( СокрЛП(ХС.GUID) );

    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);

    objDom=СоздатьОбъект("MSXML2.DOMDocument");
    objDom.load(Компонента.LogFilename);

	Если НайтиОшибки()>0 Тогда
		Возврат Результат;
	КонецЕсли;

	тзПлощадки = СоздатьОбъект("ТаблицаЗначений");
	тзПлощадки.НоваяКолонка("Наименование");
	тзПлощадки.НоваяКолонка("Адрес");
	тзПлощадки.НоваяКолонка("Активна");
	тзПлощадки.НоваяКолонка("GUID");
	тзПлощадки.НоваяКолонка("UUID");
	//тзПлощадки.НоваяКолонка("ХозСубъектНаименование");
	тзПлощадки.НоваяКолонка("ХозСубъект");
	тзПлощадки.НоваяКолонка("ДатаСоздания");
	тзПлощадки.НоваяКолонка("ДатаИзменения");

    activityLocationList = objDom.selectNodes("//dt:location") ;
    Для i1 = 0 По activityLocationList.length - 1 Цикл
        activityLocation=activityLocationList.item(i1);

		Попытка			
			guid = activityLocation.selectSingleNode("dt:enterprise").selectSingleNode("bs:guid").text;
		Исключение			
			Продолжить;
		КонецПопытки;
	
	    ЗагрузитьПлощадкуПоGuidТЗ(guid, ХС, тзПлощадки);

	КонецЦикла;

	Сообщить("Загрузка информации о площадках завершена","i");

	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ЗагрузитьПлощадки", "Команда");
	СписокПараметров.ДобавитьЗначение(тзПлощадки, "тзПлощадки");

	ОткрытьФорму("Отчет",СписокПараметров,ПолучитьКонстанту("КаталогМодуля")+"Меркурий_ЗагрузкаПлощадок.ert");

	УдалитьXML( Компонента.LogFilename );
КонецФункции

//Функция НайтиПлощадку(Guid, Обновить=1) Экспорт
//
//	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадку");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.НайтиПлощадку(Guid);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//	Рез = "";
//	Guid = СокрЛП(Guid);
//	Если ПустоеЗначение(Guid)=1 Тогда
//		Возврат "";
//	КонецЕсли;
//
//	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
//	Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
//		Рез = Спр.ТекущийЭлемент();
//	Иначе
//		Сообщить("Площадка GUID ["+guid+"] не найдена: ","!");
//		//создать площадку
//
//		Если Обновить=1 Тогда 
//			Рез = ЗагрузитьПлощадкуПоGUID(guid);
//		КонецЕсли;
//
//	КонецЕсли;
//
//	Если ПустоеЗначение(Рез)=1 Тогда
//		Сообщить("ВСД_Площадка не найдена ["+Guid+"]","!");
//	КонецЕсли;
//
//	Возврат рез;
//КонецФункции

Функция НайтиПлощадкуПоКонтрагенту(ВыбКлиент) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкуПоКонтрагенту");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкуПоКонтрагенту(ВыбКлиент);
	КонецЕсли;
	//}

	//стандартное поведение функции
	результат = "";
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	Если ПустоеЗначение(ВыбКлиент) = 0 Тогда
		Если ЭтоSQL=1 Тогда

			ТекстЗапроса = "select
			|	СпрПл.ID [id $Справочник.ВСД_Площадка],
			|	СпрПл.descr,
			|	$СпрПл.GUID,
			|	$СпрПл.Контрагент
			|from $Справочник.ВСД_Площадка as СпрПл (NOLOCK)
			|where
			|	$СпрПл.Контрагент=:ВыбКлиент
			|";
			RS.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
				RS.Отладка(1);
			КонецЕсли;
			тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);

		Иначе
			Запрос = базаДанных.НовыйЗапрос();

			ТекстЗапроса = "select
			|	СпрПл.ID [id $Справочник.ВСД_Площадка],
			|	СпрПл.descr,
			|	СпрПл.GUID,
			|	СпрПл.Контрагент
			|from [Справочник.ВСД_Площадка] as СпрПл
			|where
			|	СпрПл.Контрагент=:ВыбКлиент
			|";

			Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
	
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
				Запрос.Отладка(1);
			КонецЕсли;		
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;

	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	КонецЕсли;

	Возврат результат;
КонецФункции

Функция НайтиПлощадкуПоСкладу(ВыбСклад, ВыбХс ="") Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПлощадкуПоСкладу");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПлощадкуПоСкладу(ВыбСклад);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Рез = "";
	Если ПустоеЗначение(ВыбСклад)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
		
		Если ЭтоSQL=1 Тогда

			ТекстЗапроса = "select
			|	СпрПл.ID [id $Справочник.ВСД_Площадка],
			|	$СпрПл.Склад
			|from $Справочник.ВСД_Площадка as СпрПл (NOLOCK)
			|where
			|	$СпрПл.Склад=:ВыбСклад 
			|	%ОтборПоХС%
			|";
			RS.УстановитьТекстовыйПараметр("ВыбСклад", ВыбСклад);
			Если ПустоеЗначение(ВыбХс)=0 Тогда 
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоХС%","AND $СпрПл.GuidХозСубъекта=:ВыбGuidХозСубъекта ");
				RS.УстановитьТекстовыйПараметр("ВыбGuidХозСубъекта", ВыбХс.GUID);
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоХС%","")
			КонецЕсли;
			
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
				RS.Отладка(1);
			КонецЕсли;
			тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
		Иначе
			Запрос = базаДанных.НовыйЗапрос();

			ТекстЗапроса = "select
			|	СпрПл.ID [id $Справочник.ВСД_Площадка],
			|	СпрПл.Склад
			|from [Справочник.ВСД_Площадка] as СпрПл
			|where
			|	СпрПл.Склад=:ВыбСклад
			|	%ОтборПоХС%
			|";

			Запрос.Подставлять("ВыбСклад", ВыбСклад);
			Если ПустоеЗначение(ВыбХс)=0 Тогда 
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоХС%","AND СпрПл.GuidХозСубъекта=:ВыбGuidХозСубъекта ");
				Запрос.Подставлять("ВыбGuidХозСубъекта", ВыбХс.GUID);
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоХС%","")
			КонецЕсли;
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
				Запрос.Отладка(1);
			КонецЕсли;
			ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		КонецЕсли;

		Тз.ВыбратьСтроки();
		Если ТЗ.ПолучитьСТроку()=1 Тогда
			рез = тз.id;
		КонецЕсли;
		
		Если ПустоеЗначение( рез )=1 Тогда
			// поищем По справочнику ВСД_СкладыПлощадок
			Попытка
				Если ЭтоSQL=1 Тогда
	
					ТекстЗапроса = "select
					|	СпрПл.ID [id $Справочник.ВСД_СкладыПлощадок],
					|	$СпрПл.Склад
					|from $Справочник.ВСД_СкладыПлощадок as СпрПл (NOLOCK)
					|where
					|	$СпрПл.Склад=:ВыбСклад
					|";
					RS.УстановитьТекстовыйПараметр("ВыбСклад", ВыбСклад);
					Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
						RS.Отладка(1);
					КонецЕсли;
					тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);
				Иначе
					Запрос = базаДанных.НовыйЗапрос();
	
					ТекстЗапроса = "select
					|	СпрПл.ID [id $Справочник.ВСД_СкладыПлощадок],
					|	СпрПл.Склад
					|from [Справочник.ВСД_СкладыПлощадок] as СпрПл
					|where
					|	СпрПл.Склад=:ВыбСклад
					|";
	
					Запрос.Подставлять("ВыбСклад", ВыбСклад);
					Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
						Запрос.Отладка(1);
					КонецЕсли;							
					ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
				КонецЕсли;
	
				Тз.ВыбратьСтроки();
				Если ПустоеЗначение(ВыбХС) = 1 Тогда
					Если ТЗ.ПолучитьСТроку()=1 Тогда
						рез = тз.id.Владелец;
					КонецЕсли;
				Иначе
					Пока ТЗ.ПолучитьСТроку()=1 Цикл
						Если тз.id.Владелец.GuidХозСубъекта = ВыбХС.GUID Тогда
							рез = тз.id.Владелец;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				//Возврат рез;
			Исключение
					Сообщить("Площадка со складом ["+ВыбСклад+"] не найдена: ","!");
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("не указан склад Площадки","!");
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция ВыбратьВсеПлощадкиХС(ХС) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВыбратьВсеПлощадкиХС");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВыбратьВсеПлощадкиХС(ХС);
	КонецЕсли;
	//}

	//стандартное поведение функции

	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_Площадка.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_Площадка.GuidХозСубъекта;
	|Условие (GuidХозСубъекта = ВыбGuidХозСубъекта);
	|Группировка id;
	|Без Итогов;
	|";

	ВыбGuidХозСубъекта = (ХС.GUID);
	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	Возврат тз;
КонецФункции


//} ******************  Площадки **************************

//======= ФУНКЦИИ ПО ИНИЦИАЛИЗАЦИИ ХС ==============

Функция ПометитьНаУдалениеСправочник(ВидСправочника) Экспорт
	Состояние("Удаление справочника "+ВидСправочника);
	Спр = СоздатьОбъект("Справочник."+ВидСправочника);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		Спр.Удалить(0);
		Спр.Записать();
	КонецЦикла;
	Состояние("");
КонецФункции

//======= ОБЩИЕ ФУНКЦИИ РАБОТЫ С ВСД ==============

Функция СтрокаВДату(ДатаСтрока) Экспорт
	
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	Если ПустоеЗначение(день)=1 Тогда
		день = 1;
	КонецЕсли;
	
	Возврат Дата(год, мес,день);
	
КонецФункции

Функция Преобразовать_СтрокаДата_в_XML(ДатаСтр) Экспорт
	//например 2018.11.01-03:00
	//
	//год1 = Сред(ДатаСтр,7,4);
	//мес1 = Сред(ДатаСтр,4,2);
	//час1 = Сред(ДатаСтр,12,2);
	//день1 = Лев(ДатаСтр,2);
	день1= Сред(ДатаСтр,9,2);
	мес1 = Сред(ДатаСтр,6,2);
	час1 = Сред(ДатаСтр,12,2);
	год1 = Лев(ДатаСтр,4);

	ТекстЗапроса="";
	Если ПустоеЗначение(год1)=0 Тогда
		ТекстЗапроса = " <dt:year>"+ год1 +"</dt:year>";
	КонецЕсли;
	Если ПустоеЗначение(мес1)=0 Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:month>"+ Число(мес1) +"</dt:month> ";
	КонецЕсли;
	Если ПустоеЗначение( день1 )=0 Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:day>"+ Число(день1) +"</dt:day>";
	КонецЕсли;
	Если ПустоеЗначение(час1)=0 Тогда
		ТекстЗапроса = ТекстЗапроса + " <dt:hour>"+ Число(час1) +"</dt:hour> ";
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции

Функция Преобразовать_ДатаXML_в_Строку(dateXML)
	Попытка
		год = ""+dateXML.selectSingleNode("*[local-name() = 'year']").text;
		год = Формат(год,"Ч(0)4.0");
	Исключение
		год ="    ";
	КонецПопытки;
	Попытка
		мес = ""+dateXML.selectSingleNode("*[local-name() = 'month']").text;
		мес = Формат(мес,"Ч(0)2.0");
	Исключение
		мес = "  ";
	КонецПопытки;

	Попытка
		день = ""+dateXML.selectSingleNode("*[local-name() = 'day']").text;
		день = Формат(день,"Ч(0)2.0");
	Исключение
		день = "  ";
	КонецПопытки;

	Попытка
		час = "-"+dateXML.selectSingleNode("*[local-name() = 'hour']").text;
	Исключение
		час=""
	КонецПопытки;

	//формат "2018-10-01T14:00" = стандартное время
	Дата1 = ""+ год +"-"+ мес + "-" + день + час;
	Возврат Дата1;
КонецФункции

Функция Дата_из_XML( dateXML, Дата1, Дата2, ДатаСтрока ) Экспорт

	Попытка
		Дата1 = Преобразовать_ДатаXML_в_Строку( dateXML.selectSingleNode( "*[local-name() = 'firstDate']" ) );
	Исключение
		Дата1="";
	КонецПопытки;
	Попытка
		Дата2 = Преобразовать_ДатаXML_в_Строку( dateXML.selectSingleNode( "*[local-name() = 'secondDate']" ) );
	Исключение
		Дата2="";
	КонецПопытки;
	Попытка
		ДатаСтрока = ""+dateXML.selectSingleNode( "*[local-name() = 'informalDate']" ).text;
	Исключение
		ДатаСтрока = "";
	КонецПопытки;

КонецФункции

Функция ПустаяДата( ВыбСтрокаДата ) Экспорт //ЖД Экспорт
	год1 = Лев(ВыбСтрокаДата,4);
	Возврат ПустоеЗначение(год1);
КонецФункции

Функция Изготовление_СрокГодности_в_XML(док, префикс ) Экспорт
    ТекстЗапроса = "";

	Попытка
		ДатаИзготовленияСтр	= док.ДатаИзготовления;
	Исключение
		ДатаИзготовленияСтр ="";
	КонецПопытки;

	Если (ПустаяДата(док.ДатаИзготовления1) = 0) ИЛИ (ПустоеЗначение(ДатаИзготовленияСтр) = 0) Тогда
		ТекстЗапроса = ТекстЗапроса + "
    	|                <"+ префикс +":dateOfProduction>";
		Если (ПустаяДата(док.ДатаИзготовления1) = 0) Тогда
			ТекстЗапроса = ТекстЗапроса + "<"+ префикс +":firstDate> ";
			ТекстЗапроса = ТекстЗапроса + Преобразовать_СтрокаДата_в_XML(док.ДатаИзготовления1);
			ТекстЗапроса = ТекстЗапроса + " </"+ префикс +":firstDate>";
		КонецЕсли;
		Если (ПустаяДата(док.ДатаИзготовления2) = 0 ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+ префикс +":secondDate>
			|" + Преобразовать_СтрокаДата_в_XML(док.ДатаИзготовления2) + "
			|              </"+ префикс +":secondDate>";
		КонецЕсли;

		Если ПустоеЗначение(ДатаИзготовленияСтр) = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+ префикс +":informalDate>"+ СокрЛП(ДатаИзготовленияСтр) +"</"+префикс+":informalDate>";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|                </"+ префикс +":dateOfProduction>";
	КонецЕсли;

	Попытка
		ДатаСрокГодностиСтр	= док.ДатаСрокГодности;
	Исключение
		ДатаСрокГодностиСтр = "";
	КонецПопытки;

	Если (ПустаяДата(док.ДатаСрокГодности1) = 0 ) ИЛИ (ПустоеЗначение(ДатаСрокГодностиСтр) = 0) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|                <"+префикс+":expiryDate>";
		Если (ПустаяДата(док.ДатаСрокГодности1) = 0 ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":firstDate>
			|" + Преобразовать_СтрокаДата_в_XML(док.ДатаСрокГодности1) + "
			|              </"+префикс+":firstDate>";
		КонецЕсли;
		Если (ПустаяДата(док.ДатаСрокГодности2) = 0 ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":secondDate>
			|" + Преобразовать_СтрокаДата_в_XML(док.ДатаСрокГодности2) + "
			|              </"+префикс+":secondDate>";
		КонецЕсли;
		Если ПустоеЗначение(ДатаСрокГодностиСтр) = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|              <"+префикс+":informalDate>"+ СокрЛП(ДатаСрокГодностиСтр) +"</"+префикс+":informalDate>";
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + "
			|            </"+префикс+":expiryDate>";
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции


Функция СохранитьСтатусЗапроса(док) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СохранитьСтатусЗапроса");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СохранитьСтатусЗапроса(док);
	КонецЕсли;
	//}

	//стандартное поведение функции
	Если ТипЗначенияСтр(док)="Справочник" Тогда 
		ДокОб = СоздатьОбъект("Справочник.ВСД_Док");
		ДокОб.НайтиЭлемент( док );
	Иначе
		ДокОб = СоздатьОбъект("Документ");
		ДокОб.НайтиДокумент(док);		
	КонецЕсли;

	ДокОб.applicationID = Компонента.ApplicationId;
	ДокОб.Статус 		= Компонента.Status;
	Сообщить(" статус = "+ Компонента.Status );

	Попытка		
		ДокОб.Записать();
	Исключение
		СообщитьОбОшибке( "Не удалось записать "+ ДокОб+" " + ОписаниеОшибки(), Сам() );
		Возврат 0;
	КонецПопытки;
	
	Если ( СокрЛП(ДокОб.Статус)="COMPLETED") ИЛИ (СокрЛП(ДокОб.Статус)="CONFIRMED")  Тогда
		Попытка
			Если ДокОб.Вид()="ВСД_Док" Тогда 
				Если ДокОб.СтатусВСД = Перечисление.ВСД_СтатусВСД.WITHDRAWN Тогда 
					ДокОб.Удалить(0);
				//Иначе		
				//	// проведем только успешно выполненный запрос
				//	ДокОб.Провести();
				КонецЕсли;
			Иначе
				ДокОб.Провести();
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Не удалось провести документ "+док+" "+ОписаниеОшибки(), Сам() );
			Возврат 0; // [+]serpent, 03.05.2019 //отрабатываем проверку при записи, Если документ заблокирован... Ругаемся И идем дальше
		КонецПопытки;		
	КонецЕсли;	
	
	Возврат 1;
КонецФункции

Функция ВыбратьВидДокументаВСД(type)

    //{ VetDocumentType
    //    TRANSPORT, = 1	= Транспортный ВСД.
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}

	рез = "";
	Если type="TRANSPORT" Тогда
		рез = "ВСД_исходящий";
	ИначеЕсли type="PRODUCTIVE" Тогда
		рез = "ВСД_Производство";
	ИначеЕсли type="INCOMING" Тогда
		рез = "ВСД_входящий";
	ИначеЕсли type="RETURNABLE" Тогда
		рез = "ВСД_возвратный";
	ИначеЕсли type="OUTGOING" Тогда
		// проверить !!!
		рез = "ВСД_исходящий";
	Иначе
		Сообщить("Неопределенный вид ВСД ["+type+"]","!");
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция СтатусЗакрыт( Док ) Экспорт 
	
	Попытка
		
		Если ( Док.СтатусВСД = Перечисление.ВСД_СтатусВСД.CONFIRMED ) ИЛИ
			 ( Док.СтатусВСД = Перечисление.ВСД_СтатусВСД.UTILIZED ) Тогда 
				Возврат 1;
			Иначе
				Возврат 0;		
		КонецЕсли;
			
	Исключение
		
		Попытка
			
			Если ( СокрЛП(Док.Статус) = "COMPLETED" ) ИЛИ
				 ( СокрЛП(Док.Статус) = "IN_PROCESS" ) Тогда 
					Возврат 1;
				Иначе
					Возврат 0;		
			КонецЕсли;
		Исключение
			Возврат 0;		
		КонецПопытки;
		
	КонецПопытки;
	
КонецФункции

//// Функция загружает ответ от Ветиса = ответ на второй запрос
//Функция ЗагрузитьXML_ВСД(имяФайла, докОснование="")
//	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
//	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗагрузитьXML_ВСД");
//	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
//		Возврат ОбъектВыполнения.ЗагрузитьXML_ВСД(имяФайла, докОснование);
//	КонецЕсли;
//	//}
//
//	//стандартное поведение функции
//    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
//    objDom.load(ИмяФайла);
//
//	Если НайтиОшибки(докОснование)>0 Тогда
//		Возврат "";
//	КонецЕсли;
//
//
//    objDom.setProperty("SelectionNamespaces", "
//		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//		|xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common'
//		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
//		|xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
//		|xmlns:ns2='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
//		|xmlns:ns1='http://api.vetrf.ru/schema/cdm/mercury/applications'
//		|xmlns:vetd='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
//		|xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'
//		|xmlns:default='http://www.w3.org/2001/XMLSchema'
//		|" );
//
//	applicationId = objDom.selectSingleNode("//*[local-name() = 'applicationId']").text ;
//
//	vetDocumentList = objDom.selectNodes("//*[local-name() = 'vetDocument']") ;
//
//    Для i1 = 0 По vetDocumentList.length - 1 Цикл
//        vetDocument=vetDocumentList.item(i1);
//		uuid = vetDocument.selectSingleNode("*[local-name()='uuid']").text;
//
//		// Документ.ВСД = ответ сервера на второй запрос к Ветису
//		//  applicationId  = id первого запроса к Ветису
//		// UUID можем получить только в ответе второго запроса к Ветису
//		докОбъект = НайтиВСДпоUUID( uuid );
//		докОбъект.UUID = uuid;
//
//		form 	 = vetDocument.selectSingleNode("vetd:form").text;
//		st 	 = vetDocument.selectSingleNode("vetd:status").text;
//		type = vetDocument.selectSingleNode("vetd:type").text;
//
//		Если ПустоеЗначение(докОснование)=0 Тогда
//			//Если явно указан документ, получаем его вид
//			ВидДокумента = докОснование.Вид();
//		Иначе
//			//при загрузке списка документов - вид документа получаем из XML
//			ВидДокумента = ВыбратьВидДокументаВСД(type);
//		КонецЕсли;
//
//		createDate = vetDocument.selectSingleNode("vetd:issueDate").text;
//
//		consignorBusinessEntity = vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
//		consignorEnterprise 	= vetDocument.selectSingleNode("vetd:consignor").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
//
//		Попытка
//			consigneeBusinessEntity = vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:businessEntity").selectSingleNode("bs:guid").text;
//		Исключение
//			consigneeBusinessEntity ="";
//		КонецПопытки;
//		Попытка
//			consigneeEnterprise 	= vetDocument.selectSingleNode("vetd:consignee").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
//		Исключение
//			consigneeEnterprise = "";
//		КонецПопытки;
//
//		batch = vetDocument.selectSingleNode("vetd:batch");
//
//		product 	= batch.selectSingleNode("vetd:product").selectSingleNode("bs:guid").text;
//		subProduct 	= batch.selectSingleNode("vetd:subProduct").selectSingleNode("bs:guid").text;
//
//		productItem = batch.selectSingleNode("vetd:productItem");
//
//		//Попытка	productItemName = batch.selectSingleNode("vetd:productItem").selectSingleNode("*[local-name()='name']").text; Исключение productItemName = ""; КонецПопытки;
//		//Попытка productItemUuid = batch.selectSingleNode("vetd:productItem").selectSingleNode("bs:uuid").text; Исключение	productItemUuid=""; 	КонецПопытки;
//		//Попытка productItemGuid = batch.selectSingleNode("vetd:productItem").selectSingleNode("bs:guid").text; 	Исключение	productItemGuid="";		КонецПопытки;
//
//		volume 		= batch.selectSingleNode("vetd:volume").text;
//		unitGuid	= batch.selectSingleNode("vetd:unit").selectSingleNode("bs:guid").text;
//
//		Попытка
//			packingFormUuid	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("bs:uuid").text;
//		Исключение
//			//Сообщить("Не удалось получить элемент [packingForm] [uuid]","!");
//			packingFormUuid = "";
//		КонецПопытки;
//		Попытка
//			packingFormName	= batch.selectSingleNode("*[local-name()='packingList']").selectSingleNode("*[local-name()='packingForm']").selectSingleNode("*[local-name()='name']").text;
//		Исключение
//			packingFormName="";
//			//Сообщить("Не удалось получить элемент [packingForm] [name]","!");
//		КонецПопытки;
//
//		packingAmount = batch.selectSingleNode("vetd:packingAmount").text;
//
//		ДатаИзготовления1=""; ДатаИзготовления2="";	ДатаИзготовления="";
//		dateOfProduction = batch.selectSingleNode("vetd:dateOfProduction");
//		Дата_из_XML(dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления);
//
//		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
//		expiryDate = batch.selectSingleNode("vetd:expiryDate");
//		Дата_из_XML(expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности);
//
//		Попытка
//			producer = batch.selectSingleNode("vetd:producerList").selectSingleNode("ent:producer").selectSingleNode("ent:enterprise").selectSingleNode("bs:guid").text;
//		Исключение
//			producer = "";
//		КонецПопытки;
//
//		owner = batch.selectSingleNode("vetd:owner").selectSingleNode("bs:guid").text; //ХозСубъект
//		ВладелецХС = НайтиХСпоGUID(owner);
//
//		Попытка докОбъект.ТтнНомер = vetDocument.selectSingleNode("vetd:waybillNumber").text; 				Исключение КонецПопытки;
//		Попытка докОбъект.ТтнДата = СтрокаВДату( vetDocument.selectSingleNode("vetd:waybillDate").text); 	Исключение КонецПопытки;
//		Попытка докОбъект.Экспертиза = vetDocument.selectSingleNode("vetd:expertiseInfo").text; 			Исключение КонецПопытки;
//		Попытка докОбъект.Местность = vetDocument.selectSingleNode("vetd:locationProsperity").text; 		Исключение КонецПопытки;
//		Попытка докОбъект.ОсобыеОтметки = vetDocument.selectSingleNode("vetd:specialMarks").text; 			Исключение КонецПопытки;
//
//		Попытка докОбъект.номерАвто = vetDocument.selectSingleNode("vetd:transportInfo").selectSingleNode("shp:transportNumber").text; 	Исключение КонецПопытки;
//
//		cargoInspected = "";
//		Попытка cargoInspected =  vetDocument.selectSingleNode("vetd:cargoInspected").text; 	Исключение КонецПопытки;
//		Если cargoInspected="true" Тогда
//			докОбъект.cargoInspected = 1;
//		КонецЕсли;
//
//		cargoExpertized = "";
//		Попытка cargoExpertized =  vetDocument.selectSingleNode("vetd:cargoExpertized").text; 	Исключение КонецПопытки;
//		Если cargoExpertized="true" Тогда
//			докОбъект.cargoExpertized = 1;
//		КонецЕсли;
//
//		Попытка
//			transportStorageType =  vetDocument.selectSingleNode("vetd:transportStorageType").text;
//			зн = Перечисление.ВСД_ТермическиеУсловияПеревозки.ЗначениеПоИдентификатору(transportStorageType);//ТермическиеУсловияПеревозки.НайтиЗначение(transportStorageType);
//			докОбъект.ТермическоеСостояние = зн;
//		Исключение
//		КонецПопытки;
//
//		докОбъект.applicationID = Компонента.ApplicationId;
//		Если ПустоеЗначение(докОбъект.ДокОснование )=1 Тогда
//			докОбъект.ДокОснование = докОснование;
//		КонецЕсли;
//
//		Попытка докОбъект.Отправитель_ХозСубъект 	= НайтиХСпоGUID(consignorBusinessEntity); Исключение КонецПопытки;
//		Попытка	докОбъект.Отправитель_Площадка 		= НайтиПлощадку(consignorEnterprise); Исключение КонецПопытки;
//		Попытка докОбъект.Получатель_ХозСубъект 	= НайтиХСпоGUID(consigneeBusinessEntity); Исключение КонецПопытки;
//		Попытка	докОбъект.Получатель_Площадка 		= НайтиПлощадку(consigneeEnterprise); Исключение КонецПопытки;
//
//		докОбъект.Продукция 	= НайтиПродукцию(product);
//		докОбъект.ВидПродукции 	= НайтиВидПродукции(subProduct);
//
//		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент2(productItem, докОбъект.Продукция, докОбъект.ВидПродукции);
//		//докОбъект.Продукция_Элемент = Найти_Продукция_Элемент2(productItemName, productItemGuid, докОбъект.Продукция, докОбъект.ВидПродукции);
//
//		докОбъект.Количество 	= Число(volume);
//		докОбъект.КоличествоМест = Число(packingAmount);
//		ФормаУпаковки 			= ГМ2.НайтиФормуУпаковки( packingFormUuid, packingFormName);
//		докОбъект.ФормаУпаковки = ФормаУпаковки;
//
//		докОбъект.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid );
//
//		докОбъект.Статус = st;
//		//докОбъект.ФормаВСД = form;
//		докОбъект.типВСД = type;
//		докОбъект.НаименованиеПродукции = докОбъект.Продукция_Элемент.Наименование;
//		докОбъект.ДатаИзготовления = ДатаИзготовления; //строкой
//		докОбъект.ДатаИзготовления1 = ДатаИзготовления1;
//		докОбъект.ДатаИзготовления2 = ДатаИзготовления2;
//		докОбъект.ДатаСрокГодности = ДатаСрокГодности; //строкой
//		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
//		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2;
//
//		Автор = ПолучитьАвтора();
//		Попытка докОбъект.Фирма = Автор.ОсновнаяФирма; Исключение	КонецПопытки;
//		Попытка докОбъект.Автор = Автор; Исключение	КонецПопытки;
//		Попытка
//			докОбъект.Филиал = Автор.Филиал;
//		Исключение
//		КонецПопытки;
//
//		докОбъект.ДатаДок = СтрокаВДату(createDate);
//
//		докОбъект.Записать();
//		докОбъект.Провести();
//
//		Сообщить("Записан ВСД от "+докОбъект.ДатаДок+" ["+uuid+"]");
//	КонецЦикла;
//
//	//ИзменитьСтатусДокументОснования(докОснование, СокрЛП(st));
//	Если ( ПустоеЗначение(докОснование)=0 ) Тогда
//		докОснованиеОбъект = СоздатьОбъект("Документ");
//		докОснованиеОбъект.НайтиДокумент(ДокОснование);
//		Если СтатусЗакрыт( докОбъект )=1 Тогда
//			Попытка
//				докОснованиеОбъект.Провести();
//			Исключение
//			КонецПопытки;
//		//ИначеЕсли (СтатусДок="REJECTED") И НЕ(( СокрЛП(докОснование.Статус) ="COMPLETED") ИЛИ ( СокрЛП(докОснование.Статус) ="CONFIRMED")) Тогда
//		//	Попытка
//		//		докОснованиеОбъект.СделатьНеПроведенным();
//		//	Исключение
//		//	КонецПопытки;
//		//ИначеЕсли ( st ="WITHDRAWN") Тогда
//		//	Попытка
//		//		докОснованиеОбъект.Удалить(0);
//		//	Исключение
//		//	КонецПопытки;
//		КонецЕсли;
//	КонецЕсли;
//
//КонецФункции

//======================================================================
 //+Станислав, 2019-06-10 14:41:08
 // https://help.vetrf.ru/wiki/VersionStatus
Функция СтатусПартииМеркурий(СтатусЗаписи="") Экспорт
	
	СтатусЗаписи=СокрЛП(СтатусЗаписи);
	Если СтатусЗаписи=0 Тогда
		Возврат "";
	ИначеЕсли СтатусЗаписи="100" Тогда
		Возврат "Запись создана.";
	ИначеЕсли СтатусЗаписи="101" Тогда
		Возврат "Запись создана путем гашения ВС (импорт).";
	ИначеЕсли СтатусЗаписи="102" Тогда
		Возврат "Запись создана путем гашения ВСД.";
	ИначеЕсли СтатусЗаписи="103" Тогда
		Возврат "Запись создана в результате производственной операции.";
	ИначеЕсли СтатусЗаписи="104" Тогда
		Возврат "Запись была создана По справке о безопасности сырого молока.";
	ИначеЕсли СтатусЗаписи="105" Тогда
		Возврат "Запись была создана после аннулирования ВСД ИЛИ транзакции, ссылающихся на запись журнала, помеченную для переноса в архив ИЛИ перенесённую в архив.";
	ИначеЕсли СтатусЗаписи="110" Тогда
		Возврат "Запись создана в результате объединения двух ИЛИ более других.";
	ИначеЕсли СтатусЗаписи="120" Тогда
		Возврат "Запись создана в результате разделения другой.";
	ИначеЕсли СтатусЗаписи="200" Тогда
		Возврат "В запись были внесены изменения.";
	ИначеЕсли СтатусЗаписи="201" Тогда
		Возврат "Запись журнала аннулирована.";
	ИначеЕсли СтатусЗаписи="202" Тогда
		Возврат "Запись продукции изменена путём списания. Необязательно, чтобы продукция была списана полностью, может быть списана И часть объёма.";
	ИначеЕсли СтатусЗаписи="203" Тогда
		Возврат "Изменена при редактировании производственной операции.";
	ИначеЕсли СтатусЗаписи="204" Тогда
		Возврат "Запись была обновлена в результате принятия заключения По результатам ВСЭ.";
	ИначеЕсли СтатусЗаписи="230" Тогда
		Возврат "Запись была обновлена в результате присоединения другой.";
	ИначеЕсли СтатусЗаписи="231" Тогда
		Возврат "Запись была обновлена в результате присоединения другой.";
	ИначеЕсли СтатусЗаписи="240" Тогда
		Возврат "Запись была обновлена в результате отделения от неё другой.";
	ИначеЕсли СтатусЗаписи="250" Тогда
		Возврат "Запись была восстановлена после удаления.";
	ИначеЕсли СтатусЗаписи="300" Тогда
		Возврат "Запись была перемещена в другую группу (для иерархических справочников).";
	ИначеЕсли СтатусЗаписи="400" Тогда
		Возврат "Запись была удалена.";
	ИначеЕсли СтатусЗаписи="410" Тогда
		Возврат "Запись была удалена в результате объединения.";
	ИначеЕсли СтатусЗаписи="420" Тогда
		Возврат "Запись была удалена в результате разделения.";
	ИначеЕсли СтатусЗаписи="430" Тогда
		Возврат "Запись была удалена в результате присоединения.";
	КонецЕсли;
	Возврат "";
КонецФункции // СтатусПартии

//{ =================== ВСД Общие ==========================================

Функция ПолучитьРезультатСервер(appID) Экспорт
	
	Запрос ="<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|<SOAP-ENV:Header/><SOAP-ENV:Body>
	|<receiveApplicationResultRequest xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>
  	|<apiKey xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ ПолучитьКонстанту("param_api_key") +"</apiKey>
  	|<issuerId xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ ПолучитьКонстанту("param_issuer_id") +"</issuerId>
  	|<applicationId xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ СокрЛП(appID) +"</applicationId>
	|</receiveApplicationResultRequest>
	|</SOAP-ENV:Body></SOAP-ENV:Envelope>
	|";

	запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:receiveApplicationResultRequest>
	|         <ws:apiKey>"+ ПолучитьКонстанту("param_api_key") +"</ws:apiKey>
	|         <ws:issuerId>"+ ПолучитьКонстанту("param_issuer_id") +"</ws:issuerId>
	|         <ws:applicationId>"+ СокрЛП(appID) +"</ws:applicationId>
	|      </ws:receiveApplicationResultRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>
	|";

	метод = Компонента.GetMethod();
    метод.Service = "platform/services/2.1/ApplicationManagementService";
    метод.Action = "receiveApplicationResult";

	Результат = Компонента.SendRequestSoap( метод, запрос, appID );

	НайтиОшибки();
	
	Возврат Компонента.Статус;
КонецФункции

//} ВСД Общие

//======= СЛУЖЕБНЫЕ ФУНКЦИИ ПО НАСТРОЙКЕ РАБОТЫ МОДУЛЯ ==============

Процедура Инициализация(КонтекстДокумента) Экспорт
	
	ВыбФирма = ПолучитьФирмуИзКонтекста(КонтекстДокумента);

	Если ( ПустоеЗначение(ТекущаяИнициализированнаяФирма)=1 ) Тогда 
		//загружаем параметры только Если изменилась фирма		
	
		ИнициализацияКомпоненты(ВыбФирма);
		
	Иначе
		Если ( ПустоеЗначение(ТекущаяФирма_ЗагруженыПараметры)=0 ) Тогда 
			Если ( ПустоеЗначение(ВыбФирма)=0 ) И ( ВыбФирма<>ТекущаяФирма_ЗагруженыПараметры )  Тогда 
				//загружаем параметры только Если изменилась фирма
			
				ИнициализацияКомпоненты(ВыбФирма);
				
			ИначеЕсли (ТекущаяИнициализированнаяФирма <> ТекущаяФирма_ЗагруженыПараметры) Тогда
				
				ИнициализацияКомпоненты(ВыбФирма);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // Инициализация


//======== Функции используемые в документах ====================================

Функция Выбрать_ВСД_транзакция( докОснование ) Экспорт

	Док = СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(докОснование.ДатаДок, КонГода(докОснование.ДатаДок), докОснование);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если фЭтоВСД_Транзакция(Док) = 1 Тогда
			Возврат Док.ТекущийДокумент();
		КонецЕсли;
	КонецЦикла;

	Возврат "";
КонецФункции

Функция Выбрать_ВСД( ДокОснование ) Экспорт

	тзДок = СоздатьОбъект("ТаблицаЗначений");
	тзДок.НоваяКолонка("Док",,,,"ВСД",50);

	Если ПустоеЗначение(ДокОснование)=1 Тогда
		Возврат тзДок;
	КонецЕсли;

	Если ДокОснование.Вид()="ВСД2" Тогда 
		
		тзДок.НоваяСтрока();
		тзДок.Док = ДокОснование		
		
	ИначеЕсли ДокОснование.Вид()="ВСД_Док" Тогда 
		
		тзДок.НоваяСтрока();
		тзДок.Док = ДокОснование		
		
	ИначеЕсли (ДокОснование.Вид() = "Реализация") ИЛИ (ДокОснование.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(ДокОснование);
		тзДок = Выбрать_ВСД(Док_ВСД_транзакция);

	Иначе
		
		СпрВСД = СоздатьОбъект("Справочник.ВСД_Док");
		Если СпрВСД.ВыбратьЭлементыПоРеквизиту("ДокОснование", ДокОснование,0,0)=1 Тогда 
			Пока СпрВСД.ПолучитьЭлемент()=1 Цикл
				тзДок.НоваяСтрока();
				тзДок.Док = СпрВСД.ТекущийЭлемент();				
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
	
	Возврат тзДок;
КонецФункции

Функция ОформитьВСД(РеализацияТоваров) Экспорт
	КонтФормы = "";
	ОткрытьФорму("Документ.ВСД_транзакция",КонтФормы, РеализацияТоваров);
КонецФункции

Функция ПечатьВСД(Док) Экспорт
	Если (Док.Вид() = "Реализация") ИЛИ (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

	ИначеЕсли фЭтоВСД_Транзакция(Док) = 1 Тогда
		тз_ВСД = Выбрать_ВСД(Док);
	КонецЕсли;

	Сообщить("Найдено "+тз_ВСД.КоличествоСтрок()+" ВСД");

	тз_ВСД.ВыбратьСтроки();
	Пока тз_ВСД.ПолучитьСтроку() = 1 Цикл
		//Если ТестовыйРежим=1 Тогда
		//	ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+тз_ВСД.Док.UUID);
		//Иначе
			ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+тз_ВСД.Док.UUID);
		//КонецЕсли;
	КонецЦикла;

КонецФункции

Функция ПечатьВСД_Тест(Док) Экспорт
	Если (Док.Вид() = "Реализация") ИЛИ (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

	ИначеЕсли фЭтоВСД_Транзакция(Док) = 1 Тогда
		тз_ВСД = Выбрать_ВСД(Док);
	КонецЕсли;

	Сообщить("Найдено "+тз_ВСД.КоличествоСтрок()+" ВСД");

	тз_ВСД.ВыбратьСтроки();
	Пока тз_ВСД.ПолучитьСтроку() = 1 Цикл
		ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+тз_ВСД.Док.UUID);
	КонецЦикла;

КонецФункции

Функция ПечатьСокрВСД(Док, Принтер="") Экспорт
	
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПечатьСокрВСД");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПечатьСокрВСД( Док, Принтер );
	КонецЕсли;
	//}
	
	меню = СоздатьОбъект("СписокЗначений");
	//меню.ДобавитьЗначение("Открыть","Открыть");
	////меню.ДобавитьЗначение("Добавить","Добавить");
	//меню.ДобавитьЗначение("Изменить","Изменить"); 
	//меню.ДобавитьЗначение("Очистить","Очистить"); 	
	
   	ФайлОбработки = ПолучитьКонстанту("КаталогМодуля")+"ПечФорма_ВСД_Сокращенная.ert";
   	Если ФС.СуществуетФайл(Файлобработки) = 1 Тогда
   		меню.ДобавитьЗначение(ФайлОбработки, "Сокращенная 1");
   	Иначе   		   		
   		СообщитьОбОшибке( "Остутствует печатная форма "+ФайлОбработки );
   	КонецЕсли;

   	ФайлОбработки = ПолучитьКонстанту("КаталогМодуля")+"ПечФорма_ВСД_Сокращенная2.ert";
   	Если ФС.СуществуетФайл(Файлобработки) = 1 Тогда
   		меню.ДобавитьЗначение( ФайлОбработки, "Сокращенная 2");
   	Иначе   		   		
   		СообщитьОбОшибке( "Остутствует печатная форма "+ФайлОбработки );
   	КонецЕсли;

   	ФайлОбработки = ПолучитьКонстанту("КаталогМодуля")+"ПечФорма_ВСД_Сокращенная3.ert";
   	Если ФС.СуществуетФайл(Файлобработки) = 1 Тогда
   		меню.ДобавитьЗначение( ФайлОбработки, "Мини" );
   	Иначе   		   		
   		СообщитьОбОшибке( "Остутствует печатная форма "+ФайлОбработки );
   	КонецЕсли;

   	ФайлОбработки = ПолучитьКонстанту("КаталогМодуля")+"ПечФорма_НаборныйЛист.ert";
   	Если ФС.СуществуетФайл(Файлобработки) = 1 Тогда
   		меню.ДобавитьЗначение( ФайлОбработки, "Наборный Лист" );
   	Иначе   		   		
   		СообщитьОбОшибке( "Остутствует печатная форма "+ФайлОбработки );
   	КонецЕсли;
   	
   	
	стр=0; Зн="";
	
	Если Сервис.ВыбратьЗначение(меню,Зн,,0,) <> 1 Тогда
		Возврат "";
	КонецЕсли;
	
	//Если меню.ВыбратьЗначение(Зн, "", стр, 60, 1) = 1 Тогда
						
		парам = СоздатьОбъект("СписокЗначений");
		парам.Установить("Контекст",Док);
		парам.Установить("Устройство",Принтер);
		парам.Установить("СразуПечать", (1-ПустоеЗначение(Принтер)) );
	
		ОткрытьФорму("Отчет", парам, Зн);
		
	//КонецЕсли;
	

КонецФункции

Функция ОткрытьВсдВГис(Док) Экспорт

	Если (Док.Вид() = "Реализация") ИЛИ (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

		тз_ВСД.ВыбратьСтроки();
		Пока тз_ВСД.ПолучитьСтроку() = 1 Цикл
			Если ПолучитьКонстанту("ТестовыйРежим")=1 Тогда
				ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД.Док.UUID);
			Иначе
				ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД.док.UUID);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли (Док.Вид() = "ВСД") ИЛИ (Док.Вид() = "ВСД2") ИЛИ (Док.Вид() = "ВСД2_входящий") ИЛИ (Док.Вид() = "ВСД_Док") Тогда
		Если ПолучитьКонстанту("ТестовыйРежим")=1 Тогда
			ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+Док.UUID);
		Иначе
			ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+док.UUID);
		КонецЕсли;
	Иначе
		тз_ВСД = Выбрать_ВСД(Док);
		тз_ВСД.ВыбратьСтроки();
		Пока тз_ВСД.ПолучитьСтроку() = 1 Цикл
			Если ПолучитьКонстанту("ТестовыйРежим")=1 Тогда
				ЗапуститьПриложение("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД.Док.UUID);
			Иначе
				ЗапуститьПриложение("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+тз_ВСД.док.UUID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецФункции

Функция ОткрытьСписокВсд(Док) Экспорт

	Если (Док.Вид() = "Реализация") ИЛИ (Док.Вид() = "ПеремещениеТМЦ") ИЛИ (Док.Вид() = ПолучитьКонстанту("НазваниеВидаДокументаРеализация")) Тогда //ЖД
		Док_ВСД_транзакция = Выбрать_ВСД_транзакция(Док);
		тз_ВСД = Выбрать_ВСД(Док_ВСД_транзакция);

	Иначе
		тз_ВСД = Выбрать_ВСД(Док);
	КонецЕсли;

	стр=0;
	Если тз_ВСД.ВыбратьСтроку(стр,"ВСД")=1 Тогда
		Если стр <> 0 Тогда
			тз_ВСД.ПолучитьСтрокуПоНомеру(стр);
			ОткрытьФорму(тз_ВСД.Док);
		КонецЕсли;
	КонецЕсли;
КонецФункции

//----------------------- Функции используемые в Групповых обработках докуметов -------------

Функция Получить_ВСД_Продукция_Элемент(Номенклатура) Экспорт
	спр = СоздатьОбъект("Справочник.ВСД_Номенклатура_Соответсвия");
	спр.ИспользоватьВладельца(Номенклатура);
	спр.ВыбратьЭлементы();
	Пока спр.ПолучитьЭлемент() = 1 Цикл
		Если спр.ПометкаУдаления()=0 Тогда
			Возврат Спр.ВСД_Продукция_Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция Получить_ВСД_Продукция_Элемент_Список(Номенклатура) Экспорт
	
	СписокПЭ = СоздатьОбъект("СписокЗначений");
	спр = СоздатьОбъект("Справочник.ВСД_Номенклатура_Соответсвия");
	спр.ИспользоватьВладельца(Номенклатура);
	спр.ВыбратьЭлементы();
	Пока спр.ПолучитьЭлемент() = 1 Цикл
		Если спр.ПометкаУдаления()=0 Тогда
			СписокПЭ.ДобавитьЗначение( Спр.ВСД_Продукция_Элемент );
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПЭ.РазмерСписка()=0 Тогда
		Возврат "";
	ИначеЕсли СписокПЭ.РазмерСписка()=1 Тогда
		Возврат СписокПЭ.ПолучитьЗначение(1);
	Иначе
		Возврат СписокПЭ;
	КонецЕсли;
КонецФункции

Функция СвернутьТч(Док) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СвернутьТч");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СвернутьТч(Док);
	КонецЕсли;
	//}

	тзДок = СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(тзДок);

	тзРез = СоздатьОбъект("ТаблицаЗначений");
	тзРез.НоваяКолонка("ВСД_Продукция_Элемент");
	тзРез.НоваяКолонка("Количество");
	тзРез.НоваяКолонка("КоличествоМест");

	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку() = 1 Цикл
		Попытка
			Количество = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаКоличество"));
			КоличествоМест = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест") );
			Номенклатура = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаНоменклатура") );
		Исключение
		    Сообщить("Неверно указан один из параметров: НазваниеРеквизитаКоличество, НазваниеРеквизитаКоличествоМест ИЛИ НазваниеРеквизитаНоменклатура");
			Возврат тзРез;
		КонецПопытки;
		ВСД_Продукция_Элемент = Получить_ВСД_Продукция_Элемент(Номенклатура);
		Если ПустоеЗначение(ВСД_Продукция_Элемент)=1 Тогда
			Сообщить("["+Номенклатура+"] количество = "+Количество+" в "+Док+" не указан ВСД_Продукция_Элемент ","!");
			Если ПолучитьКонстанту("ПропускатьПустыеСвойства") =1 Тогда
				Сообщить("Пропускаем");
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		тзРез.НоваяСтрока();
		тзРез.ВСД_Продукция_Элемент = ВСД_Продукция_Элемент;
		Если ПустоеЗначение(тзРез.ВСД_Продукция_Элемент.ЕдиницаИзмерения)=0 Тогда
			//только для КГ учитываем вес единицы
			Если СокрЛП(тзРез.ВСД_Продукция_Элемент.ЕдиницаИзмерения.Наименование) = "кг" Тогда
				Попытка
					Если тзДок.Единица.Вес>0 Тогда
						тзРез.Количество = Количество*тзДок.Единица.Вес;
					Иначе
						тзРез.Количество = Количество;
					КонецЕсли;
				Исключение
					тзРез.Количество = Количество;
				КонецПопытки;
			Иначе
				//все остальные считаем целочисленными единицами измерения
				тзРез.Количество = Количество;
			КонецЕсли;

		Иначе
			Попытка
				Если тзДок.Единица.Вес>0 Тогда
					тзРез.Количество = Количество*тзДок.Единица.Вес;
				Иначе
					тзРез.Количество = Количество;
				КонецЕсли;
			Исключение
				тзРез.Количество = Количество;
			КонецПопытки;
		КонецЕсли;
		тзРез.КоличествоМест = КоличествоМест;
	КонецЦикла;

	тзРез.Свернуть("ВСД_Продукция_Элемент","Количество, КоличествоМест");

	Возврат тзРез;
КонецФункции

Функция ВыгрузитьТч(Док) Экспорт
	// Выгружает тч Документа в ТЗ, Проставляет Продукция_Элемент, Рассчитывает количество к списанию
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВыгрузитьТч");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВыгрузитьТч(Док);
	КонецЕсли;
	//}

	тзДок = СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(тзДок);

	тзРез = СоздатьОбъект("ТаблицаЗначений");
	тзРез.НоваяКолонка("ДокРеализации");
	тзРез.НоваяКолонка("Номенклатура");
	тзРез.НоваяКолонка("Продукция_Элемент");
	тзРез.НоваяКолонка("Количество","Число",12,3);
	тзРез.НоваяКолонка("КоличествоМест","Число",12,3);
	тзРез.НоваяКолонка("ДатаИзготовления");

	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку() = 1 Цикл		
		Попытка
			Если фЭтоВСД_Транзакция(Док) = 1 Тогда 
				ТекНоменклатура = тзДок.Номенклатура;
				ТекКоличество = тзДок.Количество;
			Иначе
				ТекНоменклатура = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаНоменклатура") );
				ТекКоличество = тзДок.ПолучитьЗначение(тзДок.НомерСтроки,ПолучитьКонстанту("НазваниеРеквизитаКоличество"));
			КонецЕсли;			
		Исключение
			Ошибка = "Неверно указан один из параметров: НазваниеРеквизитаНоменклатура ИЛИ НазваниеРеквизитаКоличество ";
			Сообщить(Ошибка,"!");
			СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(7558)");
			Возврат тзРез;
		КонецПопытки;

		//ВСД_Продукция_Элемент = Получить_ВСД_Продукция_Элемент( ТекНоменклатура );		
		ВСД_Продукция_Элемент = Получить_ВСД_Продукция_Элемент_Список( ТекНоменклатура );
		Если ПустоеЗначение(ВСД_Продукция_Элемент)=1 Тогда
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
				Сообщить("["+ТекНоменклатура+"] количество = "+ТекКоличество+" в "+Док+" не указан ВСД_Продукция_Элемент ","!");
			КонецЕсли;
			
			Если ПолучитьКонстанту("ПропускатьПустыеСвойства") =1 Тогда
				Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
					Сообщить("Пропускаем");
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		тзРез.НоваяСтрока();
		тзРез.ДокРеализации = Док;
		тзРез.Номенклатура = ТекНоменклатура;//Номенклатура;

		тзРез.Продукция_Элемент = ВСД_Продукция_Элемент;
		Попытка
			Если тзДок.Единица.Вес=0 Тогда 
				тзРез.Количество = ТекКоличество;
			Иначе
				тзРез.Количество = ТекКоличество*тзДок.Единица.Вес; 
			КонецЕсли;
		Исключение
			тзРез.Количество = ТекКоличество;//тзДок.Количество;
		КонецПопытки;
		Если тзРез.Количество = 0 Тогда
			Сообщить("["+ТекНоменклатура+"] количество = "+ТекКоличество+" в "+Док+" не удалось пересчитать в единицы ВСД = 0 !","!");
		КонецЕсли;
		тзРез.КоличествоМест = тзДок.ПолучитьЗначение(тзДок.НомерСтроки, ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест") );
		
		//Попытка
		//	тзРез.ДатаИзготовления = тзДок.ДатаПроизводства;
		//Исключение   
		//	Сообщить("Не нашли дату производства","!");
		//КонецПопытки;
	КонецЦикла;

	Возврат тзРез;
КонецФункции

//serpent, 22.05.2019
Функция ИзменитьВремяДокумента(Конт) Экспорт
 
	Перем Часы, Минуты, Сек; 
	
    Конт.АвтоВремяОтключить();
    ДатаПоиска = Конт.ДатаДок;
    ДокНайден = 0;

    //Отключено
    //{[-]serpent, 22.05.2019
    //Если Конт.Вид() = "Реализация" Тогда
    //    Докум = СоздатьОбъект("Документ." + Конт.Вид());    
    //Иначе
    //    Докум = СоздатьОбъект("Документ");    
    //КонецЕсли;
    //}[-]_

    Докум = СоздатьОбъект("Документ"); //[+]serpent, 22.05.2019
    Докум.ОбратныйПорядок(1);
    //Если
    Докум.ВыбратьДокументы(ДатаПоиска,ДатаПоиска);
    //= 1 Тогда
    Пока Докум.ПолучитьДокумент() = 1 Цикл
        Если Докум.Выбран() = 1 Тогда
            Докум.ТекущийДокумент().ПолучитьВремя(Часы,Минуты,Сек);			
            ДокНайден = 1;
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Если  ДокНайден = 1  Тогда
        Секунд = Сек + Минуты * 60 + Часы * 3600;
        Новое = Секунд + 2; 
        Ч = Цел(Новое/3600);
        М = Цел((Новое - Ч * 3600)/60);
        С = Новое - Ч * 3600 - М * 60;		
		
		Попытка			
			//Конт.СделатьНеПроведенным();
	        Конт.УстановитьВремя(Ч,М,С);
		Исключение
			Сообщить("Не удалось изменить время документа "+ОписаниеОшибки());
		КонецПопытки;
    Иначе
        //Здесь можно придумать ЧТОТО свое :)
        Конт.АвтоВремяНачалоДня();
	КонецЕсли;

КонецФункции

//{ работа с ТЗ 

//******************************************************************************
// Объединить Таблицы Значений, при условии что у них одинаковая структура !
Функция ОбъединитьТз(Тз1, Тз2) Экспорт
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	//тз1 = СоздатьОбъект("ТаблицаЗначений");
	//тз2 = СоздатьОбъект("ТаблицаЗначений");
	тз1.Выгрузить(тз);
	
	Для А=1 По тз2.КоличествоСтрок() Цикл
		тз.НоваяСтрока();
		Для Б=1 По тз2.КоличествоКолонок() Цикл
			зн = тз2.ПолучитьЗначение(А,Б);
			тз.УстановитьЗначение(тз.НомерСтроки, Б, зн);
		КонецЦикла;
	КонецЦикла;
	
	Возврат тз
КонецФункции

//}

//******************************************************************************
// глРазложить(Знач Стр, Разделитель = ",")
//
// Параметры:
//  Стр - строка, которую необходимо разложить на подстроки.
//        Параметр передается По значению.
//  Разделитель - строка-разделитель, По умолчанию - запятая.
//
// Возвращаемое значение:
//  Список значений элементы которого - подстроки
//
// Описание:
//  Функция "расщепляет" строку на подстроки, используя заданный
//  разделитель. Разделитель может иметь любую длину.
//  Если в качестве разделителя задан пробел, рядом стоящие пробелы
//  считаются одним разделителем, а ведущие И хвостовые пробелы параметра Стр
//  игнорируются.
//  Например,
//  глРазложить(",ку,,,му", ",") возвратит список значений из пяти элементов,
//  три из которых - пустые строки, а
//  глРазложить(" ку   му", " ") возвратит список значений из двух элементов
//
Функция глРазложить(Знач Стр, Разделитель = ",") Экспорт

	Список = СоздатьОбъект("СписокЗначений");
	Длина  = СтрДлина(Разделитель);

	Стр = СокрЛП(Стр);
	Поз = Найти(Стр, Разделитель);

	Пока 0 < Поз Цикл
		Список.ДобавитьЗначение(СокрП(Лев(Стр, Поз-1)));

		Стр = СокрЛ(Сред(Стр, Поз+Длина));
		Поз = Найти(Стр, Разделитель);
	КонецЦикла;

	Список.ДобавитьЗначение(Стр);

	Возврат Список;

КонецФункции // глРазложить()

// Получение списка документов Реализаций за период с отбором По ВыбКонтрагенту
// Возвращаемое значение: ТаблицаЗначений
Функция ПолучитьТзРеализаций( спПараметры ) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьТзРеализаций");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьТзРеализаций( спПараметры );
	КонецЕсли;
	//}

	t1 = Старт();		
	тзРезультат = "";
	
	Состояние("Запрос списка документов ");
	НачДата 		= спПараметры.Получить("НачДата");
	КонДата 		= спПараметры.Получить("КонДата");
	ВыбКонтрагент 	= спПараметры.Получить("ВыбКонтрагент");
	ВыбФирма 		= спПараметры.Получить("ВыбФирма");
	Версия2 		= спПараметры.Получить("Версия2");
	Площадка 		= спПараметры.Получить("Площадка");
	флФильтрПоСкладу= спПараметры.Получить("флФильтрПоСкладу");

	// несколько видов реализаций через ","
	//
	//НазваниеВидаДокументаРеализация = "РасходнаяРеализатора, РасходнаяНакладная"
	НазваниеВидаДокументаРеализация 	= ПолучитьКонстанту("НазваниеВидаДокументаРеализация");
	
	СписокДокументов = глРазложить( НазваниеВидаДокументаРеализация );
	Для СЦ = 1 По СписокДокументов.РазмерСписка() Цикл
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Сообщить(СписокДокументов.ПолучитьЗначение(СЦ));
		КонецЕсли;
	
		НазваниеВидаДокументаРеализация = СписокДокументов.ПолучитьЗначение(СЦ);

		НазваниеВидаСправочникаФирмы		= ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");		
		НазваниеРеквизитаКонтрагент	 		= ПолучитьКонстанту("НазваниеРеквизитаКонтрагент");
		НазваниеРеквизитаГрузополучатель 	= ПолучитьКонстанту("НазваниеРеквизитаГрузополучатель");
		НазваниеРеквизитаНоменклатура		= ПолучитьКонстанту("НазваниеРеквизитаНоменклатура");
		НазваниеРеквизитаКоличество 		= ПолучитьКонстанту("НазваниеРеквизитаКоличество");
		НазваниеРеквизитаКоличествоМест 	= ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест");
		ПропускатьПустыеСвойства 			= ПолучитьКонстанту("ПропускатьПустыеСвойства");
	
		Если ПустаяСтрока(НазваниеВидаСправочникаФирмы) = 1 Тогда
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
				Сообщить("В Параметрах не указано НазваниеВидаСправочникаФирмы!","!"); //Возврат "";
			КонецЕсли;
		КонецЕсли;
		Если ПустаяСтрока(НазваниеРеквизитаГрузополучатель) = 1 Тогда
			Сообщить("Не выбрано название реквизита грузополучатель!","!"); Возврат "";
		КонецЕсли;
	
		ВидГрузополучателя = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(НазваниеРеквизитаГрузополучатель).Вид;
	                        
		//НазваниеРеквизитаНоменклатура = "Номенклатура";
		ФирмаИмяРеквизита = "";
		ФирмаОбщийРеквизит = ПолучитьИмяРеквизитаФирма(НазваниеВидаДокументаРеализация, ФирмаИмяРеквизита);
	
		ФильтрПоСкладу = 0;
		Если флФильтрПоСкладу = 1 Тогда
			Если ПустоеЗначение(Площадка) = 0 Тогда
				ВидСтравочникаСклады = Метаданные.Справочник("ВСД_Площадка").Реквизит("Склад").Вид;
				Если ПустаяСтрока(ВидСтравочникаСклады) = 1 Тогда
					ВидСтравочникаСклады = Метаданные.Справочник("ВСД_СкладыПлощадок").Реквизит("Склад").Вид;
				КонецЕсли;
	
				Если ПустаяСтрока(ВидСтравочникаСклады) = 0 Тогда
					СписокСкладов = СоздатьОбъект("СписокЗначений");
					Если ПустоеЗначение(Площадка.Склад) = 0 Тогда
						СписокСкладов.ДобавитьЗначение(Площадка.Склад);
					КонецЕсли;
					Спр = СоздатьОбъект("Справочник.ВСД_СкладыПлощадок");
					Спр.ИспользоватьВладельца(Площадка);
					Спр.ВыбратьЭлементы();
					Пока Спр.ПолучитьЭлемент() = 1 Цикл
						Если ПустоеЗначение(Спр.Склад) = 0 Тогда
							СписокСкладов.ДобавитьЗначение(Спр.Склад);
						КонецЕсли;
					КонецЦикла;
	
					Если СписокСкладов.РазмерСписка() > 0 Тогда
						ВыбСклад = Площадка.Склад;
						Для nn = 1 По Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки() Цикл
							Рекв = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Вид;
							Если Рекв = ВидСтравочникаСклады Тогда
								ФильтрПоСкладу = 1;
								СкладИмяРеквизита = Метаданные.Документ(НазваниеВидаДокументаРеализация).РеквизитШапки(nn).Идентификатор;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		Попытка
			Если ЭтоSQL=1 Тогда
	
				ТекстЗапроса = "
				|SELECT DISTINCT
				|    Жур.IDDoc as [Док $Документ],
				|    Жур.IDDocDef as Док_вид,
				|	COALESCE(ДокВСД.IDDoc, $ПустойИД) as [ДокВСД $Документ.ВСД_транзакция],
				|	ДокВСД.Статус as [Статус $Перечисление.ВСД_СтатусВСД],
				|	ДокВСД.Отправлен as [Отправлен],
				|	Жур.DocNo as [НомерДок],
				|	$ДокР."+ НазваниеРеквизитаКонтрагент +" as [Контрагент $Справочник.Контрагенты],
				|	$ДокР."+ НазваниеРеквизитаГрузополучатель +" as [Грузополучатель $Справочник."+ ВидГрузополучателя +"],
				|	$ДокР.Склад as [Склад $Справочник.Склады],
				|	СпрХС.ID as [ХС_ГрузоПолучатель $Справочник.ВСД_ХозСубъект],
				|	СпрПЛ.ID as [ПЛ_ГрузоПолучатель $Справочник.ВСД_Площадка],
				|	%ФункцияКоличество% as [Количество],
				|	%ФункцияКоличествоМест% as [КоличествоМест]
				|
				|FROM
				|    _1SJourn Жур (NOLOCK)
				|INNER JOIN
				|	$Документ."+ НазваниеВидаДокументаРеализация +" as ДокР
				|		ON Жур.IDDoc = ДокР.IDDoc
				|LEFT JOIN
				|	$Справочник.ВСД_ХозСубъект as СпрХС
				|	ON $СпрХС.Контрагент = $ДокР."+ НазваниеРеквизитаКонтрагент +"
				|LEFT JOIN
				|	$Справочник.ВСД_Площадка as СпрПЛ
				|	ON $СпрПЛ.Контрагент = $ДокР."+ НазваниеРеквизитаГрузополучатель +"
				|	AND $СпрПЛ.GuidХозСубъекта = $СпрХС.GUID
				|Left join
				//| исключаем помеченные на удаление документы ВСД_транзакция, Иначе дублируются Реализации с пустыми ВСД
				//|	$Документ.ВСД_транзакция as ДокВСД
				|	(SELECT 
				|	Жур.IDDoc as IDDoc,
				|	COALESCE($ДокВСД_1.СтатусВСД, $ПустойИД) as [Статус],
				|	CASE
				|		WHEN $ДокВСД_1.applicationID <> ''
				|		THEN 'Да'
				|		ELSE 'Нет'
				|	END as [Отправлен],
				|	$ДокВСД_1.ДокОснование as ДокОснование
				|	FROM
				|   	_1SJourn Жур (NOLOCK)
				|	INNER JOIN
				|		$Документ.ВСД_транзакция as ДокВСД_1
				|			ON Жур.IDDoc = ДокВСД_1.IDDoc
				// ВСД тоже фильтруем По фирме !!!
				|				%УсловиеПоФирме%
				|WHERE
				| Жур.Date_Time_IDDoc BETWEEN :НачДата AND :КонДата~
				| AND Жур.ISMARK = 0
				|	) as ДокВСД
				|	ON SUBSTRING(ДокВСД.ДокОснование, 5, 9) = Жур.IDDoc	
				|
				|WHERE
				|    Жур.Date_Time_IDDoc BETWEEN :НачДата AND :КонДата~ AND
				|    Жур.IDDocDef = $ВидДокумента."+ НазваниеВидаДокументаРеализация +"
				|	and Жур.Closed & 1 = 1
				|
				|	and %ФункцияКоличество%  > 0
				|
				|	%УсловиеПоГрузополучателю%
				|	%УсловиеПоФирме%
				|	%УсловиеПоСкладу%
				|
				|order by Жур.DocNo
				|";
	
				Если ПустоеЗначение(Версия2) = 0 Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВСД_транзакция", "ВСД2_Транзакция");
				КонецЕсли;
	
				Если ПропускатьПустыеСвойства = 0 Тогда
					ФункцияКоличество = " 
					| (SELECT SUM( $ДокСтроки1."+НазваниеРеквизитаКоличество+")
					|  FROM $ДокументСтроки."+НазваниеВидаДокументаРеализация+" AS ДокСтроки1 (NOLOCK)
					|  WHERE ДокСтроки1.IDDoc = Жур.IDDoc
					|   AND $ДокСтроки1."+НазваниеРеквизитаКоличество+" > 0) ";
					ФункцияКоличествоМест = " 
					| (SELECT SUM( $ДокСтроки2."+НазваниеРеквизитаКоличествоМест+" )
					|  FROM $ДокументСтроки."+НазваниеВидаДокументаРеализация+" AS ДокСтроки2 (NOLOCK)
					|  WHERE ДокСтроки2.IDDoc = Жур.IDDoc
					|   AND $ДокСтроки2."+НазваниеРеквизитаКоличество+" > 0) ";
				Иначе
					ФункцияКоличество = " 
					| (SELECT SUM( $ДокСтроки1."+НазваниеРеквизитаКоличество+")
					|  FROM $ДокументСтроки."+НазваниеВидаДокументаРеализация+" AS ДокСтроки1
					|  WHERE ДокСтроки1.IDDoc = Жур.IDDoc
					|   AND $ДокСтроки1."+НазваниеРеквизитаКоличество+" > 0
					|   AND EXISTS(SELECT $Спр1.ВСД_Продукция_Элемент
					|      FROM $Справочник.ВСД_Номенклатура_Соответсвия AS Спр1 (NOLOCK)
					|      WHERE  $Спр1.ВСД_Продукция_Элемент <> $ПустойИД 
					|		AND Спр1.ISMARK = 0
					|       AND Спр1.ParentExt = $ДокСтроки1."+НазваниеРеквизитаНоменклатура+")) ";				
					ФункцияКоличествоМест = " 
					| (SELECT SUM( $ДокСтроки2."+НазваниеРеквизитаКоличествоМест+")
					|  FROM $ДокументСтроки."+НазваниеВидаДокументаРеализация+" AS ДокСтроки2 (NOLOCK)
					|  WHERE ДокСтроки2.IDDoc = Жур.IDDoc
					|   AND $ДокСтроки2."+НазваниеРеквизитаКоличество+" > 0
					|   AND EXISTS(SELECT $Спр2.ВСД_Продукция_Элемент
					|      FROM $Справочник.ВСД_Номенклатура_Соответсвия AS Спр2 (NOLOCK)
					|      WHERE  Спр2.ParentExt = $ДокСтроки2."+НазваниеРеквизитаНоменклатура+"
					|		AND Спр2.ISMARK = 0)) ";
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ФункцияКоличество%", ФункцияКоличество );
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ФункцияКоличествоМест%", ФункцияКоличествоМест );
				
				
				УсловиеПоГрузополучателю = "";
				Если ПустоеЗначение(ВыбКонтрагент) = 0 Тогда
					Если ВыбКонтрагент.ЭтоГруппа() = 1 Тогда
						УсловиеПоГрузополучателю = " and $ДокР."+ НазваниеРеквизитаГрузополучатель +" IN (SELECT Val FROM #ГруппаК) ";
						RS.УложитьСписокОбъектов(ВыбКонтрагент, "#ГруппаК","Контрагенты");
					Иначе
						УсловиеПоГрузополучателю = " AND $ДокР."+НазваниеРеквизитаГрузополучатель+" = :ВыбКонтрагент ";
						RS.УстановитьТекстовыйПараметр("ВыбКонтрагент", ВыбКонтрагент);
					КонецЕсли;								
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоГрузополучателю%", УсловиеПоГрузополучателю);
	
				//условие По фирме
				УсловиеПоФирме="";
				Если ПустоеЗначение(ВыбФирма) = 0 Тогда
					Если ФирмаОбщийРеквизит > 0 Тогда
						Если ФирмаОбщийРеквизит = 1 Тогда
							УсловиеПоФирме = " and Жур.$ОбщийРеквизит."+ФирмаИмяРеквизита+" = :ВыбФирма";
						Иначе
							УсловиеПоФирме = " and $ДокР."+ФирмаИмяРеквизита+" = :ВыбФирма";
						КонецЕсли;
						RS.УстановитьТекстовыйПараметр("ВыбФирма", ВыбФирма);
					КонецЕсли;
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоФирме%", УсловиеПоФирме);
	
				//условие По складу
				УсловиеПоСкладу = "";
				Если ФильтрПоСкладу = 1 Тогда
					Если СписокСкладов.РазмерСписка() = 1 Тогда
						УсловиеПоСкладу = " and $ДокР."+СкладИмяРеквизита+" = :ВыбСклад";
						RS.УстановитьТекстовыйПараметр("ВыбСклад", СписокСкладов.ПолучитьЗначение(1));
					Иначе
						УсловиеПоСкладу = " and $ДокР."+ СкладИмяРеквизита +" IN (SELECT Val FROM #Склады) ";
						RS.УложитьСписокОбъектов(СписокСкладов, "#Склады",ВидСтравочникаСклады);
					КонецЕсли;
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоСкладу%", УсловиеПоСкладу);
	
				RS.УстановитьТекстовыйПараметр("НачДата", НачДата);
				RS.УстановитьТекстовыйПараметр("КонДата", КонДата);
	
				Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
					RS.Отладка(1);
				КонецЕсли;
				ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
				//ТЗ.ВыбратьСтроку();
	
			Иначе
	
				Запрос = базаДанных.НовыйЗапрос();
	
				ТекстЗапроса = "
				|SELECT
				|    Жур.IDDoc as [Док :Документ],
				|    Жур.IDDocDef as Док_вид,
				|	Жур.DocNo as [НомерДок],
				|	COALESCE(ДокВСД.IDDoc, :ПустойИД) as [ДокВСД :Документ.ВСД_транзакция],
				|	ДокВСД.СтатусВСД as [Статус :Перечисление.ВСД_СтатусВСД],
				|	ДокВСД.Отправлен as [Отправлен],
				|	ДокР."+ НазваниеРеквизитаКонтрагент +" as [Контрагент :Справочник.Контрагенты],
				|	ДокР."+ НазваниеРеквизитаГрузополучатель +" as [Грузополучатель :Справочник."+ ВидГрузополучателя +"],
				|	ДокР.Склад as [Склад :Справочник.Склады],
				|	СпрХС.ID as [ХС_ГрузоПолучатель :Справочник.ВСД_ХозСубъект],
				|	СпрПЛ.ID as [ПЛ_ГрузоПолучатель :Справочник.ВСД_Площадка],
				|	%ФункцияКоличество% as [Количество],
				|	%ФункцияКоличествоМест% as [КоличествоМест]
				|
				|FROM
				|    Журнал Жур
				|INNER JOIN
				| [Документ."+НазваниеВидаДокументаРеализация+"] AS ДокР
				|  ON Жур.IDDoc = ДокР.IDDoc
				|  %УсловиеПоГрузополучателю%
				|  %УсловиеПоСкладу%
				|LEFT JOIN
				|	[Справочник.ВСД_ХозСубъект] as СпрХС
				|	ON СпрХС.Контрагент = ДокР."+ НазваниеРеквизитаКонтрагент +"
				|LEFT JOIN
				|	[Справочник.ВСД_Площадка] as СпрПЛ
				|	ON СпрПЛ.Контрагент = ДокР."+ НазваниеРеквизитаГрузополучатель +"
				|	AND СпрПЛ.GuidХозСубъекта = СпрХС.GUID
				|Left join
				//| исключаем помеченные на удаление документы ВСД_транзакция, Иначе дублируются Реализации с пустыми ВСД
				//|	$Документ.ВСД_транзакция as ДокВСД
				|	(SELECT 
				|	Жур.IDDoc as IDDoc,
				|	COALESCE(ДокВСД_1.СтатусВСД, :ПустойИД) as [СтатусВСД],
				|	COALESCE(ДокВСД_1.Статус, :ПустойИД) as [Отправлен],
				|	ДокВСД_1.ДокОснование as ДокОснование
				|	FROM
				|   	Журнал Жур
				|	INNER JOIN
				|		[Документ.ВСД2_транзакция] as ДокВСД_1
				|			ON Жур.IDDoc = ДокВСД_1.IDDoc
				// ВСД тоже фильтруем По фирме !!!
				|				%УсловиеПоФирмеВСД%
				|WHERE
				| Жур.idx_date_time_iddoc BETWEEN :НачДата AND :КонДата~
				| AND Жур.ISMARK = ''			
				|	) as ДокВСД
				|	ON SUBSTR(ДокВСД.ДокОснование, 5, 9) = Жур.IDDoc	
				|
				|WHERE
				|    Жур.idx_date_time_iddoc BETWEEN :НачДата AND :КонДата~ AND
				|    Жур.IDDocDef = :ВидДокумента."+НазваниеВидаДокументаРеализация+"
				|	and Жур.Closed & 1 = 1
				|
				|	and  %ФункцияКоличество% >0
				|
				|	%УсловиеПоФирме%
				|
				|ORDER BY Жур.DocNo
				|";
	
				УсловиеПоГрузополучателю = "";
	
				Если ПустоеЗначение(Версия2) = 0 Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВСД_транзакция", "ВСД2_Транзакция");
				КонецЕсли;
	
				Если ПропускатьПустыеСвойства = 0 Тогда
					ФункцияКоличество = " 
					| (SELECT TOTAL(ДокСтроки1."+НазваниеРеквизитаКоличество+")
					|  FROM [ДокументСтроки."+НазваниеВидаДокументаРеализация+"] AS ДокСтроки1
					|  WHERE ДокСтроки1.IDDoc = Жур.IDDoc
					|   AND ДокСтроки1."+НазваниеРеквизитаКоличество+" > 0) ";
					ФункцияКоличествоМест = "
					| (SELECT TOTAL(ДокСтроки2."+НазваниеРеквизитаКоличествоМест+")
					|  FROM [ДокументСтроки."+НазваниеВидаДокументаРеализация+"] AS ДокСтроки2
					|  WHERE ДокСтроки2.IDDoc = Жур.IDDoc
					|   AND ДокСтроки2."+НазваниеРеквизитаКоличество+" > 0) ";
				Иначе
					ФункцияКоличество = " 
					| (SELECT TOTAL(ДокСтроки1."+НазваниеРеквизитаКоличество+")
					|  FROM [ДокументСтроки."+НазваниеВидаДокументаРеализация+"] AS ДокСтроки1
					|  WHERE ДокСтроки1.IDDoc = Жур.IDDoc
					|   AND ДокСтроки1."+НазваниеРеквизитаКоличество+" > 0
					|   AND EXISTS(
					|		SELECT Спр1.ВСД_Продукция_Элемент
					|      FROM [Справочник.ВСД_Номенклатура_Соответсвия] AS Спр1
					|      WHERE  Спр1.ParentExt = ДокСтроки1."+НазваниеРеквизитаНоменклатура+"
					|		AND Спр1.ISMARK = '' ) 
					|	) ";
					ФункцияКоличествоМест = "
					| (SELECT TOTAL(ДокСтроки2."+НазваниеРеквизитаКоличествоМест+")
					|  FROM [ДокументСтроки."+НазваниеВидаДокументаРеализация+"] AS ДокСтроки2
					|  WHERE ДокСтроки2.IDDoc = Жур.IDDoc
					|   AND ДокСтроки2."+НазваниеРеквизитаКоличество+" > 0
					|   AND EXISTS(SELECT Спр2.ВСД_Продукция_Элемент
					|      FROM [Справочник.ВСД_Номенклатура_Соответсвия] AS Спр2
					|      WHERE  Спр2.ParentExt = ДокСтроки2."+НазваниеРеквизитаНоменклатура+"
					|		AND Спр2.ISMARK = '' )) ";
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ФункцияКоличество%", ФункцияКоличество );
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ФункцияКоличествоМест%", ФункцияКоличествоМест );
							
				Если ПустоеЗначение(ВыбКонтрагент) = 0 Тогда
					Если ВыбКонтрагент.ЭтоГруппа() = 1 Тогда
						УсловиеПоГрузополучателю = " AND ДокР."+НазваниеРеквизитаГрузополучатель+" IN (SELECT Val FROM ГруппаК) ";
						базаДанных.УложитьОбъекты(ВыбКонтрагент, "ГруппаК", "Контрагенты");
					Иначе
						УсловиеПоГрузополучателю = " AND ДокР."+НазваниеРеквизитаГрузополучатель+" = :ВыбКонтрагент ";
						Запрос.Подставлять("ВыбКонтрагент", ВыбКонтрагент);
					КонецЕсли;				
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоГрузополучателю%", УсловиеПоГрузополучателю);
	
				//условие По фирме
				УсловиеПоФирме="";
				Если ПустоеЗначение(ВыбФирма) = 0 Тогда
					Если ФирмаОбщийРеквизит > 0 Тогда
						Если ФирмаОбщийРеквизит = 1 Тогда
							УсловиеПоФирме = " and Жур."+ФирмаИмяРеквизита+" = :ВыбФирма";
							УсловиеПоФирмеВСД = УсловиеПоФирме;
						ИначеЕсли ФирмаОбщийРеквизит = 2 Тогда
							УсловиеПоФирме = " and ДокР."+ФирмаИмяРеквизита+" = :ВыбФирма";
							УсловиеПоФирмеВСД = ""
						КонецЕсли;
						Запрос.Подставлять("ВыбФирма", ВыбФирма);
					КонецЕсли;
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоФирме%", УсловиеПоФирме);
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоФирмеВСД%", УсловиеПоФирмеВСД);
	
				//условие По складу
				УсловиеПоСкладу = "";
				Если ФильтрПоСкладу = 1 Тогда
					Если СписокСкладов.РазмерСписка() = 1 Тогда
						УсловиеПоСкладу = " and ДокР."+СкладИмяРеквизита+" = :ВыбСклад";
						Запрос.Подставлять("ВыбСклад", СписокСкладов.ПолучитьЗначение(1));
					Иначе
						УсловиеПоСкладу = " and ДокР."+ СкладИмяРеквизита +" IN (SELECT Val FROM Склады) ";
						базаДанных.УложитьОбъекты(СписокСкладов, "Склады",ВидСтравочникаСклады);
					КонецЕсли;
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоСкладу%", УсловиеПоСкладу);
	
				//Запрос.Подставлять("ВыбКлиент", ВыбКлиент);
				Запрос.Подставлять("НачДата", НачДата);
				Запрос.Подставлять("КонДата", КонДата);
	
				Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
					Запрос.Отладка(1);
				КонецЕсли;		
				ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
				//ТЗ.ВыбратьСтроку();
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Не удалось выполнить запрос По документам. Проверьте параметры
			|"+ ОписаниеОшибки());
			
			тз = СоздатьОбъект("ТаблицаЗначений");
		КонецПопытки;

		//Объединяем результаты
		Если тзРезультат <> "" Тогда 
			тзРезультат = ОбъединитьТз( тзРезультат, тз);
		Иначе 
			тзРезультат = тз;
		КонецЕсли;
		
	КонецЦикла;		
	
	Финиш(t1, Сам(), "ПолучитьТзРеализаций", );
	
	Состояние("");
	Возврат ТЗ;
КонецФункции

// Получение списка документов ПеремещениеТМЦ за период с отбором По ВыбКонтрагенту
// Возвращаемое значение: ТаблицаЗначений
Функция ПолучитьТзПеремещений( спПараметры ) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьТзПеремещений");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьТзПеремещений( спПараметры );
	КонецЕсли;
	//}

	t1 = Старт();		
	
	Состояние("Запрос списка документов ");
	НачДата 		= спПараметры.Получить("НачДата");
	КонДата 		= спПараметры.Получить("КонДата");
	ВыбКонтрагент 	= спПараметры.Получить("ВыбКонтрагент");
	ВыбФирма 		= спПараметры.Получить("ВыбФирма");
	Версия2 		= спПараметры.Получить("Версия2");
	Площадка 		= спПараметры.Получить("Площадка");
	флФильтрПоСкладу= спПараметры.Получить("флФильтрПоСкладу");

	НазваниеРеквизитаКоличествоМест 	= ПолучитьКонстанту("НазваниеРеквизитаКоличествоМест");

	НазваниеВидаСправочникаФирмы	= ПолучитьКонстанту("НазваниеВидаСправочникаФирмы");
	ВидДокументаПеремещениеТМЦ 		= ПолучитьКонстанту("НазваниеВидаДокументаПеремещениеТМЦ"); 
	ПропускатьПустыеСвойства 		= ПолучитьКонстанту("ПропускатьПустыеСвойства"); 
	НазваниеРеквизитаНоменклатура	= ПолучитьКонстанту("НазваниеРеквизитаНоменклатура");
	НазваниеРеквизитаКоличество 	= ПолучитьКонстанту("НазваниеРеквизитаКоличество");	
	
	ФильтрПоСкладу = 0;
	Если флФильтрПоСкладу = 1 Тогда
		Если ПустоеЗначение(Площадка) = 0 Тогда
			ВидСтравочникаСклады = Метаданные.Справочник("ВСД_Площадка").Реквизит("Склад").Вид;
			Если ПустаяСтрока(ВидСтравочникаСклады) = 1 Тогда
				ВидСтравочникаСклады = Метаданные.Справочник("ВСД_СкладыПлощадок").Реквизит("Склад").Вид;
			КонецЕсли;

			Если ПустаяСтрока(ВидСтравочникаСклады) = 0 Тогда
				СписокСкладов = СоздатьОбъект("СписокЗначений");
				Если ПустоеЗначение(Площадка.Склад) = 0 Тогда
					СписокСкладов.ДобавитьЗначение(Площадка.Склад);
				КонецЕсли;
				Спр = СоздатьОбъект("Справочник.ВСД_СкладыПлощадок");
				Спр.ИспользоватьВладельца(Площадка);
				Спр.ВыбратьЭлементы();
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Если ПустоеЗначение(Спр.Склад) = 0 Тогда
						СписокСкладов.ДобавитьЗначение(Спр.Склад);
					КонецЕсли;
				КонецЦикла;

				Если СписокСкладов.РазмерСписка() > 0 Тогда
					ВыбСклад = Площадка.Склад;
					Для nn = 1 По Метаданные.Документ(ВидДокументаПеремещениеТМЦ).РеквизитШапки() Цикл
						Рекв = Метаданные.Документ(ВидДокументаПеремещениеТМЦ).РеквизитШапки(nn).Вид;
						Если Рекв = ВидСтравочникаСклады Тогда
							ФильтрПоСкладу = 1;
							СкладИмяРеквизита = Метаданные.Документ(ВидДокументаПеремещениеТМЦ).РеквизитШапки(nn).Идентификатор;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ФирмаИмяРеквизита = "";
	ФирмаОбщийРеквизит = ПолучитьИмяРеквизитаФирма(ВидДокументаПеремещениеТМЦ, ФирмаИмяРеквизита);

	Если ПустаяСтрока(НазваниеВидаСправочникаФирмы) = 1 Тогда
		Сообщить("В Параметрах не указано НазваниеВидаСправочникаФирмы!","!"); //Возврат "";
	КонецЕсли;	
	Если ВидДокументаПеремещениеТМЦ = "" Тогда
		Предупреждение("Не заполнена константа ВидДокументаПеремещениеТМЦ"); 
	КонецЕсли;

	ВидСправочникаСклады = Метаданные.Справочник("ВСД_Площадка").Реквизит("Склад").Вид;
	Если ПустаяСтрока(ВидСправочникаСклады) = 1 Тогда
		ВидСтравочникаСклады = Метаданные.Справочник("ВСД_СкладыПлощадок").Реквизит("Склад").Вид;
	КонецЕсли;      
	Если ПустаяСтрока(ВидСправочникаСклады) = 1 Тогда
		Предупреждение("Не известен ВидСправочникаСклады"); 
	КонецЕсли;      

	//ФильтрПоСкладу = 0;
	//Если флФильтрПоСкладу = 1 Тогда
	//	Если ПустаяСтрока(ВидСтравочникаСклады) = 0 Тогда
	//		СписокСкладов = СоздатьОбъект("СписокЗначений");
	//		Если ПустоеЗначение(Отправитель_Площадка.Склад) = 0 Тогда
	//			СписокСкладов.ДобавитьЗначение(Отправитель_Площадка.Склад);
	//		КонецЕсли;
	//		Спр = СоздатьОбъект("Справочник.ВСД_СкладыПлощадок");
	//		Спр.ИспользоватьВладельца(Отправитель_Площадка);         
	//		Спр.ВыбратьЭлементы();
	//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//			Если ПустоеЗначение(Спр.Склад) = 0 Тогда
	//				СписокСкладов.ДобавитьЗначение(Спр.Склад);
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Если СписокСкладов.РазмерСписка() > 0 Тогда
	//			ФильтрПоСкладу = 1;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ЭтоSQL=1 Тогда 	
			
	
	  	ТекстЗапроса = "
			|SELECT DISTINCT
			|    Жур.IDDoc as [Док $Документ],
			|    Жур.IDDocDef as Док_вид,
			|	COALESCE(ДокВСД.IDDoc, $ПустойИД) as [ДокВСД $Документ.ВСД_транзакция],
			|	ДокВСД.Статус as [Статус],
			|	ДокВСД.Отправлен as [Отправлен],
			|	Жур.DocNo as [НомерДок],
			|	$ДокР.Склад as [Склад $Справочник.Склады], 
			|	$ДокР.СкладПолучатель as [ГрузоПолучатель $Справочник.Склады],
			|	СпрХС.ID as [ХС_ГрузоПолучатель $Справочник.ВСД_ХозСубъект],
			|	СпрПЛ.ID as [ПЛ_ГрузоПолучатель $Справочник.ВСД_Площадка],
			|	%ФункцияКоличество% as [Количество],
			|	%ФункцияКоличествоМест% as [КоличествоМест]
			|
			|FROM
			|    _1SJourn Жур (NOLOCK)
			|INNER JOIN
			|	$Документ."+ ВидДокументаПеремещениеТМЦ +" as ДокР
			|		ON Жур.IDDoc = ДокР.IDDoc
			|LEFT JOIN
			|	$Справочник.ВСД_ХозСубъект as СпрХС
			|	ON СпрХС.ID = :Отправитель_ХозСубъект
			|LEFT JOIN
			|	$Справочник.ВСД_Площадка as СпрПЛ
			|	ON $СпрПЛ.Склад = $ДокР.СкладПолучатель
			|	AND $СпрПЛ.GuidХозСубъекта = $СпрХС.GUID
			|Left join
			//| исключаем помеченные на удаление документы ВСД_транзакция, Иначе дублируются Реализации с пустыми ВСД
			//|	$Документ.ВСД_транзакция as ДокВСД
			|	(SELECT 
			|	Жур.IDDoc as IDDoc,
			|	COALESCE($ДокВСД_1.Статус, $ПустойИД) as [Статус],
			|	CASE
			|		WHEN $ДокВСД_1.applicationID <> ''
			|		THEN 'Да'
			|		ELSE 'Нет'
			|	END as [Отправлен],
			|	$ДокВСД_1.ДокОснование as ДокОснование
			|	FROM
			|   	_1SJourn Жур (NOLOCK)
			|	INNER JOIN
			|		$Документ.ВСД_транзакция as ДокВСД_1
			|			ON Жур.IDDoc = ДокВСД_1.IDDoc
			// ВСД тоже фильтруем По фирме !!!
			|				%УсловиеПоФирме%
			|WHERE
			| Жур.Date_Time_IDDoc BETWEEN :НачДата AND :КонДата~
			| AND Жур.ISMARK = 0
			|	) as ДокВСД
			|	ON SUBSTRING(ДокВСД.ДокОснование, 5, 9) = Жур.IDDoc	
			|
			|WHERE
			|    Жур.Date_Time_IDDoc BETWEEN :НачДата AND :КонДата~ AND
			|    Жур.IDDocDef = $ВидДокумента."+ ВидДокументаПеремещениеТМЦ +"
			|	and Жур.Closed & 1 = 1
			|
			|	and %ФункцияКоличество%  > 0
			|
			|	%УсловиеПоФирме%
			|	%УсловиеПоСкладу%
			|
			|order by Жур.DocNo
			|";

			Если ПустоеЗначение(Версия2) = 0 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВСД_транзакция", "ВСД2_Транзакция");
			КонецЕсли;

			Если ПропускатьПустыеСвойства = 0 Тогда
				ФункцияКоличество = " 
				| (SELECT SUM( $ДокСтроки1."+НазваниеРеквизитаКоличество+")
				|  FROM $ДокументСтроки."+ВидДокументаПеремещениеТМЦ+" AS ДокСтроки1 (NOLOCK)
				|  WHERE ДокСтроки1.IDDoc = Жур.IDDoc
				|   AND $ДокСтроки1."+НазваниеРеквизитаКоличество+" > 0) ";
				ФункцияКоличествоМест = " 
				| (SELECT SUM( $ДокСтроки2."+НазваниеРеквизитаКоличествоМест+" )
				|  FROM $ДокументСтроки."+ВидДокументаПеремещениеТМЦ+" AS ДокСтроки2 (NOLOCK)
				|  WHERE ДокСтроки2.IDDoc = Жур.IDDoc
				|   AND $ДокСтроки2."+НазваниеРеквизитаКоличество+" > 0) ";
			Иначе
				ФункцияКоличество = " 
				| (SELECT SUM( $ДокСтроки1."+НазваниеРеквизитаКоличество+")
				|  FROM $ДокументСтроки."+ВидДокументаПеремещениеТМЦ+" AS ДокСтроки1 (NOLOCK)
				|  WHERE ДокСтроки1.IDDoc = Жур.IDDoc
				|   AND $ДокСтроки1."+НазваниеРеквизитаКоличество+" > 0
				|   AND EXISTS(SELECT $Спр1.ВСД_Продукция_Элемент
				|      FROM $Справочник.ВСД_Номенклатура_Соответсвия AS Спр1 (NOLOCK)
				|      WHERE  $Спр1.ВСД_Продукция_Элемент <> $ПустойИД 
				|		AND Спр1.ISMARK =0
				|       AND Спр1.ParentExt = $ДокСтроки1."+НазваниеРеквизитаНоменклатура+")) ";				
				ФункцияКоличествоМест = " 
				| (SELECT SUM( $ДокСтроки2."+НазваниеРеквизитаКоличествоМест+")
				|  FROM $ДокументСтроки."+ВидДокументаПеремещениеТМЦ+" AS ДокСтроки2 (NOLOCK)
				|  WHERE ДокСтроки2.IDDoc = Жур.IDDoc
				|   AND $ДокСтроки2."+НазваниеРеквизитаКоличество+" > 0
				|   AND EXISTS(SELECT $Спр2.ВСД_Продукция_Элемент
				|      FROM $Справочник.ВСД_Номенклатура_Соответсвия AS Спр2 (NOLOCK)
				|      WHERE  Спр2.ParentExt = $ДокСтроки2."+НазваниеРеквизитаНоменклатура+"
				|	AND Спр2.ISMARK = 0)) ";//
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ФункцияКоличество%", ФункцияКоличество );
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ФункцияКоличествоМест%", ФункцияКоличествоМест );
			
		
			// условие По фирме
			УсловиеПоФирме="";
			Если ПустоеЗначение(ВыбФирма) = 0 Тогда
				Если ФирмаОбщийРеквизит > 0 Тогда
					Если ФирмаОбщийРеквизит = 1 Тогда
						УсловиеПоФирме = " and Жур.$ОбщийРеквизит."+ФирмаИмяРеквизита+" = :ВыбФирма";
					Иначе
						УсловиеПоФирме = " and $ДокР."+ФирмаИмяРеквизита+" = :ВыбФирма";
					КонецЕсли;
					RS.УстановитьТекстовыйПараметр("ВыбФирма", ВыбФирма);
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоФирме%", УсловиеПоФирме);

			// условие По складу
			УсловиеПоСкладу = "";
			Если ФильтрПоСкладу = 1 Тогда
				Если СписокСкладов.РазмерСписка() = 1 Тогда
					УсловиеПоСкладу = " and $ДокР."+СкладИмяРеквизита+" = :ВыбСклад";
					RS.УстановитьТекстовыйПараметр("ВыбСклад", СписокСкладов.ПолучитьЗначение(1));
				Иначе
					УсловиеПоСкладу = " and $ДокР."+ СкладИмяРеквизита +" IN (SELECT Val FROM #Склады) ";
					RS.УложитьСписокОбъектов(СписокСкладов, "#Склады",ВидСтравочникаСклады);
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоСкладу%", УсловиеПоСкладу);

			RS.УстановитьТекстовыйПараметр("Отправитель_ХозСубъект", ПолучитьКонстанту("Отправитель_ХозСубъект") );
			RS.УстановитьТекстовыйПараметр("НачДата", НачДата);
			RS.УстановитьТекстовыйПараметр("КонДата", КонДата);

			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
				RS.Отладка(1);
			КонецЕсли;		
			ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	  	
	Иначе	
			
		Запрос = базаДанных.НовыйЗапрос();
	
		ТекстЗапроса = "
		|SELECT
		|    Жур.IDDoc as [Док :Документ],
		|    Жур.IDDocDef as Док_вид,
		|	Жур.DocNo as [НомерДок],
		|	ДокВСД.IDDoc as [ДокВСД $Документ.ВСД2_Транзакция],
		|	ДокР.Склад as [Склад :Справочник."+ВидСправочникаСклады+"],
		|	ДокР.СкладПолучатель as [ГрузоПолучатель :Справочник."+ВидСправочникаСклады+"],		
		|	СпрХС.ID as [ХС_ГрузоПолучатель :Справочник.ВСД_ХозСубъект],
		|	СпрПЛ.ID as [ПЛ_ГрузоПолучатель :Справочник.ВСД_Площадка],
		|	SUM(ДокСтроки."+ НазваниеРеквизитаКоличество +") as [Количество]
		|FROM
		|    Журнал Жур
		|INNER JOIN 
		|	[ДокументСтроки."+ВидДокументаПеремещениеТМЦ+"] as ДокСтроки 
		|		ON Жур.IDDoc = ДокСтроки.IDDoc
		|		AND ДокСтроки."+НазваниеРеквизитаКоличество+" > 0";
		Если ПропускатьПустыеСвойства = 1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|inner join [Справочник.Номенклатура] as Ном 
			|	on ДокСтроки."+НазваниеРеквизитаНоменклатура+" = Ном.ID
			|	and Ном.ВСД_Продукция_Элемент <> '     0   '
			|";
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|INNER JOIN 
		|	[Документ."+ВидДокументаПеремещениеТМЦ+"] as ДокР 
		|		ON Жур.IDDoc = ДокР.IDDoc
		|LEFT JOIN
		|	[Справочник.ВСД_ХозСубъект] as СпрХС
		|	ON СпрХС.ID = :Отправитель_ХозСубъект
		|LEFT JOIN
		|	[Справочник.ВСД_Площадка] as СпрПЛ
		|	ON СпрПЛ.Склад = ДокР.СкладПолучатель
		|	AND СпрПЛ.GuidХозСубъекта = СпрХС.GUID
		|Left join 
		|	[Документ.ВСД2_Транзакция] as ДокВСД
		|		ON SUBSTR(ДокВСД.ДокОснование, 5, 9) = Жур.IDDoc
		|WHERE
		|    Жур.idx_date_time_iddoc BETWEEN :НачДата AND :КонДата~ 
		|   AND Жур.IDDocDef = :ВидДокумента."+ВидДокументаПеремещениеТМЦ+"
		//| 	AND COALESCE(ДокВСД.Статус,'*') <> 'Аннулирова'
		//|	%УсловиеПоФирме%
		//|	%УсловиеПоСкладу%
		|
		|GROUP BY
		|	Жур.IDDoc,
		|	Жур.IDDocDef,
		|	Жур.DocNo,
		|	ДокР.Склад,
		|	ДокР.СкладПолучатель
		|order by Жур.DocNo
		|";
		
		//// условие По фирме
		//УсловиеПоФирме="";
		//Если ПустоеЗначение(ВыбФирма) = 0 Тогда		
		//	Если ФирмаОбщийРеквизит > 0 Тогда
		//		Если ФирмаОбщийРеквизит = 1 Тогда
		//			УсловиеПоФирме = " and Жур."+ФирмаИмяРеквизита+" = :ВыбФирма";
		//		ИначеЕсли ФирмаОбщийРеквизит = 2 Тогда
		//			УсловиеПоФирме = " and ДокР."+ФирмаИмяРеквизита+" = :ВыбФирма";
		//		КонецЕсли;
		//		Запрос.Подставлять("ВыбФирма", ВыбФирма);
		//	КонецЕсли;
		//КонецЕсли;
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоФирме%", УсловиеПоФирме);

		//// условие По складу
		//УсловиеПоСкладу = "";
		//Если ФильтрПоСкладу = 1 Тогда
		//	Если СписокСкладов.РазмерСписка() = 1 Тогда
		//		УсловиеПоСкладу = " and ДокР.Склад = :ВыбСклад";
		//		Запрос.Подставлять("ВыбСклад", СписокСкладов.ПолучитьЗначение(1));
		//	Иначе
		//		УсловиеПоСкладу = " and ДокР.Склад IN (SELECT Val FROM Склады) ";
		//		базаДанных.УложитьОбъекты(СписокСкладов, "Склады",ВидСтравочникаСклады);
		//	КонецЕсли;
		//КонецЕсли;
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоСкладу%", УсловиеПоСкладу);

		Запрос.Подставлять("Отправитель_ХозСубъект", ПолучитьКонстанту("Отправитель_ХозСубъект") );
		Запрос.Подставлять("НачДата", НачДата);
		Запрос.Подставлять("КонДата", КонДата);
	
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Запрос.Отладка(1);
		КонецЕсли;		
		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		// ТЗ.ВыбратьСтроку();
	КонецЕсли;

	Финиш(t1, Сам(), "ПолучитьТзПеремещений", );
	
	Состояние("");
	Возврат ТЗ;
КонецФункции

//************* Функции для подбора партий По ЛИФО, ФИФО, другой сортировке
// возможно вынести в Параметры порядок побора партий

// ПолучитьАкуальныеПартииИзСправочника
//Получаем Актуальные партии По фильтру с возможностью сортировки По указанному полю
// тзДатаИзготовления = таблица значения
// 1 - Продукция_Элемент
// 2 - ВыбДата = строка(10)
Функция ПолучитьАктуальныеПартииИзСправочника(ВыбПродукция_Элемент, ВыбПлощадка = "", ВыбХС = "", тзДатаИзготовления="") Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьАктуальныеПартииИзСправочника");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьАктуальныеПартииИзСправочника(ВыбПродукция_Элемент, ВыбПлощадка, ВыбХС, тзДатаИзготовления);
	КонецЕсли;
	//}
	
    ЗаполнятьЭлементыБезПартий = ПолучитьКонстанту("ПарамЗаполнятьВСДБезПартий");
    ПолеСортировки = ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания");
    ЗнакСортировки = ПолучитьКонстанту("ПарамЗнакСортировкиУбывание");
	
	_ЗнакСортировки = ?(ПустоеЗначение(ЗнакСортировки) = 1,"ASC", "DESC");

	Если ЭтоSQL=1 Тогда
		ТекстЗапроса = "
		|SELECT
		|   СпрПартии.ID as [ВСД_Партия $Справочник.ВСД_Партия],
		|   $СпрПартии.Продукция_Элемент as [Продукция_Элемент $Справочник.ВСД_Продукция_Элемент],
		|   $СпрПартии.%ПолеСортировки% as ПолеСортировки,
		|	$СпрПартии.Количество as Количество,
		|	$СпрПартии.КоличествоМест as КоличествоМест
		|
		|FROM 	$Справочник.ВСД_Партия AS СпрПартии (NOLOCK)
		|
		|WHERE
		|   %ОтборПоЭлементам%
		|	and ($СпрПартии.Количество > 0 )
		|	and (СпрПартии.IsMark = 0)
		|	and $СпрПартии.Получатель_Площадка = :ВыбПлощадка 
		|	and $СпрПартии.Получатель_ХозСубъект = :ВыбХС 
		//|	%ОтборПоДатеИзготовления%
		|
		|ORDER BY $СпрПартии.%ПолеСортировки% %ЗнакСортировки%
		|";
			
		Если ТипЗначенияСтр(ВыбПродукция_Элемент) = "СписокЗначений" Тогда
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ОтборПоЭлементам%", "$СпрПартии.Продукция_Элемент IN (SELECT Val FROM #ГруппаЭ) ");
			RS.УложитьСписокОбъектов(ВыбПродукция_Элемент, "#ГруппаЭ","ВСД_Продукция_Элемент");			
		Иначе			
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ОтборПоЭлементам%", "$СпрПартии.Продукция_Элемент = :ВыбПродукция_Элемент ");
			RS.УстановитьТекстовыйПараметр("ВыбПродукция_Элемент", ВыбПродукция_Элемент);
		КонецЕсли;
		
		Если ПустоеЗначение(ПолеСортировки) = 1 Тогда
			ПолеСортировки = СокрЛП( ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания"));//"ДатаИзменения";
			Если ПустоеЗначение(ПолеСортировки) = 1 Тогда
				Сообщить("Не указан параметр Колонка сортировки партий - > использую ДатаИзменения");
				ПолеСортировки = "ДатаИзменения";
			КонецЕсли;		
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ПолеСортировки%", ПолеСортировки);
		
		Если ПустоеЗначение(ВыбПлощадка) = 1 Тогда
			ВыбПлощадка = ПолучитьКонстанту("Отправитель_Площадка");
		КонецЕсли;
		RS.УстановитьТекстовыйПараметр("ВыбПлощадка", ВыбПлощадка);
		
		Если ПустоеЗначение(ВыбХС) = 1 Тогда
			ВыбХС = ПолучитьКонстанту("Отправитель_ХозСубъект");
		КонецЕсли;
		RS.УстановитьТекстовыйПараметр("ВыбХС", ВыбХС);
		
		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ЗнакСортировки%", _ЗнакСортировки);		
	                       
		//ОтборПоДатеИзготовления="";
		//Если ПустоеЗначение(ВыбДатаИзготовления) = 0 Тогда
		//	Если ТипЗначенияСтр(ВыбДатаИзготовления)="Дата" Тогда
		//		ДатаИзготовления = Лев( Преобразовать_Дата_в_Строка(ВыбДатаИзготовления), 10);	
		//	Иначе 
		//		ДатаИзготовления = ВыбДатаИзготовления;
		//	КонецЕсли;
		//	
		//	ОтборПоДатеИзготовления = " AND LEFT($СпрПартии.ДатаИзготовления1, 10) = :ВыбДатаИзготовления ";
		//	RS.УстановитьТекстовыйПараметр("ВыбДатаИзготовления", ДатаИзготовления);
		//КонецЕсли;
		//ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ОтборПоДатеИзготовления%", ОтборПоДатеИзготовления);
		
		Состояние("Выбор актуальных партий из справочника...");
		Попытка
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
				RS.Отладка(1);
			КонецЕсли;
			ТзПартии = RS.ВыполнитьИнструкцию(ТекстЗапроса);
			//ТЗ.ВыбратьСтроку();
		Исключение
			Ошибка = "Передан неверный параметр ";
			Сообщить(Ошибка, "!");
			СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "");
			ТзПартии = СоздатьОбъект("ТаблицаЗначений");;
		КонецПопытки;
	
	Иначе
		Запрос = базаДанных.НовыйЗапрос();
		
		ТекстЗапроса = "
		|SELECT
		|   СпрПартии.ID as [ВСД_Партия $Справочник.ВСД_Партия],
		|   СпрПартии.Продукция_Элемент as [Продукция_Элемент $Справочник.ВСД_Продукция_Элемент],
		|   СпрПартии.%ПолеСортировки% as ПолеСортировки,
		|	СпрПартии.Количество as Количество,
		|	СпрПартии.КоличествоМест as КоличествоМест
		|
		|FROM 	[Справочник.ВСД_Партия] AS СпрПартии
		|
		|WHERE		
		|	(СпрПартии.Количество > 0 )
		|	and (СпрПартии.ISMARK = '')
		|   %ОтборПоЭлементам%
		|	and (СпрПартии.Получатель_Площадка = :ВыбПлощадка) 
		|	and (СпрПартии.Получатель_ХозСубъект = :ВыбХС )    
		//|	%ОтборПоДатеИзготовления%
		|
		|ORDER BY СпрПартии.%ПолеСортировки% %ЗнакСортировки%
		|";
		
		Если ТипЗначенияСтр(ВыбПродукция_Элемент) = "СписокЗначений" Тогда
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ОтборПоЭлементам%", "and (СпрПартии.Продукция_Элемент IN (SELECT Val FROM ГруппаЭ)) ");
			базаДанных.УложитьОбъекты(ВыбПродукция_Элемент, "ГруппаЭ", "ВСД_Продукция_Элемент");
			//Запрос.Подставлять("ВыбПродукция_Элемент", ВыбПродукция_Элемент);
		Иначе			
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ОтборПоЭлементам%", "and СпрПартии.Продукция_Элемент = :ВыбПродукция_Элемент ");
			Запрос.Подставлять("ВыбПродукция_Элемент", ВыбПродукция_Элемент);
		КонецЕсли;
		
		Если ПустоеЗначение(ПолеСортировки) = 1 Тогда
			ПолеСортировки = СокрЛП( ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания"));//"ДатаИзменения";
			Если ПустоеЗначение(ПолеСортировки) = 1 Тогда
				Сообщить("Не указан параметр Колонка сортировки партий - > использую ДатаИзменения");
				ПолеСортировки = "ДатаИзменения";
			КонецЕсли;		
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ПолеСортировки%", ПолеСортировки);
		
		Если ПустоеЗначение(ВыбПлощадка) = 1 Тогда
			ВыбПлощадка = ПолучитьКонстанту("Отправитель_Площадка");
		КонецЕсли;
		Запрос.Подставлять("ВыбПлощадка", ВыбПлощадка);
		
		Если ПустоеЗначение(ВыбХС) = 1 Тогда
			ВыбХС = ПолучитьКонстанту("Отправитель_ХозСубъект");
		КонецЕсли;		
		Запрос.Подставлять("ВыбХС", ВыбХС);
		
		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ЗнакСортировки%", _ЗнакСортировки);		
		                                
		//ОтборПоДатеИзготовления="";
		//Если ПустоеЗначение(ВыбДатаИзготовления) = 0 Тогда
		//	ОтборПоДатеИзготовления = " AND LEFT(СпрПартии.ДатаИзготовления1, 10) = :ВыбДатаИзготовления ";
		//	ДатаИзготовления = Лев( Преобразовать_Дата_в_Строка(ВыбДатаИзготовления), 10);
		//	RS.УстановитьТекстовыйПараметр("ВыбДатаИзготовления", ДатаИзготовления);
		//КонецЕсли;
		//ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%ОтборПоДатеИзготовления%", ОтборПоДатеИзготовления);
		
		Состояние("Выбор актуальных партий из справочника...");
		Попытка
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
				Запрос.Отладка(1);
			КонецЕсли;		
			ТзПартии = Запрос.ВыполнитьЗапрос(ТекстЗапроса);			
			//ТзПартии.ВыбратьСтроку();
			
		Исключение
			Ошибка = "Передан неверный параметр ";
			Сообщить(Ошибка, "!");
			СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(), "");
			ТзПартии = СоздатьОбъект("ТаблицаЗначений");;
		КонецПопытки;
	КонецЕсли;
	
	Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
		Сообщить("[ПолучитьАкуальныеПартииИзСправочника] строк = "+ ТзПартии.КоличествоСтрок()+ "
		|ВыбПродукция_Элемент = "+ВыбПродукция_Элемент+"
		|ВыбПлощадка = "+ВыбПлощадка+"
		|ВыбХС = "+ВыбХС +"
		|ВыбДатаИзготовления = "+тзДатаИзготовления);
	КонецЕсли;		
	
    Возврат ТзПартии;
КонецФункции

//тзДатыИзготовления = таблицаЗначений
// 1 - ПродукцияЭлемент
// 2 - ВыбДатаИзготовления
Функция ПолучитьАктуальныеПартииИзРегистра( спПродукция_Элемент, ВыбПлощадка = "", ВыбХС = "", тзДатыИзготовления="") Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьАктуальныеПартииИзРегистра");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьАктуальныеПартииИзРегистра(спПродукция_Элемент, ВыбПлощадка, ВыбХС, тзДатыИзготовления);
	КонецЕсли;
	//}
	
    ЗаполнятьЭлементыБезПартий = ПолучитьКонстанту("ПарамЗаполнятьВСДБезПартий");
    ПолеСортировки = ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания");
    ЗнакСортировки = ПолучитьКонстанту("ПарамЗнакСортировкиУбывание");
	
	_ЗнакСортировки = ?(ПустоеЗначение(ЗнакСортировки) = 1,"ASC", "DESC");

	ВыбДата = ПолучитьПозициюТА();
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|ВСД_Партия = Регистр.ВСД_Партии.Партия;
	|active = Регистр.ВСД_Партии.Партия.active;
	//|ПартияУдалена = Регистр.ВСД_Партии.Партия.ismark; // !!
	|КолвоПартии = Регистр.ВСД_Партии.Партия.Количество;
	|ПолеСортировки = Регистр.ВСД_Партии.Партия.ДатаИзготовления1;
	|Колво = Регистр.ВСД_Партии.Количество;
	|Продукция_Элемент = Регистр.ВСД_Партии.Партия.Продукция_Элемент;
	|Площадка = Регистр.ВСД_Партии.Партия.Получатель_Площадка;
	|ХС = Регистр.ВСД_Партии.Партия.Получатель_ХозСубъект;
	|
	|Функция Количество = КонОст( колво );
	|Функция КоличествоМест = КонОст( колво );
	|
	|Группировка ВСД_Партия;
	|Группировка Продукция_Элемент без Групп;
	|Группировка ПолеСортировки;
	|Группировка ПолеСортировки;
	|
	|Условие (Продукция_Элемент В спПродукция_Элемент);
	|Условие (Площадка в ВыбПлощадка);
	|Условие (ХС в ВыбХС);
	|Условие (active =1);
	|Условие (КолвоПартии>0);
	//|Условие ( ПартияУдалена = 0 ); // !!
	|
	|";
	
	//Если ПустоеЗначение(ВыбДатаИзготовления) = 0 Тогда
	//	Если ТипЗначенияСтр(ВыбДатаИзготовления)="Дата" Тогда
	//		ДатаИзготовления = Лев( Преобразовать_Дата_в_Строка(ВыбДатаИзготовления), 10);	
	//	Иначе 
	//		ДатаИзготовления = ВыбДатаИзготовления;
	//	КонецЕсли;		
	//	ТекстЗапроса=ТекстЗапроса+"Условие (Лев(ПолеСортировки, 10) = ДатаИзготовления); ";
	//КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|
	|Обрабатывать НеПомеченныеНаУдаление;
	|";
	
	Запрос.Выполнить(ТекстЗапроса);
	
	тзПартии = СоздатьОбъект("ТаблицаЗначений");
	тзПартии.НоваяКолонка("ВСД_Партия");	
	тзПартии.НоваяКолонка("Продукция_Элемент"); 
	тзПартии.НоваяКолонка("ПолеСортировки"); 
	тзПартии.НоваяКолонка("Количество"); 
	тзПартии.НоваяКолонка("КоличествоМест"); 
		
	Пока Запрос.Группировка(1)=1 Цикл
		Пока Запрос.Группировка(2)=1 Цикл
			Пока Запрос.Группировка(3)=1 Цикл
				Если Запрос.Количество > 0 Тогда 
					тзПартии.НоваяСтрока();
					тзПартии.ВСД_Партия = Запрос.ВСД_Партия;
					тзПартии.Продукция_Элемент = Запрос.Продукция_Элемент;
					тзПартии.ПолеСортировки = Лев(Запрос.ПолеСортировки, 10);
					тзПартии.Количество = Запрос.Количество;
					тзПартии.КоличествоМест = тзПартии.ВСД_Партия.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	

	// фильтр По выбранным срокам - делать здесь !!!

	Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
		Если ТипЗначенияСтр(спПродукция_Элемент)="СписокЗначений" Тогда 			
			ПЭ = спПродукция_Элемент.РазмерСписка();
		Иначе
			ПЭ = Строка(спПродукция_Элемент);
		КонецЕсли;
		
		Сообщить("[ПолучитьАкуальныеПартииИзРегистра] строк = "+ ТзПартии.КоличествоСтрок()+ "
		|ВыбПродукция_Элемент = "+ ПЭ +"
		|ВыбПлощадка = "+ВыбПлощадка+"
		|ВыбХС = "+ВыбХС +"
		|ВыбДатаИзготовления = "+тзДатыИзготовления);
	КонецЕсли;		
	
    Возврат ТзПартии;
КонецФункции

//тзДатыИзготовления = таблицаЗначений
// 1 - ПродукцияЭлемент
// 2 - ВыбДатаИзготовления
Функция ПолучитьАктуальныеПартии( спПродукция_Элемент, ВыбПлощадка = "", ВыбХС = "", тзДатыИзготовления="") Экспорт
	
	Если ПустоеЗначение(спПродукция_Элемент)=1 Тогда 
		Возврат СоздатьОбъект("ТаблицаЗначений");
	КонецЕсли;
	
	Если ПолучитьКонстанту("КонтрольОстатковПоРегистру")=1 Тогда 
		тзРезультат = ПолучитьАктуальныеПартииИзРегистра( спПродукция_Элемент, ВыбПлощадка, ВыбХС, тзДатыИзготовления);
	Иначе		
		тзРезультат = ПолучитьАктуальныеПартииИзСправочника( спПродукция_Элемент, ВыбПлощадка, ВыбХС, тзДатыИзготовления);
	КонецЕсли;
	
	Возврат тзРезультат;
	
КонецФункции

// ПолучитьМаркировку
	// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
	//UNDEFINED 	Класс неопределен. Это значение используется По умолчанию.
	//BN 	Номер производственной партии.
	//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
	//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
	//EAN8 	Маркировка в соответствии с EAN-8.
	//EAN13 	Маркировка в соответствии с EAN-13.
	//EAN128 	Маркировка в соответствии с EAN-128.
	//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете.
	//
Функция ПолучитьМаркировку( Единица, докОснование="", КлассМаркировки="EAN13") Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ПолучитьМаркировку");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ПолучитьМаркировку( Единица, докОснование, КлассМаркировки );
	КонецЕсли;
	//}

	Рез = "";
	Попытка		
		//Номенклатура = Единица.Владелец;
		Рез = Сокрлп(Единица.ШтрихКод);
		КлассМаркировки = "EAN13";		
	Исключение
		КлассМаркировки ="";
	КонецПопытки;		
	
	Если ПустоеЗначение(Рез)=1 Тогда 
		КлассМаркировки ="";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// ЗаполнитьСтрокуДокумента
	//КлассМаркировки
	//Список физической упаковки. vd:packageList
	// С уровнями
	//   Уровни <dt:level>
	//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
	//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
	//3 	Промежуточный уровень. Уровень упаковки, Если он существует, который находится между потребительским И торговым уровнем.
	//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты И доставки. Это согласованный между ритейлером И изготовителем (ИЛИ другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается И доставляется.
	//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому ИЛИ транспортному уровню.
	//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа.
	//
	// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
	//UNDEFINED 	Класс неопределен. Это значение используется По умолчанию.
	//BN 	Номер производственной партии.
	//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
	//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
	//EAN8 	Маркировка в соответствии с EAN-8.
	//EAN13 	Маркировка в соответствии с EAN-13.
	//EAN128 	Маркировка в соответствии с EAN-128.
	//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете.
	//
Функция ЗаполнитьСтрокуДокумента(тзРезультат, тзОснование, докОснование="", ЗаполнятьУровниУпаковки=0 ) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьСтрокуДокумента");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьСтрокуДокумента(тзРезультат, тзОснование, докОснование, ЗаполнятьУровниУпаковки );
	КонецЕсли;
	//}

	Попытка тзРезультат.Номенклатура    		= тзОснование.Номенклатура; Исключение КонецПопытки;
	Попытка тзРезультат.Продукция_Элемент       = тзОснование.Продукция_Элемент; Исключение КонецПопытки;

	//Если тзОснование.Продукция_Элемент = списокЗначений 
	Если ПустоеЗначение(тзРезультат.Партия)=0 Тогда 
		Если ( ПустоеЗначение( тзРезультат.Продукция_Элемент )=1 ) ИЛИ 
			 ( ТипЗначенияСтр(тзРезультат.Продукция_Элемент) = "СписокЗначений")  Тогда
			тзРезультат.Продукция_Элемент = тзРезультат.Партия.Продукция_Элемент;
		КонецЕсли;		
		
		Попытка
			Если ПустоеЗначение( тзРезультат.Партия.ДокументВСД )=0 Тогда 
				тзРезультат.РезультатыИсследований  = тзРезультат.Партия.ДокументВСД.РезультатыИсследований;
			Иначе
				тзРезультат.РезультатыИсследований  = ПолучитьКонстанту("ВСД_РезультатыИсследований"); 
			КонецЕсли;
		Исключение КонецПопытки;
		
		Попытка	тзРезультат.Производитель_площадка = тзРезультат.Партия.Производитель_Площадка; Исключение КонецПопытки;
	Иначе
		
		Попытка тзРезультат.РезультатыИсследований  = ПолучитьКонстанту("ВСД_РезультатыИсследований"); Исключение КонецПопытки;
			
		Попытка	тзРезультат.Производитель_площадка = тзРезультат.Продукция_Элемент.Площадка; Исключение КонецПопытки;
		Попытка	тзРезультат.Производитель_Страна = ПолучитьКонстанту("Страна"); Исключение КонецПопытки;
		
	КонецЕсли;
			
	Попытка тзРезультат.ЕдиницаИзмерения        = тзРезультат.Партия.ЕдиницаИзмерения; Исключение КонецПопытки;
	Попытка тзРезультат.Продукция               = тзРезультат.Партия.Продукция; Исключение КонецПопытки;
	Попытка тзРезультат.ВидПродукции            = тзРезультат.Партия.ВидПродукции; Исключение КонецПопытки;
	Попытка тзРезультат.НаименованиеПродукции   = тзРезультат.Продукция_Элемент.Наименование;  Исключение КонецПопытки;
	Попытка тзРезультат.GTIN                    = тзРезультат.Продукция_Элемент.GTIN; Исключение КонецПопытки;
	Попытка тзРезультат.КодПродукции            = тзРезультат.Продукция_Элемент.Артикул; Исключение КонецПопытки;		
	Попытка тзРезультат.ОсобыеОтметки           = тзРезультат.Продукция_Элемент.ОсобыеОтметки; Исключение КонецПопытки;
	Попытка тзРезультат.ПолеСортировки = тзОснование.ПолеСортировки; Исключение КонецПопытки;	
	
	Попытка тзРезультат.ДатаИзготовления1 = тзРезультат.Партия.ДатаИзготовления1; Исключение КонецПопытки;	
	Попытка тзРезультат.ДатаИзготовления2 = тзРезультат.Партия.ДатаИзготовления2; Исключение КонецПопытки;	
	Попытка тзРезультат.ДатаСрокГодности1 = тзРезультат.Партия.ДатаСрокГодности1; Исключение КонецПопытки;	
	Попытка тзРезультат.ДатаСрокГодности2 = тзРезультат.Партия.ДатаСрокГодности2; Исключение КонецПопытки;			
		
	Попытка
		Если ПустоеЗначение(тзОснование.ДатаИзготовления)=0 Тогда			
			Если ТипЗначенияСтр(тзОснование.ДатаИзготовления)="Дата" Тогда
				тзРезультат.ПолеСортировки = Лев( Преобразовать_Дата_в_Строка(тзОснование.ДатаИзготовления), 10);	
			Иначе 
				тзРезультат.ПолеСортировки = тзОснование.ДатаИзготовления;
			КонецЕсли;		
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	Попытка
		тзРезультат.Цель 					= тзРезультат.ВидПродукции.Цель;
		Если ПустоеЗначение(тзРезультат.Цель)=1 Тогда
			тзРезультат.Цель = ПолучитьКонстанту("Цель");
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//1. Очистим существующие значения
	Если ТипЗначенияСтр(тзРезультат) = "ГрупповойКонтекст" Тогда
		Для а=1 По 6 Цикл
			//документ			
			тзРезультат.УстановитьАтрибут( "ФормаУпак"+а , "");
			// количество для каждого уровня зависит от коэффициента упаковки товара				
			тзРезультат.УстановитьАтрибут( "КолвоУпак"+а , "");
			Для б=1 По 2 Цикл
				тзРезультат.УстановитьАтрибут( "КлассМаркировки"+б+"_"+а , "");
				тзРезультат.УстановитьАтрибут( "ЗначениеМаркировки"+б+"_"+а , ""); 
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	
	Если ( ЗаполнятьУровниУпаковки=1 ) или ( ПустоеЗначение( ПолучитьКонстанту("ЗаполнятьУровниУпаковки") ) = 0) Тогда 
		стрУровни = "";
		ИмяФайлаУровниУпаковки = тзРезультат.Партия.ИмяФайлаУровниУпаковки;
		Если ПустаяСтрока(ИмяФайлаУровниУпаковки) = 0 Тогда
			ЗначениеИзФайла(ИмяФайлаУровниУпаковки, стрУровни);
		КонецЕсли;		
		Если ТипЗначенияСтр(стрУровни)="Строка" Тогда 
            ВремТЗ = ЗначениеИзСтроки(стрУровни);
        Иначе
            ВремТЗ = стрУровни;
		КонецЕсли;
		Если ТипЗначенияСтр(ВремТЗ) = "ТаблицаЗначений" Тогда
			//ВремТЗ.ВыбратьСтроку();
			ВремТЗ.ВыбратьСтроки();
			Пока ВремТЗ.ПолучитьСтроку() = 1 Цикл
				
				Если ((ТипЗначенияСтр(тзРезультат) = "ГрупповойКонтекст") ИЛИ 
					  (ТипЗначенияСтр(тзРезультат) = "Документ") ) Тогда
					//документ
					тзРезультат.УстановитьАтрибут( "ФормаУпак"+ВремТЗ.НомерУровня , ВремТЗ.Упаковка);
					// количество для каждого уровня зависит от коэффициента упаковки товара				
					тзРезультат.УстановитьАтрибут( "КолвоУпак"+ВремТЗ.НомерУровня , тзРезультат.Количество); 
				Иначе
					//Таблица значений
					тзРезультат.УстановитьЗначение( тзРезультат.НомерСтроки, "ФормаУпак"+ВремТЗ.НомерУровня , ВремТЗ.Упаковка);
					// количество для каждого уровня зависит от коэффициента упаковки товара
					тзРезультат.УстановитьЗначение( тзРезультат.НомерСтроки, "КолвоУпак"+ВремТЗ.НомерУровня , тзРезультат.Количество); 
				КонецЕсли;
				
				Маркировки =  ЗначениеИзСтроки(ВремТЗ.Маркировки);
				Если ТипЗначенияСтр(Маркировки) = "СписокЗначений" Тогда
					КолвоМаркировок = Мин(Маркировки.РазмерСписка(), 2); 
					Для СЦ = 1 По КолвоМаркировок Цикл
						КлМаркировки = ""; 	
						ЗнМаркировки = Маркировки.ПолучитьЗначение( СЦ, КлМаркировки );
						
						Если ((ТипЗначенияСтр(тзРезультат) = "ГрупповойКонтекст") ИЛИ 
							  (ТипЗначенияСтр(тзРезультат) = "Документ") ) Тогда
							//документ
							тзРезультат.УстановитьАтрибут( "КлассМаркировки"+СЦ+"_"+ВремТЗ.НомерУровня , Лев(КлМаркировки, 10) );
							// количество для каждого уровня зависит от коэффициента упаковки товара				
							тзРезультат.УстановитьАтрибут( "ЗначениеМаркировки"+СЦ+"_"+ВремТЗ.НомерУровня , Лев(ЗнМаркировки, 50) ); 
						Иначе			
							тзРезультат.УстановитьЗначение( тзРезультат.НомерСтроки, "КлассМаркировки"+СЦ+"_"+ВремТЗ.НомерУровня , КлМаркировки );
							тзРезультат.УстановитьЗначение( тзРезультат.НомерСтроки, "ЗначениеМаркировки"+СЦ+"_"+ВремТЗ.НомерУровня ,  ЗнМаркировки ); 
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	Иначе
		//заполнение из справочника 
		
		// Потребительский уровень. 
		// Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
		Попытка						
			//Если "шт"= тзРезультат.Номенклатура.БазоваяЕдиница.ОКЕИ.Наименование Тогда 			
			Если ПустоеЗначение(тзРезультат.Номенклатура)=0 Тогда 
				СпрВсдЕдИзм = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
				Если СпрВсдЕдИзм.НайтиПоРеквизиту("ОКЕИ",тзРезультат.Номенклатура.БазоваяЕдиница.ОКЕИ,1)=1 Тогда 
					тзРезультат.ФормаУпак2 = СпрВсдЕдИзм.ТекущийЭлемент();
					к1 = тзРезультат.Номенклатура.БазоваяЕдиница.Вес;
					к1 = ?(к1>0,к1,1);
					тзРезультат.КолвоУпак2 = Окр(тзРезультат.Количество / к1,0,1);
	
					//тзРезультат.КлассМаркировки1_2 = "UNDEFINED";
					//тзРезультат.ЗначениеМаркировки1_2 = Строка( тзРезультат.Партия.Производитель_Площадка );
					Попытка
						КлассМаркировки = "";
						тзРезультат.ЗначениеМаркировки1_2 = ПолучитьМаркировку( тзРезультат.Номенклатура.БазоваяЕдиница, тзРезультат, КлассМаркировки );
						Если ПустоеЗначение(тзРезультат.ЗначениеМаркировки1_2)=0 Тогда
							тзРезультат.КлассМаркировки1_2 = КлассМаркировки;
						Иначе
							тзРезультат.КлассМаркировки1_2 = "";
						КонецЕсли;
					Исключение
						Сообщить("Не удалось получить маркировку для товара "+тзРезультат.Номенклатура);
					КонецПопытки;					
				КонецЕсли;
			Иначе
				//Пустая транзакция без номенклатуры
				тзРезультат.КолвоУпак2 = Окр(тзРезультат.Количество ,0,1);
				тзРезультат.КлассМаркировки1_2 = "UNDEFINED";
				тзРезультат.ЗначениеМаркировки1_2 = Строка( тзРезультат.Партия.Производитель_Площадка );
			КонецЕсли;
		Исключение
			Сообщить("Уровень 2: "+ОписаниеОшибки());
		КонецПопытки;
		
		// Торговый уровень. 
		// Товар в упаковке, предназначенной для заказа, оплаты И доставки.  Это согласованный между ритейлером И 
		// изготовителем (ИЛИ другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается И доставляется.
		Попытка
			Если ПустоеЗначение(тзРезультат.Номенклатура)=0 Тогда 
				СпрВсдЕдИзм = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
				Если СпрВсдЕдИзм.НайтиПоРеквизиту("ОКЕИ",тзРезультат.Номенклатура.ОсновнаяЕдиница.ОКЕИ,1)=1 Тогда 
					тзРезультат.ФормаУпак4 = СпрВсдЕдИзм.ТекущийЭлемент();
					к1 = тзРезультат.Номенклатура.ОсновнаяЕдиница.Вес;
					к1 = ?(к1>0,к1,1);
					тзРезультат.КолвоУпак4 = Окр(тзРезультат.Количество / к1 / тзРезультат.Номенклатура.ОсновнаяЕдиница.Коэффициент, 0, 1);
					Если тзРезультат.КолВоУпак4=0 Тогда 
						тзРезультат.КолВоУпак4=1;
					КонецЕсли;	
				Иначе
					Сообщить("Не найдено соответвие ["+ тзРезультат.Номенклатура.ОсновнаяЕдиница.ОКЕИ +"] в справочнике ВСД_ФормыУпаковки");
				КонецЕсли;
	
				// Маркировка = Производитель 
				тзРезультат.КлассМаркировки1_4 = "UNDEFINED";
				тзРезультат.ЗначениеМаркировки1_4 = Строка( тзРезультат.Партия.Производитель_Площадка );			
				
				// Маркировка = Штрихкод 
				// Попытка
				//	КлассМаркировки = "";
				//	тзРезультат.ЗначениеМаркировки1_4 = ПолучитьМаркировку( тзРезультат.Номенклатура.ОсновнаяЕдиница, докОснование, КлассМаркировки );
				//	Если ПустоеЗначение(тзРезультат.ЗначениеМаркировки1_4)=0 Тогда
				//		тзРезультат.КлассМаркировки1_4 = КлассМаркировки;
				//	КонецЕсли;
				// Исключение
				//	Сообщить("Не удалось получить маркировку для товара "+тзРезультат.Номенклатура);
				// КонецПопытки;
			КонецЕсли;			
		Исключение
			Сообщить("Уровень 4: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

    ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьСтрокуДокумента_После");
    Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
    	Возврат ОбъектВыполнения.ЗаполнитьСтрокуДокумента_После(тзРезультат, тзОснование, докОснование );
    КонецЕсли;	
	
КонецФункции

Функция СоздатьТзПартий( ) Экспорт
	тзПартий =СоздатьОбъект("ТаблицаЗначений");
	тзПартий.НоваяКолонка("Номенклатура",,,,,50,);
	тзПартий.НоваяКолонка("Продукция_Элемент",,,,,50,);
	тзПартий.НоваяКолонка("Партия","Справочник.ВСД_Партия",,,,15,);
	тзПартий.НоваяКолонка("Количество","Число",,,,5,);
	тзПартий.НоваяКолонка("ЕдиницаИзмерения");
	тзПартий.НоваяКолонка("Продукция");
	тзПартий.НоваяКолонка("ВидПродукции");
	тзПартий.НоваяКолонка("НаименованиеПродукции");
	тзПартий.НоваяКолонка("GTIN");
	тзПартий.НоваяКолонка("КодПродукции");
	тзПартий.НоваяКолонка("Цель");
	тзПартий.НоваяКолонка("ОсобыеОтметки");
	//тзПартий.НоваяКолонка("ОстатокНаСкладе"); Остаток после распределения партий

	//6 уровней упаковки
	Для а=1 По 6 Цикл
		тзПартий.НоваяКолонка("ФормаУпак"+а);
		тзПартий.НоваяКолонка("КолвоУпак"+а);
		// 2 вида маркировки
		Для б=1 По 2 Цикл
			тзПартий.НоваяКолонка("КлассМаркировки"+б+"_"+а);
			тзПартий.НоваяКолонка("ЗначениеМаркировки"+б+"_"+а);
		КонецЦикла;
	КонецЦикла;

	//Докум.ВыгрузитьТабличнуюЧасть(тзПартий);
	//тзПартий.УдалитьСтроки();
	тзПартий.НоваяКолонка("ПолеСортировки"); // реквизит сортировки подобранной партии
	тзПартий.НоваяКолонка("СвязанныйДокументВСД");
	тзПартий.НоваяКолонка("РезультатыИсследований");
	
	Возврат тзПартий;
КонецФункции

Функция ПроверитьВозможностьИспользованияПартии(Партия) Экспорт
	
	Результат = 1;
	
	Если Партия.ИсключенаИзПодбора = 1 Тогда
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда
			Сообщить("Партия ["+Партия.Наименование+"; номер записи: "+СокрЛП(Партия.НомерЗаписи)+"] была исключена из подбора. Партия пропущена.", "!");
		КонецЕсли;
		Результат = 0;
	КонецЕсли;
	
	Если ПолучитьКонстанту("ПропускатьПросроченныеПартии")=1 Тогда 
		СрокГодности = СтрокаВДату(Партия.ДатаСрокГодности1);
		Если СрокГодности < ТекущаяДата() Тогда
			Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда
				Сообщить("Партия ["+Партия.Наименование+"; номер записи: "+СокрЛП(Партия.НомерЗаписи)+"] пропущена по сроку годности.", "!");
			КонецЕсли;
			Результат = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьВозможностьИспользованияПартии

//ЗаполнитьПартииПоТЧДокумента2
    // Возвращае готовую тч документа, вводимого на основании, с учетом параметров = ФИФО / ЛИФО И т.д.
	// По всем строкам Основания документа - для использования в ВодНаОсновании ИЛИ ГО
//КлассМаркировки
	//Список физической упаковки. vd:packageList
	// С уровнями
	//   Уровни <dt:level>
	//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
	//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
	//3 	Промежуточный уровень. Уровень упаковки, Если он существует, который находится между потребительским И торговым уровнем.
	//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты И доставки. Это согласованный между ритейлером И изготовителем (ИЛИ другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается И доставляется.
	//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому ИЛИ транспортному уровню.
	//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа.
	//
	// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
	//UNDEFINED 	Класс неопределен. Это значение используется По умолчанию.
	//BN 	Номер производственной партии.
	//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
	//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
	//EAN8 	Маркировка в соответствии с EAN-8.
	//EAN13 	Маркировка в соответствии с EAN-13.
	//EAN128 	Маркировка в соответствии с EAN-128.
	//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете.
	//	
Функция ЗаполнитьТчДокументаПоАктуальнымПартиям( Докум, ВыбПлощадка, ВыбХС) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьТчДокументаПоАктуальнымПартиям");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьТчДокументаПоАктуальнымПартиям(Докум,ВыбПлощадка, ВыбХС);
	КонецЕсли;
	//}

	//тзПартий = СоздатьОбъект("ТаблицаЗначений");
	тзПартий = СоздатьТзПартий( );

	Состояние("Заполнение списка партий ВСД ");
	тз = ВыгрузитьТч(Докум);
//	("ДокРеализации");
//	("Номенклатура");
//	("Продукция_Элемент");
//	("Количество");
//	("КоличествоМест");

	//ВремТз = СоздатьОбъект("ТаблицаЗначений");
	//тз.Выгрузить(ВремТз);	

	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		// Получим нужные нам партии По фильтру
		//тзАктуальныхПартий = ПолучитьАкуальныеПартииИзСправочника( тз.Продукция_Элемент, ВыбПлощадка, ВыбХС );
		тзАктуальныхПартий = ПолучитьАктуальныеПартии( тз.Продукция_Элемент, ВыбПлощадка, ВыбХС );
		тзАктуальныхПартий.ВыбратьСтроки();
		КолвоНужно = тз.Количество;
		Пока (тзАктуальныхПартий.ПолучитьСтроку() = 1) И (КолвоНужно > 0 ) Цикл

			Если ПроверитьВозможностьИспользованияПартии(тзАктуальныхПартий.ВСД_Партия) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТЗПартий.НоваяСтрока();
			ТЗПартий.Партия 				= тзАктуальныхПартий.ВСД_Партия;
			ТЗПартий.Количество 			= Мин( тзАктуальныхПартий.Количество, КолвоНужно);
			ТЗПартий.ПолеСортировки 		= тзАктуальныхПартий.ПолеСортировки;
			//ТЗПартий.Продукция_Элемент		= ТЗПартий.Партия.Продукция_Элемент;
			
			КолвоНужно = КолвоНужно - ТЗПартий.Количество;
			
			ЗаполнитьСтрокуДокумента( ТЗПартий, тз, Докум );		
			
		КонецЦикла;
		Если (КолвоНужно > 0) Тогда  
			Если (ПолучитьКонстанту("ПарамЗаполнятьВСДБезПартий") = 1)  Тогда 
				//Добавим с пустыми партиями
				ТЗПартий.НоваяСтрока();
				ТЗПартий.Количество	=  КолвоНужно; 
	
				ЗаполнитьСтрокуДокумента(ТЗПартий, тз, Докум);
			Иначе
				Сообщить("Нет партий для ["+тз.Продукция_Элемент +"] Пропускаем!","!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ТЗПартий;
КонецФункции

Функция ЗаполнитьТчДокументаПоТЗ_ФильтрПЭ( Докум, ТЗ, Выб_Продукция_Элемент, КолвоНужно, тзАктуальныхПартий, тзПартий, ДатаИзготовления="")
	
		спФильтр1 = СоздатьОбъект("СписокЗначений");
		спФильтр1.ДобавитьЗначение(Выб_Продукция_Элемент);
		спФильтр2 = СоздатьОбъект("СписокЗначений");
		спФильтр2.ДобавитьЗначение(Выб_Продукция_Элемент);
	
		Если ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания")="ДатаИзменения" Тогда 
			//колонка сортировки = дата
			Если ПолучитьКонстанту("ПарамЗнакСортировкиУбывание") = 1 Тогда 
				//Убывание
				спФильтр1.ДобавитьЗначение(Дата(2100,1,1));
				спФильтр2.ДобавитьЗначение("");
			Иначе		
				спФильтр1.ДобавитьЗначение("");
				спФильтр2.ДобавитьЗначение(Дата(2100,1,1));
			КонецЕсли;
		Иначе
			//колонка сортировки = строка
			Если ПолучитьКонстанту("ПарамЗнакСортировкиУбывание") = 1 Тогда 
				//Убывание
				спФильтр1.ДобавитьЗначение("9999");
				спФильтр2.ДобавитьЗначение("");
			Иначе		
				спФильтр1.ДобавитьЗначение("");
				спФильтр2.ДобавитьЗначение("9999");
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(ДатаИзготовления)=0 Тогда   
			
			спФильтр1 = СоздатьОбъект("СписокЗначений");
			спФильтр1.ДобавитьЗначение(Выб_Продукция_Элемент);
			спФильтр2 = СоздатьОбъект("СписокЗначений");
			спФильтр2.ДобавитьЗначение(Выб_Продукция_Элемент);
		
			Если ТипЗначенияСтр(ДатаИзготовления)="Строка" Тогда
				//спФильтр1 = Выб_Продукция_Элемент;
				//спФильтр2 = ДатаИзготовления; 
				спФильтр1.ДобавитьЗначение(ДатаИзготовления);
				спФильтр2.ДобавитьЗначение(ДатаИзготовления);
			Иначе 
				//Дата                            
				
				ДатаИзготовленияСтр = Преобразовать_Дата_в_Строка( ДатаИзготовления );
				спФильтр1.ДобавитьЗначение( ДатаИзготовленияСтр );
				спФильтр2.ДобавитьЗначение( ДатаИзготовленияСтр );
				//спФильтр1 = Выб_Продукция_Элемент;
				//спФильтр2 = ДатаИзготовленияСтр; 
			КонецЕсли;
		КонецЕсли;
		
		тзАктуальныхПартий.УстановитьФильтр(спФильтр1, спФильтр2, "Продукция_Элемент");
		тзАктуальныхПартий.ВыбратьСтроки("Продукция_Элемент");
		
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Сообщить("[ЗаполнитьТчДокументаПоТЗ] строк = "+тзАктуальныхПартий.КоличествоСтрок() + " отобрано = "
				+тзАктуальныхПартий.КоличествоСтрок("Продукция_Элемент")+" По ["+спФильтр1.ПолучитьЗначение(1)+"]");
		КонецЕсли;
		
		//КолвоНужно = тз.Количество;
		Пока (тзАктуальныхПартий.ПолучитьСтроку("Продукция_Элемент") = 1) И (КолвоНужно > 0 ) Цикл
			Если тзАктуальныхПартий.Количество =0 Тогда
				//значит эту партию уже списали, пропустим
				Продолжить;
			КонецЕсли;
			
			Если ПроверитьВозможностьИспользованияПартии(тзАктуальныхПартий.ВСД_Партия) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			тзАктуальныхПартий.Количество = Окр( тзАктуальныхПартий.Количество, 3, 1); // !!! # 2816 
			
			ТЗПартий.НоваяСтрока();
			ТЗПартий.Партия 				= тзАктуальныхПартий.ВСД_Партия;
			ТЗПартий.Количество 			= Мин( тзАктуальныхПартий.Количество, КолвоНужно);
			ТЗПартий.ПолеСортировки 		= тзАктуальныхПартий.ПолеСортировки;
			
			тзАктуальныхПартий.Количество 	= тзАктуальныхПартий.Количество - ТЗПартий.Количество;
			//ТЗПартий.ОстатокНаСкладе 		= тзАктуальныхПартий.Количество;
			
			КолвоНужно = КолвоНужно - ТЗПартий.Количество;
			
			ЗаполнитьСтрокуДокумента( ТЗПартий, тз, Докум );		
			
		КонецЦикла;

		Возврат КолвоНужно;
КонецФункции

//
// тзАктуальныхПартий = ИндексированнаяТаблица (!)
//
Функция ЗаполнитьТчДокументаПоТЗ( Докум, тзАктуальныхПартий) Экспорт
	//{ Переопределение функции
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьТчДокументаПоТЗ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьТчДокументаПоТЗ( Докум, тзАктуальныхПартий);
	КонецЕсли;
	//}
	
	//тзПартий = СоздатьОбъект("ТаблицаЗначений");
	тзПартий = СоздатьТзПартий( );

	Состояние("Заполнение списка партий ВСД ");
	тзДокум = ВыгрузитьТч(Докум);
//	("ДокРеализации");
//	("Номенклатура");
//	("Продукция_Элемент");
//	("Количество");
//	("КоличествоМест");

	тзДокум.ВыбратьСтроки();
	Пока тзДокум.ПолучитьСтроку() = 1 Цикл
		// Получим нужные нам партии По фильтру		
		
		КолвоНужно = тзДокум.Количество;
		
		Если ТипЗначенияСтр(тзДокум.Продукция_Элемент) = "СписокЗначений" Тогда 
			Для А=1 По тзДокум.Продукция_Элемент.РазмерСписка() Цикл
				//спФильтр1 = СоздатьОбъект("СписокЗначений");
				//спФильтр1.ДобавитьЗначение(тзДокум.Продукция_Элемент.ПолучитьЗначение(А));
				//спФильтр2 = СоздатьОбъект("СписокЗначений");
				//спФильтр2.ДобавитьЗначение(тзДокум.Продукция_Элемент.ПолучитьЗначение(А));
				
				//сзПродукцияЭлементы.ДобавитьЗначение( тзПартии.Продукция_Элемент.ПолучитьЗначение(А) );
				КолвоНужно = ЗаполнитьТчДокументаПоТЗ_ФильтрПЭ( Докум, тзДокум, тзДокум.Продукция_Элемент.ПолучитьЗначение(А), КолвоНужно, тзАктуальныхПартий, тзПартий, тзДокум.ДатаИзготовления);
			КонецЦикла;
		Иначе
			//справочник
			//сзПродукцияЭлементы.ДобавитьЗначение( тзПартии.Продукция_Элемент );
			
			КолвоНужно = ЗаполнитьТчДокументаПоТЗ_ФильтрПЭ( Докум, тзДокум, тзДокум.Продукция_Элемент, КолвоНужно, тзАктуальныхПартий, тзПартий, тзДокум.ДатаИзготовления);
		КонецЕсли;

		Если (КолвоНужно > 0) Тогда  
			Если ( ПолучитьКонстанту("ПарамЗаполнятьВСДБезПартий") = 1)  Тогда 
				//Добавим с пустыми партиями
				ТЗПартий.НоваяСтрока();
				ТЗПартий.Количество	=  КолвоНужно; 
	
				ЗаполнитьСтрокуДокумента(ТЗПартий, тзДокум, Докум);
			Иначе
				Сообщить("Нет партий для ["+тзДокум.Продукция_Элемент +"] Пропускаем!","!");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТЗПартий;
КонецФункции

//Производство_ВыбратьПартииСписания
// Возвращает готовую тч документа с партиями Сырья, с учетом параметров = ФИФО / ЛИФО И т.д.	
Функция Производство_ВыбратьПартииСписания( ДокПроизводство ) Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("Производство_ЗаполнитьПартииСписания");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.Производство_ВыбратьПартииСписания( ДокПроизводство );
	КонецЕсли;
	//}

	док = СоздатьОбъект("Документ");
	Если Док.НайтиДокумент( ДокПроизводство.ТекущийДокумент() )=0 Тогда
		Сообщить("Документ не найден","!");
		Возврат "";
	КонецЕсли;
	
	СпрРецепт = СоздатьОбъект("Справочник.ВСД_Рецептура_Продукция");
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	ДокПроизводство.ВыгрузитьТабличнуюЧасть( тз );
	
	тзПриход = СоздатьОбъект("ТаблицаЗначений");
	//тзРез.НоваяКолонка("ДокОснование");
	//тзПриход.НоваяКолонка("Номенклатура");
	тзПриход.НоваяКолонка("Продукция_Элемент","Справочник.ВСД_Продукция_Элемент");
	тзПриход.НоваяКолонка("Количество","Число",12,3);
	тзПриход.НоваяКолонка("КоличествоМест","Число",12,3);	
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		КолвоВыпуск = тз.Количество;
		//Приход = выпуск = ВидДвижения = 1
		Если тз.ВидДвижения = 1 Тогда 
			СпрРецепт.ИспользоватьВладельца( тз.Продукция_Элемент );
			СпрРецепт.ВыбратьЭлементы();
			Пока ( СпрРецепт.ПолучитьЭлемент() = 1) Цикл
				Если СпрРецепт.ПометкаУдаления()=0 Тогда					
					тзПриход.НоваяСтрока();
					тзПриход.Продукция_Элемент = СпрРецепт.Сырье;
					тзПриход.Количество = КолвоВыпуск * СпрРецепт.Коэффциент;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	//тзПартий = СоздатьОбъект("ТаблицаЗначений");
	тзПартий = СоздатьТзПартий( );

	Состояние("Заполнение списка партий ВСД ");

	тзПриход.ВыбратьСтроки();
	Пока тзПриход.ПолучитьСтроку() = 1 Цикл
		// Получим нужные нам партии По фильтру
		//тзАктуальныхПартий = ПолучитьАкуальныеПартииИзСправочника( тзПриход.Продукция_Элемент, ДокПроизводство.Производитель_площадка, ДокПроизводство.Производитель_ХозСубъект );
		тзАктуальныхПартий = ПолучитьАктуальныеПартии( тзПриход.Продукция_Элемент, ДокПроизводство.Производитель_площадка, ДокПроизводство.Производитель_ХозСубъект );
		тзАктуальныхПартий.ВыбратьСтроки();
		КолвоНужно = тзПриход.Количество;
		Пока (тзАктуальныхПартий.ПолучитьСтроку() = 1) И (КолвоНужно > 0 ) Цикл

			ТЗПартий.НоваяСтрока();
			ТЗПартий.Партия 		= тзАктуальныхПартий.ВСД_Партия;
			ТЗПартий.Количество 	= Мин( тзАктуальныхПартий.Количество, КолвоНужно);
			ТЗПартий.ПолеСортировки = тзАктуальныхПартий.ПолеСортировки;
			//ТЗПартий.Продукция_Элемент		= ТЗПартий.Партия.Продукция_Элемент;

			КолвоНужно = КолвоНужно - ТЗПартий.Количество;
			
			ЗаполнитьСтрокуДокумента( ТЗПартий, тзПриход, );		
			
		КонецЦикла;
		Если (КолвоНужно > 0) Тогда  
			Если ( ПолучитьКонстанту("ПарамЗаполнятьВСДБезПартий") = 1)  Тогда 
				//Добавим с пустыми партиями
				ТЗПартий.НоваяСтрока();
				ТЗПартий.Количество	=  КолвоНужно; 
	
				ЗаполнитьСтрокуДокумента(ТЗПартий, тзПриход, );
			Иначе
				Сообщить("Нет партий для ["+ тзПриход.Продукция_Элемент +"] Пропускаем!","!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ТЗПартий;
КонецФункции

//************* Функции для подбора партий По ЛИФО, ФИФО, другой сортировке ОКОНЧАНИЕ


//выбираем партию, которая подходит под условия отбора: количество, свойство, площадка
Функция НайтиПервуюПартию(Продукция_Элемент, ВыбПлощадка, ВыбХС) Экспорт

	ОбъектВыполнения = ПроверитьПереопределениеФункции("НайтиПервуюПартию");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.НайтиПервуюПартию(Продукция_Элемент,ВыбПлощадка, ВыбХС);
	КонецЕсли;

	Рез="";

	Спр = СоздатьОбъект("Справочник.ВСД_Партия");
	Если Спр.ВыбратьЭлементыПоРеквизиту("Продукция_Элемент",Продукция_Элемент,1)=1 Тогда
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.Получатель_Площадка <> ВыбПлощадка Тогда
				Продолжить;
			КонецЕсли;
			// Много ХС с одинаковым ГУИД - т.е. разные элементы спр. Контрагенты, но ЮЛ одно И то же (куча площадок)
			Попытка
			Если СокрЛП(Спр.Получатель_ХозСубъект.GUID) <> СокрЛП(ВыбХС.GUID) Тогда
				Продолжить;
			КонецЕсли;
			Исключение КонецПопытки;
			Если (Спр.ПометкаУдаления()=0) И (Спр.Количество>0) Тогда
				Возврат Спр.ТекущийЭлемент();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат рез;
КонецФункции

Функция ЗаполнитьПартииПоТЧДокумента(Докум,ВыбПлощадка, ВыбХС) Экспорт
	// подбирает партии
	
	//{ Переопределение функции	
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьПартииПоТЧДокумента");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьПартииПоТЧДокумента(Докум,ВыбПлощадка, ВыбХС);
	КонецЕсли;
	//}
	
	ДобавлятьУпаковки = ПолучитьКонстанту("ДобавлятьУпаковки");

	ТЗПартий = СоздатьОбъект("ТаблицаЗначений");
	ТЗПартий.НоваяКолонка("Продукция_Элемент",,,,,50,);
	ТЗПартий.НоваяКолонка("Партия",,,,,15,);
	ТЗПартий.НоваяКолонка("Колво","Число",,,,5,);
	ТЗПартий.НоваяКолонка("КолвоМест","Число",,,,5,);
	ТЗПартий.НоваяКолонка("Количество","Число",,,,5,);
	Если ДобавлятьУпаковки=1 Тогда
		ТЗПартий.НоваяКолонка("КолвоМестСписания","Число",,,,5,);
	КонецЕсли;
	ТЗПартий.НоваяКолонка("ВСД_Производство",,,,,3,);

	Состояние("Заполнение списка партий ВСД ");

	тз = СвернутьТч(Докум);

	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

		стр=0;
		Если ТЗПартий.НайтиЗначение(тз.Продукция_Элемент,стр,"Продукция_Элемент")>0 Тогда
			колво = Число(ТЗПартий.ПолучитьЗначение(стр, "Количество"));
			ТЗПартий.УстановитьЗначение(стр,"Количество", колво+тз.Количество);
			Если ДобавлятьУпаковки=1 Тогда
				колвоМест = Число(ТЗПартий.ПолучитьЗначение(стр, "КолвоМестСписания"));
				ТЗПартий.УстановитьЗначение(стр,"КолвоМестСписания", колвоМест+тз.КоличествоМест);
			КонецЕсли;
		Иначе
			ТЗПартий.НоваяСтрока();
			ТЗПартий.Продукция_Элемент = тз.Продукция_Элемент;
			ТЗПартий.Количество = тз.Количество;
			Если ДобавлятьУпаковки=1 Тогда
				ТЗПартий.КолвоМестСписания = тз.КоличествоМест;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	//Выберем партии автоматом
	ТЗПартий.ВыбратьСтроки();
	Пока ТЗПартий.ПолучитьСтроку() = 1 Цикл
		Попытка
			ТЗПартий.Партия = НайтиПервуюПартию(ТЗПартий.Продукция_Элемент, ВыбПлощадка, ВыбХС);
			ТЗПартий.Колво = ТЗПартий.Партия.Количество;
			Если ДобавлятьУпаковки=1 Тогда
				ТЗПартий.КолвоМест = ТЗПартий.Партия.КоличествоМест;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Возврат ТЗПартий;

КонецФункции

Процедура СоздатьХС( ВыбЗначение ) Экспорт

	СписокПараметров = СоздатьОбъект("СписокЗначений");
	Если ТипЗначенияСтр(ВыбЗначение) = "ТаблицаЗначений" Тогда 
		СписокПараметров.ДобавитьЗначение( ВыбЗначение.ХозСубъект, "ХС");
	Иначе
		СписокПараметров.ДобавитьЗначение( ВыбЗначение, "ХС" );
	КонецЕсли;

	ОткрытьФорму("Отчет", СписокПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_СоздатьХС.ert");

КонецПроцедуры

Процедура СоздатьПлощадку( ВыбЗначение ) Экспорт
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	Если ТипЗначенияСтр(ВыбЗначение) = "ТаблицаЗначений" Тогда 
		СписокПараметров.ДобавитьЗначение( ВыбЗначение.ХозСубъект, "ХС");
	Иначе
		СписокПараметров.ДобавитьЗначение( ВыбЗначение, "ХС" );
	КонецЕсли;

	ОткрытьФорму("Отчет", СписокПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_СоздатьПлощадку.ert");
	
КонецПроцедуры

Функция ПогаситьВСД(ВыбДок) Экспорт
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	//СписокПараметров.ДобавитьЗначение(Сам(), "ГМ");

	СписокПараметров.ДобавитьЗначение(ВыбДок.ИмяФайлаОтвет, "ФайлОтвета");
	СписокПараметров.ДобавитьЗначение(ВыбДок.Получатель_Хозсубъект, "Отправитель_ХозСубъект");
	СписокПараметров.ДобавитьЗначение(ВыбДок.Получатель_Площадка, "Отправитель_Площадка");
	СписокПараметров.ДобавитьЗначение( 1, "ОтправитьВСД");	
	СписокПараметров.ДобавитьЗначение( 1, "этоПеремещение");	
	
	ОткрытьФорму("Отчет", СписокПараметров, ПолучитьКонстанту("КаталогМодуля")+"Меркурий_Гашение_ВСД2.ert");
	
КонецФункции

Процедура ОткрытьЗапрос(док) Экспорт
		
	Попытка
		Если ПустоеЗначение(Док.ИмяФайлаЗапрос)=1 Тогда 
			Сообщить("Запрос не сохранен для документа "+док);
			Возврат;
		КонецЕсли;
		
		Сообщить( "Открываем: "+ СокрЛП(Док.ИмяФайлаЗапрос) );
		ЗапуститьПриложение( СокрЛП(Док.ИмяФайлаЗапрос) );
	Исключение
		Ошибка = "Не удалось открыть запрос "+ СокрЛП(Док.ИмяФайлаЗапрос) +" ";
		СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(),);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОткрытьОтвет(док) Экспорт
	
	Попытка
		
		Если ПустоеЗначение(Док.ИмяФайлаЗапрос)=1 Тогда 
			Сообщить("Запрос не сохранен для документа "+док);
			Возврат;
		КонецЕсли;
		
		Сообщить( "Открываем: "+ СокрЛП(Док.ИмяФайлаОтвет) );
		ЗапуститьПриложение( СокрЛП(Док.ИмяФайлаОтвет) );
	Исключение
		Ошибка = "Не удалось открыть ответ "+ СокрЛП(Док.ИмяФайлаОтвет) +" ";
		СообщитьОбОшибке(Ошибка + ОписаниеОшибки(), Сам(),);
	КонецПопытки;
	
КонецПроцедуры

Функция ВСД_Инвентаризация_ЗаполнитьТЧ(Док)  Экспорт
	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ВСД_Инвентаризация_ЗаполнитьТЧ");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ВСД_Инвентаризация_ЗаполнитьТЧ(Док);
	КонецЕсли;
	//}

	Док.УдалитьСтроки();

	КолвоМакс =500;
	ВвестиЧисло(КолвоМакс, "Введите колво партий", 10, 0, );

	ДатаМакс = "";
	ВвестиДату(ДатаМакс, "Минимальный срок годности",  );

	СпрПартии = СоздатьОбъект("Справочник.ВСД_Партия");
	СпрПартии.ВыбратьЭлементы();
	колво=0;
	Пока СпрПартии.ПолучитьЭлемент()=1 Цикл
		Если (СпрПартии.ПометкаУдаления()=1) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_Площадка <>  Док.Владелец_площадка) Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрПартии.Получатель_ХозСубъект <>  Док.Владелец_ХозСубъект) Тогда
			Продолжить;
		КонецЕсли;

		Если ПустоеЗначение(ДатаМакс)=0 Тогда
			Если ПустоеЗначение(СпрПартии.ДатаСрокГодности1)=0 Тогда
				Если Преобразовать_СтрокаДата_в_Дата(СпрПартии.ДатаСрокГодности1) > ДатаМакс Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		колво =колво+1;
		Док.НоваяСтрока();
		Док.Партия = СпрПартии.ТекущийЭлемент();
		//Док.ПриВыбореПартии();
		Док.Продукция = Док.Партия.Продукция;
		Док.ВидПродукции = Док.Партия.ВидПродукции;
		Док.ЕдиницаИзмерения = Док.Партия.ЕдиницаИзмерения;
		Док.ФормаУпаковки = Док.Партия.ФормаУпаковки;
		Док.НаименованиеПродукции = Док.Партия.НаименованиеПродукции;
		Док.ДатаИзготовления1 = Док.Партия.ДатаИзготовления1;
		Док.ДатаИзготовления2 = Док.Партия.ДатаИзготовления2;
		Док.ДатаСрокГодности1 = Док.Партия.ДатаСрокГодности1;
		Док.ДатаСрокГодности2 = Док.Партия.ДатаСрокГодности2;
		Док.Производитель_площадка = Док.Партия.Производитель_Площадка;
		Док.Продукция_Элемент = Док.Партия.Продукция_Элемент;

		Если колво >= КолвоМакс Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции

//======= ПРЕДОПРЕДЕЛЁННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ==============

Функция _ВводНаОсновании(Конт, ДокументОснование) Экспорт
	Рез = 0;

	// Общие реквизиты
	Если ПустоеЗначение(ДокументОснование)=0 Тогда 
		
		// Производитель_ХозСубъект И Площадка
		Если глЕстьРеквизитШапки("Производитель_ХозСубъект", Конт.Вид()) = 1 Тогда
			Если ПустоеЗначение( Конт.Производитель_ХозСубъект ) = 1 Тогда
				Конт.Производитель_ХозСубъект = ПолучитьКонстанту("Отправитель_ХозСубъект");
				Производитель_Площадка = "";
				Если глЕстьРеквизитШапки("Склад", ДокументОснование.Вид()) = 1 Тогда
					Производитель_Площадка = НайтиПлощадкуПоСкладу(ДокументОснование.Склад, Конт.Производитель_ХозСубъект);
				КонецЕсли;
				Если ПустоеЗначение(Производитель_Площадка) = 1 Тогда
					Производитель_Площадка = ПолучитьКонстанту("Отправитель_Площадка");
				КонецЕсли;
				Конт.Производитель_Площадка = Производитель_Площадка;
			КонецЕсли;
		КонецЕсли;
	
		// Получатель_ХозСубъект И Площадка
		Если глЕстьРеквизитШапки("Получатель_ХозСубъект", Конт.Вид()) = 1 Тогда
			Если ПустоеЗначение( Конт.Получатель_ХозСубъект ) = 1 Тогда
				Если глЕстьРеквизитШапки("Получатель_ХозСубъект", ДокументОснование.Вид()) = 1 Тогда
					// ВСД2_Транзакция
					Конт.Получатель_ХозСубъект = ДокументОснование.Получатель_ХозСубъект;
					Конт.Получатель_Площадка = ДокументОснование.Получатель_Площадка;
					
				ИначеЕсли ДокументОснование.Вид() = "ПеремещениеТМЦ" Тогда
					
					Конт.Получатель_ХозСубъект = ПолучитьХСПоФирме(ДокументОснование.ФирмаПолучатель);
					Если ПустоеЗначение(Конт.Получатель_ХозСубъект)=1 Тогда
						Сообщить("нет сведений о Получателе "+ДокументОснование.ФирмаПолучатель+" в справочнике ВСД_ХозСубъекты","!!");
						Возврат рез;
					КонецЕсли;
					Конт.Получатель_Площадка = НайтиПлощадкуПоСкладу(ДокументОснование.СкладПолучатель, Конт.Получатель_ХозСубъект);
		
					Если ПустоеЗначение(Конт.Получатель_Площадка)=1 Тогда
						Сообщить("Не удалось найти площадку ГрузоПолучателя По складу "+ДокументОснование.СкладПолучатель,"!");
						Возврат Рез;
					КонецЕсли;	
				Иначе //Реализация
					НазваниеРеквизитаГрузополучатель = ПолучитьКонстанту("НазваниеРеквизитаГрузополучатель");
					НазваниеРеквизитаКонтрагент = ПолучитьКонстанту("НазваниеРеквизитаКонтрагент");
					Попытка
						ВыбКонтрагент = ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаКонтрагент);
						Конт.Получатель_ХозСубъект = НайтиХозСубъект( ВыбКонтрагент );
						Если ПустоеЗначение(Конт.Получатель_ХозСубъект)=1 Тогда
							Сообщить("нет сведений о Получателе "+ ВыбКонтрагент +" в справочнике ВСД_ХозСубъекты","!!");
							Возврат рез;
						КонецЕсли;
					Исключение					
						Конт.Получатель_ХозСубъект = НайтиХозСубъект(ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
						Если ПустоеЗначение(Конт.Получатель_ХозСубъект)=1 Тогда
							Сообщить("Нет сведений о Получателе "+ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_ХозСубъекты","!!");
							Возврат рез;
						КонецЕсли;
					КонецПопытки;
		
					_Получатель_Площадка = НайтиПлощадкуПоКонтрагенту(ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель));
					Попытка								
						Конт.Получатель_Площадка = _Получатель_Площадка;
					Исключение
						Сообщить("Не удалось установить площадку = "+_Получатель_Площадка);
					КонецПопытки;
		
					Если ПустоеЗначение(Конт.Получатель_Площадка)=1 Тогда
						Сообщить("Нет сведений о площадке ГрузоПолучателя "+ДокументОснование.ПолучитьАтрибут(НазваниеРеквизитаГрузополучатель)+" в справочнике ВСД_Площадки","!");
						Возврат Рез;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Конт.ДатаДок = ДокументОснование.ДатаДок;

		// Отправитель_ХозСубъект И Площадка
		Если глЕстьРеквизитШапки("Отправитель_ХозСубъект", Конт.Вид()) = 1 Тогда
			Если ПустоеЗначение(Конт.Отправитель_ХозСубъект )=1 Тогда 
				Конт.Отправитель_ХозСубъект = ПолучитьКонстанту("Отправитель_ХозСубъект");
				_Отправитель_Площадка = "";
				Если глЕстьРеквизитШапки("Склад", ДокументОснование.Вид()) = 1 Тогда
					_Отправитель_Площадка = НайтиПлощадкуПоСкладу(ДокументОснование.Склад, Конт.Отправитель_ХозСубъект);
				КонецЕсли;
				Если ПустоеЗначение(_Отправитель_Площадка) = 1 Тогда
					_Отправитель_Площадка = ПолучитьКонстанту("Отправитель_Площадка");
				КонецЕсли;
				Конт.Отправитель_Площадка = _Отправитель_Площадка;
			КонецЕсли;
		КонецЕсли;

		Если глЕстьРеквизитШапки("ДокОснование", Конт.Вид()) = 1 Тогда
			Конт.ДокОснование = ДокументОснование; // может быть пустой
		КонецЕсли;
		
	Иначе 
		//ПустоеЗначение(ДокументОснование)=1 Тогда 
		
		Конт.ДатаДок = ТекущаяДата();
		
	КонецЕсли;
	

	ВыбФирма = ПолучитьФирмуИзКонтекста(Конт);
	Попытка Конт.ВыбФирма = ВыбФирма; Исключение КонецПопытки;

	ФирмаИмяРеквизита = "";
	ПолучитьИмяРеквизитаФирма(Конт.Вид(), ФирмаИмяРеквизита);
	Если ФирмаИмяРеквизита <> "" Тогда
		Конт.УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);
	КонецЕсли;

	Если глЕстьРеквизитШапки("Автор", Конт.Вид()) = 1 Тогда
		Конт.Автор = ПолучитьАвтора();
		Попытка	Конт.Филиал = Конт.Автор.Филиал; Исключение	КонецПопытки;
	КонецЕсли;


	// Перевозчик_ХозСубъект
	Если глЕстьРеквизитШапки("Перевозчик_ХозСубъект", Конт.Вид()) = 1 Тогда
		Если ПустоеЗначение( Конт.Перевозчик_ХозСубъект )=1 Тогда
			Конт.Перевозчик_ХозСубъект = ПолучитьКонстанту("Перевозчик_ХозСубъект");
		КонецЕсли;
	КонецЕсли;

	Возврат 1;
КонецФункции

Процедура _ПриОткрытии(Конт) Экспорт
	фМодальныйРежим=Конт.Форма.МодальныйРежим();
	Если фМодальныйРежим=0 Тогда
		ОбъектПривязка=СоздатьОбъект("Меркурий.Привязки");
		ОбъектПривязка.УстановитьФорму(Конт.Форма);
		Попытка Конт.оПривязки=ОбъектПривязка; Исключение КонецПопытки;
	КонецЕсли;

	Попытка
		Конт.ВыбФирма = ПолучитьФирмуИзКонтекста(Конт);

		Если ПустоеЗначение(Конт.ВыбФирма)=1 Тогда
			Если ПустоеЗначение(Конт.Отправитель_ХозСубъект) = 0 Тогда
				Конт.ВыбФирма = ПолучитьФирмуПоХС(Конт.Отправитель_ХозСубъект);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Попытка
		Если СписокФирм.РазмерСписка() = 0 Тогда
			Предупреждение("Нет сохраненных настроек, обмен невозможен!");
			СтатусВозврата(0); Возврат;
		Иначе
			СписокФирм.Выгрузить(Конт.СписокФирм);
			Поз = СписокФирм.НайтиЗначение(Конт.ВыбФирма);
			Если Поз <> 0 Тогда
				Конт.СписокФирм.ТекущаяСтрока(Поз);
			Иначе
				Конт.СписокФирм.ТекущаяСтрока(0);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;

	РасширениеФормы=СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(Конт.Форма);
	_ТипОбъекта = РасширениеФормы.ТипОбъекта();

	Инициализация(Конт);
	Если _ТипОбъекта = "Документ" Тогда
		Если (Конт.Выбран() = 0) Тогда  
			Если (глЕстьРеквизитШапки("ДокОснование", Конт.Вид()) = 1) Тогда  
				Если (ПустоеЗначение( Конт.ДокОснование )=1) Тогда
		    		ЗагрузитьПараметрыВФорму(Конт);
				КонецЕсли;
			Иначе
				ЗагрузитьПараметрыВФорму(Конт);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли _ТипОбъекта = "ВнешнийОтчет" Тогда
	    ЗагрузитьПараметрыВФорму(Конт);
	КонецЕсли;

КонецПроцедуры

Процедура _ПослеОткрытия(Конт) Экспорт
	фМодальныйРежим=Конт.Форма.МодальныйРежим();
	Если фМодальныйРежим=0 Тогда
		Попытка Конт.оПривязки.ПослеОткрытия(); Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура _ПриИзмененииРазмераОкна(Конт, ТипСобытия, НовШирина, НовВысота) Экспорт
	фМодальныйРежим=Конт.Форма.МодальныйРежим();
	Если фМодальныйРежим=0 Тогда
		Попытка Конт.оПривязки.ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота); Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//======= ТАБЛИЧНОЕ ПОЛЕ ==============

//перенесено в класс_Меркурий_Привязки.ert
//******************************************************************************
Процедура ВывестиФлажок(ОформлениеСтроки, ДанныеСтроки, идКолонки="Пометка") Экспорт
	ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить(идКолонки);
	ОбъектЯчейка.ЗначениеФлажка=ДанныеСтроки.Получить(идКолонки);
	ОбъектЯчейка.ОтображатьФлажок=1;
	ОбъектЯчейка.ОтображатьТекст=0;
КонецПроцедуры

//перенесено в класс_Меркурий_Привязки.ert
//******************************************************************************
Процедура ПриАктивизацииСтрокиТП(тпОбъект, тзОбъект) Экспорт
	Если (ТипЗначенияСтр(тпОбъект)="ТабличноеПоле") ИЛИ (ТипЗначенияСтр(тпОбъект)="Меркурий.ТабличноеПоле.ТЗ") Тогда 	
	Иначе 
		Возврат; 
	КонецЕсли;	
	Если ПустоеЗначение(тпОбъект.ТекущиеДанные)=1 Тогда Возврат; КонецЕсли;
	Если тзОбъект.КоличествоСтрок()=0 Тогда Возврат; КонецЕсли;
	тзОбъект.ТекущаяСтрока(тпОбъект.ТекущиеДанные.НомерСтроки);
	тзОбъект.ПолучитьСтрокуПоНомеру(тпОбъект.ТекущиеДанные.НомерСтроки);
КонецПроцедуры

//перенесено в класс_Меркурий_Привязки.ert
//******************************************************************************
Процедура ПриАктивизацииКолонкиТП(тпОбъект, тзОбъект) Экспорт
	Если (ТипЗначенияСтр(тпОбъект)="ТабличноеПоле") ИЛИ (ТипЗначенияСтр(тпОбъект)="Меркурий.ТабличноеПоле.ТЗ") Тогда 	
	Иначе 
		Возврат; 
	КонецЕсли;	
	Если тзОбъект.КоличествоКолонок()=0 Тогда Возврат; КонецЕсли;
	тзОбъект.ТекущаяКолонка(тпОбъект.ТекущаяКолонка.Имя);
КонецПроцедуры

//перенесено в класс_Меркурий_Привязки.ert
Процедура СоздатьКолонкиПоИсточнику(тпСсылка, тзСсылка, фНомерСтроки=0)
Перем Заголовок, Ширина, ФорматнаяСтрока, Положение;
	Если фНомерСтроки=1 Тогда
		НоваяКолонка=тпСсылка.Колонки.Добавить("НомерСтроки");
		НоваяКолонка.Заголовок="№ строки";
		НоваяКолонка.Данные="НомерСтроки";
		НоваяКолонка.Ширина=30;
	КонецЕсли;
	Для ъ=1 По тзСсылка.КоличествоКолонок() Цикл
		идКолонки=тзСсылка.ПолучитьПараметрыКолонки(ъ,,,, Заголовок, Ширина, ФорматнаяСтрока, Положение);
		Если тзСсылка.ВидимостьКолонки(идКолонки)=0 Тогда Продолжить; КонецЕсли;
		НоваяКолонка=тпСсылка.Колонки.Добавить(идКолонки);
		НоваяКолонка.Заголовок=Заголовок;
		НоваяКолонка.Данные=идКолонки;
		НоваяКолонка.ГоризонтальноеВыравнивание=Положение;
		НоваяКолонка.Ширина=?(Ширина>0, Ширина, 15)*6.2;
		НоваяКолонка.Формат=ФорматнаяСтрока;
		Если Ширина = 0 Тогда НоваяКолонка.Видимость = 0; КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//перенесено в класс_Меркурий_Привязки.ert
Функция СоздатьТабличноеПоле(Конт, ЭлементДиалога, ОбъектИсточник, фВидимость=1, фНомерСтроки=0, КонтекстКласса=0) Экспорт
	ОбъектФорма=СоздатьОбъект("Форма");
	ОбъектФорма.УстановитьФорму(Конт.Форма);
	Если ПустоеЗначение(КонтекстКласса)=1 Тогда
		ОбъектТабличноеПоле=ОбъектФорма.СоздатьЭлементУправления("ТабличноеПоле", ЭлементДиалога);

		ОбъектТабличноеПоле.РежимВыделенияСтроки =2;
		ОбъектТабличноеПоле.ЦветФонаВыделения=223322;
		ОбъектТабличноеПоле.SetTextMargins(, 0, , 2);
		//ОбъектТабличноеПоле.ЧередованиеЦветовСтрок = 1;
	Иначе
		ОбъектТабличноеПоле=ОбъектФорма.СоздатьЭлементУправления(КонтекстКласса, ЭлементДиалога);
	КонецЕсли;

	Конт.Форма.ПолучитьАтрибут(ЭлементДиалога).Видимость(фВидимость);

	Если ТипЗначенияСтр(ОбъектИсточник)="ТаблицаЗначений" Тогда
		Источник=СоздатьОбъект("VTProvider");
		Источник.УстТаблицуЗначений(ОбъектИсточник);
		СоздатьКолонкиПоИсточнику(ОбъектТабличноеПоле, ОбъектИсточник,фНомерСтроки);
		ОбъектТабличноеПоле.ПоставщикДанных=Источник;
	КонецЕсли;
	Возврат ОбъектТабличноеПоле;
КонецФункции

//******************************************************************************
Процедура _ЗакладкиВыбор(тпЗакладки, ОбъектКолонка) Экспорт
	стрИмяШрифта="MSSansSerif"; //"Arial";
	Для ъ=0 По тпЗакладки.Колонки.Количество()-1 Цикл
		текКолонка=тпЗакладки.Колонки.Получить(ъ);
		текКолонка.ЦветТекстаЗаголовка=-1;
		текКолонка.ЦветФонаЗаголовка=14745568; //12632256; //14745568; //-1; //12632256; //12903393;
		текКолонка.ШрифтЗаголовка=_ФабрикаОбъектов.Шрифт(стрИмяШрифта, 8, 0, 0);
		текКолонка.ГоризонтальноеВыравнивание=3;
	КонецЦикла;
	ОбъектКолонка.ЦветТекстаЗаголовка=16711680; //16711680; //7490868; //12463901;
	ОбъектКолонка.ЦветФонаЗаголовка=12639424; //14745568; //14745568;
	ОбъектКолонка.ШрифтЗаголовка=_ФабрикаОбъектов.Шрифт(стрИмяШрифта, 8, 1, 0);
	тпЗакладки.ТекущаяКолонка=ОбъектКолонка;
КонецПроцедуры

//******************************************************************************
Процедура _ЗакладкиЗаполнить(тпЗакладки, спЗакладки) Экспорт
	тпЗакладки.Шрифт=_ФабрикаОбъектов.Шрифт("MSSansSerif", 8, 0);
	тпЗакладки.СтильЗаголовков=1;
	тпЗакладки.РазрешитьПеретаскивание=0;
	тпЗакладки.РазрешитьНачалоПеретаскивания=0;
	тпЗакладки.ВертСкроллер=1;
	тпЗакладки.УстановитьОтступы(, 2, , 6);
	Для ъ=1 По спЗакладки.РазмерСписка() Цикл
		спЗакладки.Пометка(ъ, 1);
	КонецЦикла;

	Для ъ=1 По спЗакладки.РазмерСписка() Цикл
		Если спЗакладки.Пометка(ъ)=0 Тогда Продолжить; КонецЕсли;
		стрПредставление="";
		стрИдентификатор=спЗакладки.ПолучитьЗначение(ъ, стрПредставление);

		ОбъектКолонка=тпЗакладки.Колонки.Добавить(стрИдентификатор);
		ОбъектКолонка.Данные=стрИдентификатор;
		ОбъектКолонка.Заголовок=стрПредставление;
		ОбъектКолонка.Ширина=СтрДлина(стрПредставление)*10;
		ОбъектКолонка.ИзменениеРазмера=0;
		ОбъектКолонка.ЦветТекстаЗаголовка=-1;
		ОбъектКолонка.ЦветФонаЗаголовка=14745568; //12632256; //12632256; //12903393;
		ОбъектКолонка.ГоризонтальноеВыравнивание=3;

		Если ъ=1 Тогда _ЗакладкиВыбор(тпЗакладки, ОбъектКолонка); КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///******************************** ADirks 10.07.2018 ************
//ВНовомОкне - м.б. 0, 1 ИЛИ строка - ИД формы
Функция ОткрытьОбработку(Имя, Параметры = "", ВНовомОкне = 0, фМодально = 0) Экспорт
    Суффикс = "";
    Если ВНовомОкне = 0 Тогда
        Суффикс = "#";
    ИначеЕсли ТипЗначения(ВНовомОкне) = 2 Тогда
        Суффикс = "#"+ВНовомОкне;
    КонецЕсли;

    Парам = Параметры;
    Если фМодально = 1 Тогда
        ОткрытьФормуМодально("Отчет"+Суффикс, Парам, ПолучитьКонстанту("КаталогМодуля")+Имя+".ert");
    Иначе
        ОткрытьФорму("Отчет"+Суффикс, Парам, ПолучитьКонстанту("КаталогМодуля")+Имя+".ert");
    КонецЕсли;

    Возврат Парам;
КонецФункции
///******************************** ADirks 10.07.2018 ************

Процедура Ошибка() Экспорт

	Попытка
		А = 1/0;
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Сам(), "НомерСтрокиМдуля(8937)");
	КонецПопытки;
КонецПроцедуры

Функция УстановитьТермическоеСостояние(Док) Экспорт
	ТермическоеСостояние = 4;
	тз="";
	Док.ВыгрузитьТабличнуюЧасть(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл		
		Попытка
			//1. значение берем из ВСД_Продукция_Элемент
			ТермическоеСостояниеЭлемента = тз.Продукция_Элемент.ТермическоеСостояние.ПорядковыйНомер();
			Если ТермическоеСостояниеЭлемента = 0 Тогда
				//2 пустое значение = значение По умолчанию
				ТермическоеСостояниеЭлемента = ПолучитьКонстанту("ТермУсловияПеревозки").ПорядковыйНомер(); 
			КонецЕсли;		
			//3. //заморозка в приоритете 
			ТермическоеСостояние = Мин( ТермическоеСостояниеЭлемента, ТермическоеСостояние ); 
		Исключение
			// Если не указано состояние => Заморозка
			ТермическоеСостояние = 1;
		КонецПопытки;		
	КонецЦикла;

	Возврат Перечисление.ВСД_ТермическиеУсловияПеревозки.ЗначениеПоНомеру(ТермическоеСостояние);
КонецФункции

Функция ЗаполнитьВСД_Транзакция( КонтДокумента, ДокОснование, тзТабличнаяЧасть="" ) Экспорт
	//{ Переопределение функции
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьВСД_Транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьВСД_Транзакция( КонтДокумента, ДокОснование, тзТабличнаяЧасть);
	КонецЕсли;
	//}
	
	Если ФС.СуществуетФайл(ПолучитьКонстанту("КаталогМодуля")+"ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД_транзакция.ert")=1 Тогда
		//{ переопределение функции создания ВСД 
		// интеграция переопределяется в Меркурий_Подключаемый_Создание_ВСД_Производство.ert
		Сообщить("ПодключаемыеМодули\Меркурий_Подключаемый_Создание_ВСД_транзакция.ert отключено.
		|Используйте модуль Меркурий_Интеграция.ert для переопределения функций","!");
		//}
	КонецЕсли;
	
	Если _ВводНаОсновании(КонтДокумента, ДокОснование) = 0 Тогда
	    СтатусВозврата(0); Возврат "";
	КонецЕсли;
			
	ВыбФирма = ПолучитьФирмуИзКонтекста(ДокОснование);
	
	ФирмаИмяРеквизита = "";
	ПолучитьИмяРеквизитаФирма(КонтДокумента.Вид(), ФирмаИмяРеквизита);
	Если ФирмаИмяРеквизита <> "" Тогда
		КонтДокумента.УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);
	КонецЕсли;	
	
	КонтДокумента.ТтнСерия 	= ""; 
	КонтДокумента.ТтнНомер 	= ДокОснование.НомерДок;
	КонтДокумента.ТтнДата 	= ДокОснование.ДатаДок;
	КонтДокумента.номерАвто 		= ПолучитьНомерАвто(ДокОснование);
	КонтДокумента.Экспертиза 		= СписокКонстант.Получить("ВСД_Экспертиза");
	КонтДокумента.Местность 		= СписокКонстант.Получить("ВСД_Местность");
	КонтДокумента.ОсобыеОтметки 	= СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	КонтДокумента.cargoExpertized = 1;
	КонтДокумента.cargoInspected  = 1;			

	Если ПустоеЗначение(тзТабличнаяЧасть)=1 Тогда		
		тзПартий = ЗаполнитьТчДокументаПоАктуальнымПартиям( ДокОснование, КонтДокумента.Отправитель_Площадка, КонтДокумента.Отправитель_ХозСубъект );
	Иначе
		тзПартий = тзТабличнаяЧасть;
	КонецЕсли;
	
	Если тзПартий.КоличествоСтрок()=0 Тогда
	    Сообщить("Нет партий для списания");
		Возврат "";
	КонецЕсли;
	
	тзПартий.ВыбратьСтроки();
	Пока тзПартий.ПолучитьСтроку() = 1 Цикл
		//ВрПартия = тзПартий.Партия;		

		КонтДокумента.НоваяСтрока();
		КонтДокумента.Партия = тзПартий.Партия;
		КонтДокумента.Количество = тзПартий.Количество; 
		Попытка	КонтДокумента.КоличествоМест = тзПартий.КолвоМестСписания; Исключение КонецПопытки;
				
		КонтДокумента.ЕдиницаИзмерения = КонтДокумента.Партия.ЕдиницаИзмерения;
		КонтДокумента.ФормаУпаковки = КонтДокумента.Партия.ФормаУпаковки;
		Если ПустоеЗначение(КонтДокумента.ФормаУпаковки)=1 Тогда // без упаковки Мест = 0
			КонтДокумента.КоличествоМест = 0;    
		КонецЕсли;
		
		КонтДокумента.Продукция = КонтДокумента.Партия.Продукция;
		КонтДокумента.ВидПродукции = КонтДокумента.Партия.ВидПродукции;
		КонтДокумента.Продукция_Элемент 	= тзПартий.Продукция_Элемент;
		
		КонтДокумента.НаименованиеПродукции = КонтДокумента.Продукция_Элемент.Наименование;
		КонтДокумента.Номенклатура = тзПартий.Номенклатура;
	КонецЦикла;
	
	КонтДокумента.ТермическоеСостояние = УстановитьТермическоеСостояние( КонтДокумента );
	
    Если КонтДокумента.КоличествоСтрок()=0 Тогда
        Сообщить("Нет партий для списания!","!");
    КонецЕсли;
	Возврат "";
		
	//Если ПустоеЗначение(ДокСсылка)  = 0 Тогда
	//	ОткрытьФорму(ДокСсылка);
	//    СтатусВозврата(0); 
	//КонецЕсли;
КонецФункции

//{########################## Функции Групповых обработок: ###############################
// Меркурий_ГО_Реализации_Транзакции.ert
// Меркурий_ГО_Реализации_Транзакции_2.ert
//

// возвращает остаток партии в 1С
Функция ПолучитьОстатокПартии( ВыбПартия ) Экспорт
	
	ТекОстаток=0;
	Если ПустоеЗначение( ВыбПартия ) = 0 Тогда 
		Если ПолучитьКонстанту("КонтрольОстатковПоРегистру") = 1 Тогда 			
			ТекОстаток = Регистр.ВСД_Партии.СводныйОстаток( ВыбПартия,"Количество");
		Иначе
			ТекОстаток = ВыбПартия.Количество; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат (ТекОстаток);
	
КонецФункции

Функция ЗаполнитьТзПартии( тзДокументы ) Экспорт
	              
	//{ Переопределение функции
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьТзПартии");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьТзПартии( тзДокументы );
	КонецЕсли;
	//}
	
	тзПартии = СоздатьОбъект("Таблицазначений");
	//тзПартии.НоваяКолонка("сЦвет",1,,,,1);
	тзПартии.НоваяКолонка("ДокРеализации",,,,,20,);
	тзПартии.НоваяКолонка("Номенклатура",,,,,20,);
	тзПартии.НоваяКолонка("Продукция_Элемент",,,,,20,);
	тзПартии.НоваяКолонка("Партия",,,,,20,);
	тзПартии.НоваяКолонка("КолвоНаСкладе","Число",,,,10,);
	тзПартии.НоваяКолонка("Количество","Число",,,,10,);
	тзПартии.НоваяКолонка("ПолеСортировки",,,,,10,);	
	тзПартии.НоваяКолонка("ДатаИзготовления",,,,,20,);
	//тзПартии.УдалитьСтроки();

	тзДокументы.ВыбратьСтроки();
	Пока тзДокументы.ПолучитьСтроку() = 1 Цикл
		Если тзДокументы.Пометка<>1 Тогда
			Продолжить;
		КонецЕсли;

		Если ПустоеЗначение(тзДокументы.ВСД) = 0 Тогда
			Сообщить("Уже создан "+тзДокументы.ВСД+" Пропускаю");
		    Продолжить;
		КонецЕсли;

		Состояние("Заполнение списка партий ВСД ");

		тз = ВыгрузитьТч(тзДокументы.Док);

		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
			тзПартии.НоваяСтрока();
			тзПартии.ДокРеализации = тз.ДокРеализации;
			тзПартии.Номенклатура = тз.Номенклатура;
			тзПартии.Продукция_Элемент = тз.Продукция_Элемент;
			тзПартии.Количество = тз.Количество;
			тзПартии.ДатаИзготовления = тз.ДатаИзготовления;
		КонецЦикла;
	КонецЦикла;
	
	Возврат тзПартии;
КонецФункции

Процедура УменьшитьНаРаспределенныеПартии( тзДокументы, _тзИсходныеПартии ) Экспорт
	// Подберем уже заполненнные, но не отправленные ВСД,
	// Выбираем ВСЕ документы, т.к. они м.б. не отмечены, но в них есть эти партии к отправке!!!
	
	тз = СоздатьОбъект("Таблицазначений");
	тзДокВСД = СоздатьОбъект("Таблицазначений");
	//КонтФормы.СписокДокументов.Выгрузить(тз);
	тзДокументы.Выгрузить( тз );
	тз.Свернуть("ВСД,Пометка","");
	
	_тзИсходныеПартии.ДобавитьИндекс("ВСД_Партия","ВСД_Партия");
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		
		Если ПустоеЗначение(тз.ВСД) = 1 Тогда
		    Продолжить;
		КонецЕсли;
		Если тз.Пометка = 1 Тогда
		    Продолжить;
		КонецЕсли;				
		Если СтатусЗакрыт( тз.ВСД )=1 Тогда
		    Продолжить;
		КонецЕсли;

		тз.ВСД.ВыгрузитьТабличнуюЧасть(тзДокВСД);
		тзДокВСД.Свернуть("Партия","Количество");
		тзДокВСД.ВыбратьСтроки();
		Пока тзДокВСД.ПолучитьСтроку() = 1 Цикл
		    Если ПустоеЗначение(тзДокВСД.Партия) = 1 Тогда
		        Продолжить;
			КонецЕсли;		
			
			_тзИсходныеПартии.УстановитьФильтр(тзДокВСД.Партия, тзДокВСД.Партия, "ВСД_Партия");
			_тзИсходныеПартии.ВыбратьСтроки("ВСД_Партия");
			
			Пока _тзИсходныеПартии.ПолучитьСтроку("ВСД_Партия")=1 Цикл
				
				_тзИсходныеПартии.Количество = _тзИсходныеПартии.Количество - тзДокВСД.Количество;
				
				Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию") = 1 Тогда
					Сообщить("Уменьшаем партию №"+СокрЛП(_тзИсходныеПартии.ВСД_Партия.НомерЗаписи)+" на "+тзДокВСД.Количество+" осталось = "+_тзИсходныеПартии.Количество );
				КонецЕсли;
				
				Если _тзИсходныеПартии.Количество < 0  Тогда
					Сообщить("В заполненных ранее ВСД на отправку обнаружено ПРЕВЫШЕНИЕ количества имеющейся партии (№ записи : "+СокрЛП(_тзИсходныеПартии.ВСД_Партия.НомерЗаписи)+") ;"+тз.ВСД,"!!");
					_тзИсходныеПартии.Количество = 0;
				КонецЕсли;				
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция РаспределитьДокументыПоПартиямИДатеИзготовления( тзДокументы, ВыбПлощадка = "", ВыбХС = "" ) Экспорт

	//{ Переопределение функции
	ОбъектВыполнения = ПроверитьПереопределениеФункции("РаспределитьДокументыПоПартиямИДатеИзготовления");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.РаспределитьДокументыПоПартиямИДатеИзготовления( тзДокументы, ВыбПлощадка, ВыбХС );
	КонецЕсли;
	//}	

	тзПартии = ЗаполнитьТзПартии( тзДокументы );

	//скопируем структуру в тзРаспределения
	тзРаспределения = СоздатьОбъект("ТаблицаЗначений"); // Итоговая таблица
	тзПартии.Выгрузить(тзРаспределения); 
	тзРаспределения.УдалитьСтроки();	
	
    //Используем список Продукция_Элемент, полученный ф-цией ЗаполнитьПартии
	сзПродукцияЭлементы = СоздатьОбъект("СписокЗначений"); // Для заполнения свободных партий
	//тзПартии.Выгрузить(сзПродукцияЭлементы,,,"Продукция_Элемент");	
	тзПартии.ВыбратьСтроки();
	Пока тзПартии.ПолучитьСтроку() = 1 Цикл
		Если ТипЗначенияСтр(тзПартии.Продукция_Элемент) = "СписокЗначений" Тогда 
			Для А=1 По тзПартии.Продукция_Элемент.РазмерСписка() Цикл
				зн = тзПартии.Продукция_Элемент.ПолучитьЗначение(А);
				сзПродукцияЭлементы.ДобавитьЗначение(зн);
			КонецЦикла;
		Иначе
			сзПродукцияЭлементы.ДобавитьЗначение(тзПартии.Продукция_Элемент);
		КонецЕсли;				
	КонецЦикла;
	
	
	//тзАктуальныеПартии = СоздатьТзАктуальныеПартии();
	тзАктуальныеПартии =СоздатьОбъект("ТаблицаЗначений");
	тзАктуальныеПартии.НоваяКолонка("ВСД_Партия","Справочник.ВСД_Партия",,,,15,);
	тзАктуальныеПартии.НоваяКолонка("Продукция_Элемент",,,,,50,);
	тзАктуальныеПартии.НоваяКолонка("ПолеСортировки");
	тзАктуальныеПартии.НоваяКолонка("Количество","Число",,,,5,);
	тзАктуальныеПартии.НоваяКолонка("КоличествоМест","Число",,,,5,);

	тзАктуальныеПартии = ПолучитьАктуальныеПартии( сзПродукцияЭлементы, ВыбПлощадка, ВыбХС, тзПартии );
	
	Если ПустоеЗначение(тзАктуальныеПартии) = 1 Тогда
		Сообщить("Нет актуальных партий По данным условиям отбора");
	КонецЕсли;

    //ПолеСортировкиПартий = ПолучитьКонстанту("ПарамКолонкаСортировкиПартииСписания");
    ЗнакСортировкиПартий = ПолучитьКонстанту("ПарамЗнакСортировкиУбывание");	
	
	тзПодобранныеПартии = СоздатьОбъект("ИндексированнаяТаблица");
	тзПодобранныеПартии.Загрузить(тзАктуальныеПартии);
	Если ЗнакСортировкиПартий=1 Тогда		
		тзПодобранныеПартии.ДобавитьИндекс("Продукция_Элемент","Продукция_Элемент, -#^*ПолеСортировки");	
	Иначе
		тзПодобранныеПартии.ДобавитьИндекс("Продукция_Элемент","Продукция_Элемент, #^*ПолеСортировки");	
	КонецЕсли;	

	Если ПолучитьКонстанту("КонтрольОстатковПоРегистру") <> 1 Тогда
				
		УменьшитьНаРаспределенныеПартии( тзДокументы, тзПодобранныеПартии );
		
	КонецЕсли;
	
	тзДокументы.ВыбратьСтроки();
	Пока тзДокументы.ПолучитьСтроку() = 1 Цикл
		Если тзДокументы.Пометка<>1 Тогда
			Продолжить;
		КонецЕсли;

		Если (ПустоеЗначение(тзДокументы.ВСД)=0) Тогда
			Если (ПустоеЗначение(тзДокументы.ВСД.Статус) = 0) Тогда
				Сообщить("Для "+тзДокументы.Док+" ВСД уже создан, но не отправлен","i");
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		тз = ЗаполнитьТчДокументаПоТЗ(тзДокументы.Док, тзПодобранныеПартии);
		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
			тзРаспределения.НоваяСтрока();
			тзРаспределения.ДокРеализации = тзДокументы.Док;
			тзРаспределения.Номенклатура = тз.Номенклатура;
			тзРаспределения.Продукция_Элемент = тз.Продукция_Элемент;
			тзРаспределения.Партия = тз.Партия;
			тзРаспределения.ПолеСортировки = тз.ПолеСортировки;				
			тзРаспределения.Количество = тз.Количество;			
			тзРаспределения.КолвоНаСкладе = ПолучитьОстатокПартии( тзРаспределения.Партия ); 
		КонецЦикла;

	КонецЦикла;

	Возврат тзРаспределения;

КонецФункции


Функция СоздатьТзПартийПроизводство() Экспорт
	          
	//{ Переопределение функции
	ОбъектВыполнения = ПроверитьПереопределениеФункции("СоздатьТзПартийПроизводство");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.СоздатьТзПартийПроизводство();
	КонецЕсли;
	//}	
	
	тзПартииПроизводство = СоздатьОбъект("Таблицазначений");
	тзПартииПроизводство.НоваяКолонка("Номенклатура",,,,,10,);
	тзПартииПроизводство.НоваяКолонка("Продукция_Элемент",,,,,20,);
	тзПартииПроизводство.НоваяКолонка("КолвоНаСкладе","Число",,,,10,);
	тзПартииПроизводство.НоваяКолонка("Количество","Число",,,,10,);
	тзПартииПроизводство.НоваяКолонка("ВСД_Производство",,,,,10,);
	тзПартииПроизводство.НоваяКолонка("ДатаИзготовления",,,,,10,); 

	Возврат тзПартииПроизводство;	
КонецФункции
                   
Функция ЗаполнитьПартииПроизводстваПоТзПартий( тзПартии ) Экспорт

	//{ Переопределение функции
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ЗаполнитьПартииПроизводстваПоТзПартий");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ЗаполнитьПартииПроизводстваПоТзПартий( тзПартии );
	КонецЕсли;
	//}	

	//тзПартииПроизводство = СоздатьОбъект("Таблицазначений");
	тзПартииПроизводство = СоздатьТзПартийПроизводство(); 
		
	ВремПартии = СоздатьОбъект("ТаблицаЗначений");
	тзПартии.Выгрузить(ВремПартии);
	ВремПартии.Свернуть("Партия, Номенклатура, Продукция_Элемент, ПолеСортировки","КолвоНаСкладе, Количество"); 
	
	ВремПартии.ВыбратьСтроки();
	Пока ВремПартии.ПолучитьСтроку() = 1 Цикл
		                                   
		Если ПустоеЗначение(ВремПартии.Партия)=0 Тогда 
			Продолжить;
		КонецЕсли;
		
		тзПартииПроизводство.НоваяСтрока();
		
		тзПартииПроизводство.Продукция_Элемент = ВремПартии.Продукция_Элемент;		

		тзПартииПроизводство.Номенклатура = ВремПартии.Номенклатура;
		тзПартииПроизводство.Количество = ВремПартии.Количество;
		тзПартииПроизводство.КолвоНаСкладе = ВремПартии.КолвоНаСкладе;
		//тзПартииПроизводство.КолвоНаСкладе = ПолучитьОстатокПартии( ВремПартии.Партия );
		
		Попытка тзПартииПроизводство.ДатаИзготовления = ВремПартии.ПолеСортировки; Исключение КонецПопытки;
		
	КонецЦикла;

	Возврат тзПартииПроизводство;
	
КонецФункции

//}#######################################################################################

//{ Мобильное Приложение  

Функция Отгрузка_Запрос_XML( ВыбДок, СФ )

  Запрос = "<?xml version='1.0' encoding='windows-1251'?>
  |<ДокументРеализация 
  |xmlns='kb99_77' 
  |xmlns:xs='http://www.w3.org/2001/XMLSchema' 
  |xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' 
  |КонтрагентНаименование='"+ВыбДок.Контрагент.Наименование+"' 
  |НомерДок='"+ВыбДок.НомерДок+"'
  |НДСВключатьВСтоимость='"+ ВыбДок.СуммаВклНДС +"'
  |НалогообложениеНДС='"+ ВыбДок.УчитыватьНДС +"'
  |ДатаДок='"+ Преобразовать_Дата_в_Строка(ВыбДок.ДатаДок) +"' 
  |КонтрагентИнн='"+ ПолучитьИНН(ВыбДок.Контрагент)+"'
  |КонтрагентКод='"+ ВыбДок.Контрагент.Код+"'";
  Если ПустоеЗначение(СФ)=0 Тогда
  	Запрос = Запрос + "
  	|ТребуетсяСФ = 'true'
  	|НомерСФ = '"+СФ.НомерДок+"'
  	|ДатаСФ = '"+Преобразовать_Дата_в_Строка(СФ.ДатаДок)+"'";
  Иначе
  	 Запрос = Запрос + "
  	|ТребуетсяСФ = 'false'";
  КонецЕсли;
  
  Если ПустоеЗначение(ВыбДок.Грузополучатель)=0 Тогда
  	Запрос = Запрос + "
  	|ГрузополучательКод='"+ВыбДок.Грузополучатель.Код+"'
  	|ГрузополучательНаименование='"+ВыбДок.Грузополучатель.Наименование+"'
  	|ГрузополучательИнн='"+ПолучитьИНН(ВыбДок.Грузополучатель)+"'>
  	|  <тчТовары> ";
  Иначе
  	Запрос = Запрос + "
  	|ГрузополучательКод='"+ВыбДок.Контрагент.Код+"'
  	|ГрузополучательНаименование='"+ВыбДок.Контрагент.Наименование+"'
  	|ГрузополучательИнн='"+ПолучитьИНН(ВыбДок.Контрагент)+"'>
  	|  <тчТовары> ";
  КонецЕсли;
  
  ВыбДок.ВыбратьСтроки();
  Пока ВыбДок.ПолучитьСтроку() = 1 Цикл
    Запрос = Запрос + "
    |    <Строки xsi:type='ДокументРеализацияТовары' 
    |НоменклатураНаименование='"+ВыбДок.Номенклатура.Наименование+"' 
	|НоменклатураКод='"+ВыбДок.Номенклатура.Код+"'
    |Количество='"+ВыбДок.Количество+"' 
    |Цена='"+ВыбДок.Цена+"' 
    |Сумма='"+ВыбДок.Сумма+"' 
    |СтавкаНДС='"+ ВыбДок.СтавкаНДС +"'
	|СуммаНДС='"+ ВыбДок.СуммаНДС +"' 
    |ЕдиницаИзмеренияКодОКЕИ='"+ВыбДок.Единица.ОКЕИ.Код+"'     
    |/>";

  КонецЦикла;
  Запрос = Запрос + "
  |  </тчТовары>
  |</ДокументРеализация>
  |";
  Возврат Запрос;
  
КонецФункции

Процедура МП_ПоказатьОтвет(Ответ)
   	
	objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.loadXML(Ответ);

	Попытка

		Если ПустоеЗначение(Ответ)=0 Тогда
			Сообщить("Ответ = "+ objDom.text +" ","i");
		Иначе
			Сообщить("Ответ = "+ Ответ +" ","!");
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ОтправитьОтгрузкуВМобильноеПриложение( ВыбДок ) Экспорт
	
	ГМ2.Инициализация(ГМ);
	Попытка ГМ.Инициализация(Контекст); Исключение КонецПопытки;	
	//{ Переопределение функции
	ОбъектВыполнения = ПроверитьПереопределениеФункции("ОтправитьОтгрузкуВМобильноеПриложение");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.ОтправитьОтгрузкуВМобильноеПриложение( ВыбДок );
	КонецЕсли;
	//}	
	
	ВидСчетаФактуры	= "СчетФактураВыданный";
	СФ = глНайтиСчетФактуру(ВыбДок, ВидСчетаФактуры);
	
	_login = ПолучитьКонстанту("mobile_login");
	_password = ПолучитьКонстанту("mobile_password");
	_service = ПолучитьКонстанту("mobile_service");
	_address = ПолучитьКонстанту("mobile_url");
	
	Если ПустоеЗначение(_address)=1 Тогда 
		СообщитьОбОшибке("Не заполнен параметр [адрес сервера мобильного приложения]");
		Возврат "";
	КонецЕсли;
	Если ПустоеЗначение(_service)=1 Тогда 
		СообщитьОбОшибке("Не заполнен параметр [сервис мобильного приложения]");
		Возврат "";
	КонецЕсли;
	
	СообщитьИнфо("Отправка документа: "+_address+_service+"["+_login+":"+_password+"]");
	
	ЗапросXML = Отгрузка_Запрос_XML( ВыбДок, СФ );

	Опции = Компонента.GetOptions();

	Опции.USERNAME 			= СокрЛП(_login);
    Опции.PASSWORD 			= СокрЛП(_password) ;
    Опции.ISSUER_ID 		= ПолучитьКонстанту("param_issuer_id");
    Опции.SERVICE_ID 		= "";
    Опции.API_KEY 			= ПолучитьКонстанту("param_api_key");
    Опции.INITIATOR_LOGIN 	= "";
    Опции.VETDOCTOR_LOGIN 	= "";
	Опции.LogsDir 			= ПолучитьКонстанту("КаталогЛогов");
	Опции.VETDOCTOR_FIO 	= "";
	Опции.VETDOCTOR_POST 	= "";
	Опции.DEBUG 			= Компонента.TRUE();

	метод = Компонента.GetMethod();
    метод.Service = СокрЛП(_Service);
    метод.Action = "kb99_77#kb99_77:ReceiveDoc77";

	appID = Компонента.GUID();
	Ответ = Компонента.SendRequestv8( _address, ЗапросXML, Опции, метод, appID);		
	
	Сообщить("Получен " + Компонента.LogFilename);
	МП_ПоказатьОтвет( Ответ );
	
КонецФункции


//}#######################################################################################

//{########################## Функции Справочник ВСД_Продукция_Элемент #####################
Функция УстановитьСоответсвие_Номенклатура_Продукция_Элемент( Номенклатура, ВСД_Продукция_Элемент ) Экспорт
	Спр = СоздатьОбъект("Справочник.ВСД_Номенклатура_Соответсвия");
	Спр.ИспользоватьВладельца(Номенклатура);
	Спр.ВыбратьЭлементы();
	Найден=0;
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.ВСД_Продукция_Элемент = ВСД_Продукция_Элемент Тогда 
			Спр.СнятьПометкуУдаления();
			Найден=1;
			Сообщить("Соответсвие активировано ["+Номенклатура+"] ["+ ВСД_Продукция_Элемент +"]");
		КонецЕсли;
	КонецЦикла;
	Если Найден=0 Тогда
		Спр.Новый();
		Спр.Владелец = Номенклатура;
		Спр.Наименование = ВСД_Продукция_Элемент.Наименование;
		Спр.ВСД_Продукция_Элемент = ВСД_Продукция_Элемент;
		Спр.Записать();
		Сообщить("Соответсвие добавлено ["+Номенклатура+"] ["+ ВСД_Продукция_Элемент +"]");
	КонецЕсли;

КонецФункции

Функция УдалитьСоответсвие_Номенклатура_Продукция_Элемент( Номенклатура, ВСД_Продукция_Элемент ) Экспорт
	Спр = СоздатьОбъект("Справочник.ВСД_Номенклатура_Соответсвия");
	Спр.ИспользоватьВладельца( Номенклатура );
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.ВСД_Продукция_Элемент = ВСД_Продукция_Элемент Тогда 
			Спр.Удалить(0);
			Сообщить("Соответсвие удалено ["+Номенклатура+"] ["+ ВСД_Продукция_Элемент +"]");
		КонецЕсли;
	КонецЦикла;	
КонецФункции

Функция ПолучитьСписок_Номенклатура_По_ВСД_Продукция_Элемент( ВСД_Продукция_Элемент ) Экспорт
	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ЭтоSQL = 1 Тогда
		ТекстЗапроса = "
			|SELECT Спр.ParentExt [Номенклатура $Справочник.Номенклатура]
			|FROM $Справочник.ВСД_Номенклатура_Соответсвия as Спр (NOLOCK)
			|WHERE $Спр.ВСД_Продукция_Элемент = :ВыбЭлемент
			|	AND Спр.ISMARK =0 
			|ORDER BY Спр.DESCR";

		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстановитьТекстовыйПараметр("ВыбЭлемент", ВСД_Продукция_Элемент);
			
		ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		ТекстЗапроса = "
			|SELECT Спр.ParentExt [Номенклатура $Справочник.Номенклатура]
			|FROM [Справочник.ВСД_Номенклатура_Соответсвия] as Спр
			|WHERE Спр.ВСД_Продукция_Элемент = :ВыбЭлемент
			|	AND Спр.ISMARK ='' 
			|ORDER BY Спр.DESCR";

		Запрос = базаДанных.НовыйЗапрос();
		Запрос.Подставлять("ВыбЭлемент", ВСД_Продукция_Элемент );
			
		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Запрос.Отладка(1);
		КонецЕсли;		
		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
		
	Возврат ТЗ;
КонецФункции		

Функция ПолучитьСписок_ВСДПродукцияЭлемент_По_Номенклатура( Номенклатура ) Экспорт
	тз = СоздатьОбъект("ТаблицаЗначений");
	Если ЭтоSQL = 1 Тогда
		ТекстЗапроса = "
			|SELECT
			|	$Спр.ВСД_Продукция_Элемент [ВСД_Продукция_Элемент $Справочник.ВСД_Продукция_Элемент]			
			|FROM $Справочник.ВСД_Номенклатура_Соответсвия as Спр (NOLOCK)
			|WHERE Спр.ParentExt  = :ВыбЭлемент
			|	AND Спр.ISMARK =0 
			|ORDER BY Спр.Code";

		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстановитьТекстовыйПараметр("ВыбЭлемент", Номенклатура);
			
		ТЗ = RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Иначе
		ТекстЗапроса = "
			|SELECT
			|	Спр.ВСД_Продукция_Элемент [ВСД_Продукция_Элемент $Справочник.ВСД_Продукция_Элемент]			
			|FROM [Справочник.ВСД_Номенклатура_Соответсвия] as Спр
			|WHERE Спр.ParentExt  = :ВыбЭлемент
			|	AND Спр.ISMARK ='' 
			|ORDER BY Спр.Code";

		Запрос = базаДанных.НовыйЗапрос();
		Запрос.Подставлять("ВыбЭлемент", Номенклатура );

		Если ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Запрос.Отладка(1);
		КонецЕсли;		
		
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
	КонецЕсли;
		
	Возврат ТЗ;
КонецФункции

//}#######################################################################################

//{ #########################    Версия ###############################

Функция ВерсияСсылка() Экспорт	
	Возврат ВерсияОписание;
КонецФункции

//} #########################    Версия ###############################

//{ #########################  Меню  ###############################

Функция МенюВСД_МаршрутныйЛист( Док ) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("МенюВСД_МаршрутныйЛист");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.МенюВСД_МаршрутныйЛист( Док );
	КонецЕсли;
	//}
	
	Зн = "";
	Попытка
		Сервис = СоздатьОбъект("Сервис");	
		Список = СоздатьОбъект("СписокЗначений");	
		Список.ДобавитьЗначение("ОформитьВСД2","Оформить ВСД2");	
	
		Если Сервис.ВыбратьЗначение(Список,Зн,,0,) <> 1 Тогда
			Возврат "";
		КонецЕсли;
	Исключение
		//меню
		СписокДействийВСД = СоздатьОбъект("СписокЗначений");
		СписокДействийВСД.ДобавитьЗначение("ОформитьВСД2","Оформить ВСД2");
			
		стр=0; Зн="";
		Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) <> 1 Тогда
			Возврат "";
		КонецЕсли;
	КонецПопытки;
	
	Если Зн ="ОформитьВСД2"  Тогда 
		
		СписокДокументов = СоздатьОбъект("ТаблицаЗначений");
		СписокДокументов.НоваяКолонка("Пометка",,,,,5,);
		СписокДокументов.НоваяКолонка("Грузополучатель",,,,,20,);
		СписокДокументов.НоваяКолонка("Площадка",,,,,20,);
		СписокДокументов.НоваяКолонка("ДокВСД",,,,,10,);
		СписокДокументов.НоваяКолонка("Отправлен",,,,,7,);
		СписокДокументов.НоваяКолонка("Статус",,,,,10,);
		СписокДокументов.НоваяКолонка("Количество","Число",10,3,,10,);
		СписокДокументов.НоваяКолонка("КоличествоМест",,,,,10,);
		СписокДокументов.НоваяКолонка("НомерАвто",,,,,10,);//+
		СписокДокументов.НоваяКолонка("Док",,,,,30,);
		СписокДокументов.НоваяКолонка("Склад",,,,,10,);
		СписокДокументов.НоваяКолонка("Контрагент",,,,,10,);
		СписокДокументов.НоваяКолонка("ХозСубъект",,,,,10,);
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку()=1 Цикл
			Попытка				
				СписокДокументов.НоваяСтрока();
				СписокДокументов.Грузополучатель = Док.Накладная.Контрагент;
				СписокДокументов.ДокВСД = Выбрать_ВСД_транзакция( Док.Накладная ) ;
				СписокДокументов.Количество = Док.Вес;
				СписокДокументов.КоличествоМест = Док.КолКоробок;
				СписокДокументов.НомерАвто = Док.ТранспортноеСредство.НомерАвто;
				СписокДокументов.Док = Док.Накладная;
				СписокДокументов.Контрагент = Док.Накладная.Контрагент;
				//СписокДокументов.ХозСубъект = ;;
			Исключение
				Сообщить(ОписаниеОшибки(),"!");
			КонецПопытки;
		КонецЦикла;
	
		ОткрытьФорму("Отчет", СписокДокументов, ПолучитьКонстанту("КаталогМодуля")+"Меркурий_ГО_Реализации_Транзакции_2.ert");
				
	КонецЕсли;

КонецФункции

Функция МенюВСД_Реализация( Док ) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("МенюВСД_Реализация");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.МенюВСД_Реализация( Док );
	КонецЕсли;
	//}
	
	Зн = "";
	Попытка
		Список = СоздатьОбъект("СписокЗначений");

		//СписокОформитьВСД = СоздатьОбъект("СписокЗначений");
		//СписокОформитьВСД.ДобавитьЗначение("ОформитьВСД","Оформить ВСД");
		//СписокОформитьВСД.ДобавитьЗначение("ОформитьВСД2","Оформить ВСД2");

		СписокПечати = СоздатьОбъект("СписокЗначений");
		СписокПечати.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
		СписокПечати.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");
		СписокПечати.ДобавитьЗначение("ПечатьСокрФормыВСД","Печать сокращенной формы");

		//Список.ДобавитьЗначение(СписокОформитьВСД,"Оформление ВСД");
		Список.ДобавитьЗначение("ОформитьВСД2","Оформить ВСД2");
		Список.ДобавитьЗначение("СписокВСД","Список ВСД");
		Список.ДобавитьЗначение(СписокПечати,"Печать ВСД");
		Список.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
		Список.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
		Список.ДобавитьЗначение("ОтправитьМП","Отправить в Мобильное Приложение");

		Если Сервис.ВыбратьЗначение(Список,Зн,,0,) <> 1 Тогда
			Возврат "";
		КонецЕсли;
	Исключение
		//меню
		СписокДействийВСД = СоздатьОбъект("СписокЗначений");
		СписокДействийВСД.ДобавитьЗначение("ОформитьВСД","Оформить ВСД");
		СписокДействийВСД.ДобавитьЗначение("ОформитьВСД2","Оформить ВСД2");
		СписокДействийВСД.ДобавитьЗначение("СписокВСД","Список ВСД");
		СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
		СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");
		СписокДействийВСД.ДобавитьЗначение("ПечатьСокрФормыВСД","Печать сокращенной формы");
		СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
		//СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");
		СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
		СписокДействийВСД.ДобавитьЗначение("ОтправитьМП","Отправить в Мобильное Приложение");

		стр=0; Зн="";
		Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) <> 1 Тогда
			Возврат "";
		КонецЕсли;
	КонецПопытки;

	Если Зн ="ОформитьВСД"  Тогда
		ОформитьВСД( Док );
	ИначеЕсли Зн ="ОформитьВСД2"  Тогда
		ГМ2.ОформитьВСД2( Док );
	ИначеЕсли Зн = "ПечатьПолнойФормыВСД" Тогда
		ПечатьВСД( Док );
	ИначеЕсли Зн = "ПечатьПолнойФормыВСД_Тест" Тогда
		ПечатьВСД_Тест( Док );
	ИначеЕсли Зн = "ПечатьСокрФормыВСД" Тогда
		ПечатьСокрВСД( Док );
	ИначеЕсли Зн = "ОткрытьВсдВГис" Тогда
		ОткрытьВсдВГис( Док );
	ИначеЕсли Зн = "СписокВСД" Тогда
		ОткрытьСписокВсд( Док );
	ИначеЕсли Зн = "ОтправитьВСД" Тогда

	ИначеЕсли Зн = "АннулироватьВСД" Тогда
		ГМ2.Аннулировать_ВСД2_транзакция( Док );
	ИначеЕсли Зн = "ОтправитьМП" Тогда
		ОтправитьОтгрузкуВМобильноеПриложение( Док );
	КонецЕсли;
	
КонецФункции

Функция МенюВСД_ВСД2( Док, КонтекстФормы ) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("МенюВСД_ВСД2");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.МенюВСД_ВСД2( Док );
	КонецЕсли;
	//}

	//меню
	СписокДействийВСД = СоздатьОбъект("СписокЗначений");
	СписокДействийВСД.ДобавитьЗначение("ПолучитьОтветВетис","Получить ответ Ветис");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьЗапрос","Открыть Запрос");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьОтвет","Открыть Ответ");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
	СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
	СписокДействийВСД.ДобавитьЗначение("Мультимодальная","Мультимодальная перевозка");
	СписокДействийВСД.ДобавитьЗначение("ИзменитьНомерТранспорта","Изменить № Транспорта");
	СписокДействийВСД.ДобавитьЗначение("ОбновитьСтатусВСД","Обновить статус ВСД");
	
	Зн = ""; стр=0;
	Попытка

		Если Сервис.ВыбратьЗначение(СписокДействийВСД,Зн,,0,) <> 1 Тогда
			Возврат "";
		КонецЕсли;
		
	Исключение	
		
		Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) <> 1 Тогда
			Возврат "";
		КонецЕсли;
		
	КонецПопытки;

	Если Зн = "ОткрытьВсдВГис" Тогда
		
		ОткрытьВсдВГис( Док );		
		
	ИначеЕсли Зн = "СписокВСД" Тогда
		
		ОткрытьСписокВсд( Док );		
		
	ИначеЕсли Зн = "АннулироватьВСД" Тогда 
		
	   	ПараПараметров = СоздатьОбъект("СписокЗначений");
	   	ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ПараПараметров.Установить("Действие", "Аннулировать");		   		   
	   	ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");		
	   	
	ИначеЕсли Зн = "ОткрытьЗапрос" Тогда 
	   	
		ОткрытьЗапрос( Док );		
		
	ИначеЕсли Зн = "ОткрытьОтвет" Тогда 
		
		ОткрытьОтвет( Док );
		
	ИначеЕсли Зн = "Мультимодальная" Тогда 

		СписокПараметров = СоздатьОбъект("СписокЗначений");
		СписокПараметров.Установить("Документ", Док);
		ОткрытьФорму("Отчет", СписокПараметров, ПолучитьКонстанту("КаталогМодуля")+"Меркурий_МультимодальнаяПеревозка.ert");
		
	ИначеЕсли Зн = "ИзменитьНомерТранспорта" Тогда 
   			
		КонтФормы = "";
		ОткрытьФорму("Документ.ВСД2_ОбновитьТранспорт",КонтФормы, Док);
		
	ИначеЕсли Зн = "ПолучитьОтветВетис" Тогда 			
		
	   	ПараПараметров = СоздатьОбъект("СписокЗначений");
	   	ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ПараПараметров.Установить("Действие", "ПолучитьОтвет");		   		   
	   	ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");	
	   	
	ИначеЕсли Зн = "ОбновитьСтатусВСД" Тогда 	
	   	
	   	ПараПараметров = СоздатьОбъект("СписокЗначений");
	   	ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ПараПараметров.Установить("Действие", "ОбновитьСтатусВСД");		   		   
	   	ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");		
	   	
	КонецЕсли;
	
	
КонецФункции

Функция МенюВСД_ВСД2_транзакция( Док, КонтекстФормы ) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("МенюВСД_ВСД2_Транзакция");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.МенюВСД_ВСД2_Транзакция( Док, КонтекстФормы );
	КонецЕсли;
	//}

	//меню
	СписокДействийВСД = СоздатьОбъект("СписокЗначений");
	СписокДействийВСД.ДобавитьЗначение("ПогаситьВСД","Погасить ВСД");
	СписокДействийВСД.ДобавитьЗначение("СписокВСД","Список ВСД"); 
	СписокДействийВСД.ДобавитьЗначение("ПечатьСокрФормыВСД","Печать сокращенной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
	СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");
	СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
	СписокДействийВСД.ДобавитьЗначение("УсловияПеревозки","Запросить условия Перевозки");
	//СписокДействийВСД.ДобавитьЗначение("ПоказатьУсловияПеревозки","Показать условия Перевозки");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьЗапрос","Открыть Запрос");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьОтвет","Открыть Ответ");
	СписокДействийВСД.ДобавитьЗначение("Мультимодальная","Мультимодальная перевозка");
	СписокДействийВСД.ДобавитьЗначение("ПолучитьОтветВетис","Получить ответ ВЕТИС");
	
	Зн = ""; стр=0;
	Попытка
		
		СписокДействийВСД = СоздатьОбъект("СписокЗначений");

		СписокОтладка = СоздатьОбъект("СписокЗначений");		
		СписокОтладка.ДобавитьЗначение("ОткрытьЗапрос","Открыть Запрос");
		СписокОтладка.ДобавитьЗначение("ОткрытьОтвет","Открыть Ответ");

		СписокПечати = СоздатьОбъект("СписокЗначений");
		СписокПечати.ДобавитьЗначение("ПечатьСокрФормыВСД","Печать сокращенной формы ВСД");
		СписокПечати.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
		СписокПечати.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");		

		СписокДействийВСД.ДобавитьЗначение("УсловияПеревозки","Получить условия перевозки");
		
		СписокДействийВСД.ДобавитьЗначение("Мультимодальная","Мультимодальная перевозка");
		СписокДействийВСД.ДобавитьЗначение("0","________________"); 
		СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");			
		СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
		СписокДействийВСД.ДобавитьЗначение("ПолучитьОтветВетис","Получить ответ ВЕТИС");
		СписокДействийВСД.ДобавитьЗначение("ОбновитьСтатусВСД","Обновить статус ВСД");
		СписокДействийВСД.ДобавитьЗначение("1","________________"); 
		СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
		СписокДействийВСД.ДобавитьЗначение("СписокВСД","Список ВСД"); 
		СписокДействийВСД.ДобавитьЗначение(СписокПечати,"Печать ВСД");				
		//СписокДействийВСД.ДобавитьЗначение("ПоказатьУсловияПеревозки","Показать условия Перевозки");
		СписокДействийВСД.ДобавитьЗначение("ПогаситьВСД","Погасить ВСД");
		СписокДействийВСД.ДобавитьЗначение(СписокОтладка,"Отладка");				
		
		Если Сервис.ВыбратьЗначение(СписокДействийВСД,Зн,,0,) <> 1 Тогда
			Возврат "";
		КонецЕсли;
		
	Исключение	
		
		Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) <> 1 Тогда
			Возврат "";
		КонецЕсли;
		
	КонецПопытки;

	Если Зн = "ОткрытьВсдВГис" Тогда
		
		ОткрытьВсдВГис( Док );		
		
	ИначеЕсли Зн = "СписокВСД" Тогда
		
		ОткрытьСписокВсд( Док );		
		
	ИначеЕсли Зн = "АннулироватьВСД" Тогда 
		
	   	ПараПараметров = СоздатьОбъект("СписокЗначений");
	   	ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ПараПараметров.Установить("Действие", "Аннулировать");		   		   
	   	ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");		
	   	
	ИначеЕсли Зн = "ОткрытьЗапрос" Тогда 
	   	
		ОткрытьЗапрос( Док );		
		
	ИначеЕсли Зн = "ОткрытьОтвет" Тогда 
		
		ОткрытьОтвет( Док );
		
	ИначеЕсли Зн = "Мультимодальная" Тогда 

		//КонтекстФормы.Форма.Закрыть(0);
		
		СписокПараметров = СоздатьОбъект("СписокЗначений");
		//СписокПараметров.Установить("Документ", Док);
		СписокПараметров.Установить("Документ", КонтекстФормы);
		ОткрытьФорму("Отчет", СписокПараметров, ПолучитьКонстанту("КаталогМодуля")+"Меркурий_МультимодальнаяПеревозка.ert");
		
	ИначеЕсли Зн = "ИзменитьНомерТранспорта" Тогда 
   			
		КонтФормы = "";
		ОткрытьФорму("Документ.ВСД2_ОбновитьТранспорт",КонтФормы, Док);
		
	ИначеЕсли Зн = "ПолучитьОтветВетис" Тогда 			
		
	   	ПараПараметров = СоздатьОбъект("СписокЗначений");
	   	ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ПараПараметров.Установить("Действие", "ПолучитьОтвет");		   		   
	   	ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");	
	   	
	ИначеЕсли Зн = "ОбновитьСтатусВСД" Тогда 	
	   	
	   	ПараПараметров = СоздатьОбъект("СписокЗначений");
	   	ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ПараПараметров.Установить("Действие", "ОбновитьСтатусВСД");		   		   
	   	ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");		
	   	
	ИначеЕсли Зн ="ПогаситьВСД"  Тогда
	   	
			ПогаситьВСД( Док );
			
	ИначеЕсли Зн = "ПечатьПолнойФормыВСД" Тогда
			
		ПечатьВСД( Док );
		
	ИначеЕсли Зн = "ПечатьПолнойФормыВСД_Тест" Тогда
		
		ПечатьВСД_Тест( Док );
		
	ИначеЕсли Зн = "ПечатьСокрФормыВСД" Тогда
		
		ПечатьСокрВСД( Док );

	ИначеЕсли Зн = "ОтправитьВСД" Тогда 
				
		ПараПараметров = СоздатьОбъект("СписокЗначений");
		ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");

	ИначеЕсли Зн = "УсловияПеревозки" Тогда 
		//Регионализация();			
	   	ПараПараметров = СоздатьОбъект("СписокЗначений");
	   	ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ПараПараметров.Установить("Действие", "УсловияПеревозки");		   		   
	   	ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");				
	
	КонецЕсли;
	
КонецФункции
 
Функция МенюВСД_ВСД2_ОбновитьТранспорт( Док, КонтекстФормы ) Экспорт

	//{Проверим на переопределение функции, Если переопределена вызовем из перекрывающего модуля
	ОбъектВыполнения = ПроверитьПереопределениеФункции("МенюВСД_ВСД2_ОбновитьТранспорт");
	Если ПустоеЗначение(ОбъектВыполнения)=0 Тогда
		Возврат ОбъектВыполнения.МенюВСД_ВСД2_ОбновитьТранспорт( Док );
	КонецЕсли;
	//}
	
	Зн = ""; стр=0;
	Попытка
		
		СписокДействийВСД = СоздатьОбъект("СписокЗначений");

		СписокОтладка = СоздатьОбъект("СписокЗначений");		
		СписокОтладка.ДобавитьЗначение("ОткрытьЗапрос","Открыть Запрос");
		СписокОтладка.ДобавитьЗначение("ОткрытьОтвет","Открыть Ответ");
		СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");			
		СписокДействийВСД.ДобавитьЗначение("ПолучитьОтветВетис","Получить ответ ВЕТИС");
		СписокДействийВСД.ДобавитьЗначение(СписокОтладка,"Отладка");				
		
		Если Сервис.ВыбратьЗначение(СписокДействийВСД,Зн,,0,) <> 1 Тогда
			Возврат "";
		КонецЕсли;
		
	Исключение	
		
		Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) <> 1 Тогда
			Возврат "";
		КонецЕсли;
		
	КонецПопытки;

	Если Зн = "ОткрытьЗапрос" Тогда 
	   	
		ОткрытьЗапрос( Док );		
		
	ИначеЕсли Зн = "ОткрытьОтвет" Тогда 
		
		ОткрытьОтвет( Док );
		
	ИначеЕсли Зн = "ПолучитьОтветВетис" Тогда 			
		
	   	ПараПараметров = СоздатьОбъект("СписокЗначений");
	   	ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ПараПараметров.Установить("Действие", "ПолучитьОтвет");		   		   
	   	ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");	
	   		

	ИначеЕсли Зн = "ОтправитьВСД" Тогда 
				
		ПараПараметров = СоздатьОбъект("СписокЗначений");
		ПараПараметров.Установить("КонтекстДокумента", КонтекстФормы);
		ОткрытьФорму("Отчет", ПараПараметров, ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");
				
	КонецЕсли;
	
	
КонецФункции

//} #########################  Меню ###############################

//{ Значения маркировки

Функция ИмяФайлаМаркировки(Док, ЭлементДиалога)
	
	Каталог = ГМ.ПолучитьКонстанту("КаталогМодуля")+"Marks\";
	Если ФС.СуществуетФайл(Каталог) = 0 Тогда
		Попытка
		    ФС.СоздатьКаталог(Каталог);
		Исключение
			Предупреждение("Не создан каталог Marks"); Возврат "";
		КонецПопытки;
	КонецЕсли;

	Если ТипЗначенияСтр(Док)="Документ" Тогда 
		Ответ = Каталог+""+СокрЛП(Док.НомерДок)+"_"+ЭлементДиалога+"_"+СтрЗаменить(Док.ДатаДок,".","")+".mrk";
	Иначе
		Ответ = Каталог+""+СокрЛП(Док.Код)+"_"+ЭлементДиалога+"_"+СтрЗаменить(Док.ДатаДок,".","")+".mrk";
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции
	
Процедура ЗаписатьЗначенияМаркировки(КонтДокумента, ЭлементДиалога, СтрМаркировка) Экспорт
	
	ИмяФайла = ИмяФайлаМаркировки(КонтДокумента, ЭлементДиалога);
	ЗначениеВФайл(ИмяФайла, СтрМаркировка);

КонецПроцедуры

Функция ПрочитатьЗначенияМаркировки(КонтДокумента, ЭлементДиалога) Экспорт
	
	СтрМаркировка="";
	ИмяФайла = ИмяФайлаМаркировки(КонтДокумента, ЭлементДиалога);
	ЗначениеИзФайла(ИмяФайла, СтрМаркировка);

	Возврат СтрМаркировка;
	
КонецФункции

//}

Версия = "Не определено";
ВерсияОписание = "https://redmine.kb99.pro/projects/vsd_1c/roadmap";

цвЗеленый = 14680031;	// Светло зеленый (12910532)
цвЖелтый = 8454143;	
цвКрасный = 8355834;// 13158653;// 13204735; //Розовый //255;
цвФиолетовый = 16744576;
цвСерый = "12632256";