Перем ПалитраЦветов Экспорт;
Перем ЭтоSQL Экспорт;
Перем Типизация Экспорт;
Перем Таблица Экспорт; 
Перем НоуЛок Экспорт;
Перем Разделитель Экспорт;
Перем ВиртТаблица Экспорт;
Перем КартинкаТабличногоПоля Экспорт;
Перем КартинкаКоманднойПанели Экспорт;
Перем ПараметрыНастройкиСписка Экспорт;
Перем ПараметрыВыводаСписка Экспорт;
Перем ПараметрыОтбораДанных Экспорт;
Перем ПараметрыПоискаЗначения Экспорт;

Перем МетаДата;

//Перем ИсторияОтборов Экспорт;

Перем ВидыСравнения;
Перем ПутьКФайлуНастройкиСписка, ПутьКФайлуВыводаСписка, ПутьКФайлуНастройкиОтбора;
Перем ПутьКФайлуНастройкиПериода, ПутьКФайлуВыбораГруппы, ПутьКФайлуПоискаЗначения;
Перем ПутьКФайлуДвиженияДокумента, ПутьКФайлуРедактированияСписка;
Перем ПутьКФайлуРедактированиеИнтервала, ПутьКФайлуВремяДокумента;
Перем СписокБыстрогоПоиска;

// КартинкаТабличногоПоля
// 0 - группа
// 1 - группа + пометка удаления
// 2 - элемент
// 3 - элемент + пометка удаления
// 4 - открытая группа
// 5 - открытая группа + пометка удаления
// 6 - документ
// 7 - документ + проведен
// 8 - документ + пометка удаления
// 9 - регистр приход
// 10 - регистр расход

// КартинкаКоманднойПанели
// 1 - добавить строку
// 2 - удалить строку
// 3 - копировать строку
// 4 - изменить строку
// 5 - настроить колонки
// 6 - обновить
// 7 - строку вверх
// 8 - строку вниз
// 9 - печать табличного поля
// 10 - сортировать по возрастанию
// 11 - сортировать по убыванию

//ЭлементОтбора//:ПоставщикДанных.ЭлементОтбора

Процедура Конструктор()
	МетаДата = СоздатьОбъект("MetaDataWork");
	
	ВидыСравнения = СоздатьОбъект("ПоставщикДанных.ВидыСравнения");
	
	ПалитраЦветов = СоздатьОбъект("ПоставщикДанных.ПалитраЦветов");
	
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	ЭтоSQL = МетаИнфо.ЭтоSQL_Версия();
	Типизация = ?(ЭтоSQL = 1,"$",":");
	Таблица = ?(ЭтоSQL = 1,"$","");
	НоуЛок = ?(ЭтоSQL = 1," (NOLOCK)","");
	Разделитель = ?(ЭтоSQL = 1,".","_");
	ВиртТаблица = ?(ЭтоSQL = 1,"#","_");
	
	КартинкаТабличногоПоля = СоздатьОбъект("Картинка");
	КартинкаКоманднойПанели = СоздатьОбъект("Картинка");
	ПутьКФайлуКласса = я().ПолучитьПуть();
	
	ИмяФайлаКласса = "ПоставщикДанных.Сервис.ert";
	
	ПутьКПиктограммеТП = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных1С.ТП.bmp");
	КартинкаТабличногоПоля.Загрузить(ПутьКПиктограммеТП);
	
	ПутьКПиктограммеКП = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных1С.ПУ.bmp");
	КартинкаКоманднойПанели.Загрузить(ПутьКПиктограммеКП);
	
	ПутьКФайлуНастройкиСписка = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.НастройкаТабличногоПоля.ert");
	ПутьКФайлуВыводаСписка = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.ПечатьТабличногоПоля.ert");
	ПутьКФайлуНастройкиОтбора = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.ОтборДанных.ert");
	ПутьКФайлуНастройкиПериода = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.ВводПериода.ert");
	ПутьКФайлуВыбораГруппы = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.ВыборГруппы.ert");
	ПутьКФайлуДвиженияДокумента = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.ДвиженияДокумента.ert");
	ПутьКФайлуРедактированияСписка = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.РедактированиеСписка.ert");
	ПутьКФайлуПоискаЗначения = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.ПоискЗначения.ert");
	ПутьКФайлуРедактированиеИнтервала = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.РедактированиеИнтервала.ert");
	ПутьКФайлуВремяДокумента = СтрЗаменить(ПутьКФайлуКласса,ИмяФайлаКласса,"ПоставщикДанных.ВремяДокумента.ert");
	
	Заголовки = СоздатьОбъект("АссоциативныйВектор");
	НеУчитываемые = СоздатьОбъект("АссоциативныйВектор");
	
	ПараметрыНастройкиСписка = СоздатьОбъект("АссоциативныйВектор");
	ПараметрыНастройкиСписка.Добавить("","ТабличноеПоле");
	ПараметрыНастройкиСписка.Добавить(Заголовки,"Заголовки");
	ПараметрыНастройкиСписка.Добавить(НеУчитываемые,"НеУчитываемые");
	
	ПараметрыВыводаСписка = СоздатьОбъект("АссоциативныйВектор");
	ПараметрыВыводаСписка.Добавить("","Контекст");
	ПараметрыВыводаСписка.Добавить("","ТабличноеПоле");
	ПараметрыВыводаСписка.Добавить(Заголовки,"Заголовки");
	ПараметрыВыводаСписка.Добавить(НеУчитываемые,"НеУчитываемые");
	
	ПараметрыОтбораДанных = СоздатьОбъект("АссоциативныйВектор");
	ПараметрыОтбораДанных.Добавить("","Отбор");
	ПараметрыОтбораДанных.Добавить("","СтруктураДанных");
	ПараметрыОтбораДанных.Добавить(0,"ДанныеИзменились");
	
	ПараметрыПоискаЗначения = СоздатьОбъект("АссоциативныйВектор");
	ПараметрыПоискаЗначения.Добавить("","СтруктураДанных"); // Коллекция "СтруктураДанных"
	ПараметрыПоискаЗначения.Добавить("","ТабличноеПоле"); // ПоставщикДанных.ТабличноеПоле
	ПараметрыПоискаЗначения.Добавить("","ТипПоставщикаДанных"); // Строка
	ПараметрыПоискаЗначения.Добавить("","ВидПоставщикаДанных"); // Строка
	ПараметрыПоискаЗначения.Добавить("","ЗначенияПоиска"); // Коллекция значений прошедшего поиска
	ПараметрыПоискаЗначения.Добавить("","ЗначениеБыстрогоПоиска"); // Значение для поиска
	ПараметрыПоискаЗначения.Добавить("","КолонкаБыстрогоПоиска"); // Имя колонки для поиска
	ПараметрыПоискаЗначения.Добавить("","ПрямойЗапрос"); // ПоставщикДанных.ПрямойЗапрос
	ПараметрыПоискаЗначения.Добавить("","ФормаЗакрыта"); // 1,0
	
	ИсторияОтборов = СоздатьОбъект("СписокЗначений");
	
	СписокБыстрогоПоиска = СоздатьОбъект("АссоциативныйВектор");
	СписокБыстрогоПоиска.Добавить(1,"СТРОКА");
	СписокБыстрогоПоиска.Добавить(2,"ЧИСЛО");
	СписокБыстрогоПоиска.Добавить(3,"ДАТА");
	СписокБыстрогоПоиска.Добавить(4,"СПРАВОЧНИК");
	СписокБыстрогоПоиска.Добавить(5,"ПЕРЕЧИСЛЕНИЕ");
	СписокБыстрогоПоиска.Добавить(6,"ВРЕМЯ");
	СписокБыстрогоПоиска.Добавить(7,"ВИДЫДОКУМЕНТОВ")
КонецПроцедуры

Процедура ПриЗаписи_ПалитраЦветов(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_ЭтоSQL(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_Типизация(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_Таблица(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_НоуЛок(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_Разделитель(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_ВиртТаблица(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_КартинкаТабличногоПоля(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_КартинкаКоманднойПанели(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_ПараметрыНастройкиСписка(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_ПараметрыВыводаСписка(Параметр)
	Возврат;
КонецПроцедуры

Процедура ПриЗаписи_ПараметрыОтбораДанных(Параметр)
	Возврат;
КонецПроцедуры

//Функция ПолучитьПредставлениеОтбора(Отбор) Экспорт
//	СтрокаПредставления = "";
//	//Отбор//:АссоциативныйВектор
//	//ВложенныйОтбор//:АссоциативныйВектор
//	Для НомерОтбора = 0 По Отбор.Количество()-1 Цикл
//		ВложенныйОтбор = Отбор.Получить(НомерОтбора);
//		Если ВложенныйОтбор.Использование = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Реквизит = ВложенныйОтбор.Идентификатор;
//		ВидСравнения = ВидыСравнения.ПолучитьПредставление(ВложенныйОтбор.ВидСравнения);
//		ПредставлениеСравнения = ?(Найти(ВидСравнения,">,<") > 0,СокрЛП(ВложенныйОтбор.ЗначениеС)+" - "+СокрЛП(ВложенныйОтбор.ЗначениеПо),СокрЛП(ВложенныйОтбор.Значение));
//		
//		СтрокаПредставления = СтрокаПредставления + СокрЛП(Реквизит) + " " + СокрЛП(ВидСравнения) + " " + СокрЛП(ПредставлениеСравнения) + "; ";
//	КонецЦикла;
//	Возврат СтрокаПредставления;
//КонецФункции

//Процедура ДобавитьВИсториюОтборов(Отбор) Экспорт
//	Представление = ПолучитьПредставлениеОтбора(Отбор);
//	Если ПустоеЗначение(Представление) = 1 Тогда
//		Возврат;
//	КонецЕсли;
//	ИсторияОтборов.Установить(Представление,Отбор);
//	Если ИсторияОтборов.РазмерСписка() > 6 Тогда
//		ИсторияОтборов.УдалитьЗначение(ИсторияОтборов.ПолучитьЗначение(7));
//	КонецЕсли;
//КонецПроцедуры

Функция ПолучитьВекторОтбора(Идентификатор) Экспорт
	НастройкаОтбора = СоздатьОбъект("ПоставщикДанных.ЭлементОтбора");
	НастройкаОтбора.Вид = -1;
	НастройкаОтбора.Идентификатор = Идентификатор;
	НастройкаОтбора.ПолеДанных = Идентификатор;
	
	//НастройкаОтбора = СоздатьОбъект("АссоциативныйВектор");
	//НастройкаОтбора.Добавить(Идентификатор,"Идентификатор");
	//НастройкаОтбора.Добавить(РеквизитЗапроса,"РеквизитЗапроса");
	//НастройкаОтбора.Добавить(0,"Использование");
	//НастройкаОтбора.Добавить("Равно","ВидСравнения");
	//НастройкаОтбора.Добавить("","Значение");
	//НастройкаОтбора.Добавить("","ЗначениеС");
	//НастройкаОтбора.Добавить("","ЗначениеПо");
	//НастройкаОтбора.Добавить(1,"ИзменятьИспользование");
	//НастройкаОтбора.Добавить("","ВидыДляВыбора");
	//НастройкаОтбора.Добавить(1,"Видимость");
	Возврат НастройкаОтбора;
КонецФункции

Функция ПолучитьВекторРеквизита(Идентификатор) Экспорт
	ДанныеРеквизита = СоздатьОбъект("АссоциативныйВектор");
	ДанныеРеквизита.Добавить(Идентификатор,"Идентификатор");
	ДанныеРеквизита.Добавить("","ВидыДляВыбора");
	ДанныеРеквизита.Добавить("","Владелец");
	ДанныеРеквизита.Добавить("","Родитель");
	ДанныеРеквизита.Добавить(0,"ВыборГруппы");
	ДанныеРеквизита.Добавить(1,"ПоискЗначения");
	Возврат ДанныеРеквизита;
КонецФункции

Функция ПодключитьТаблицу(ТипДанных,ВидДанных = "",ПредставлениеТаблицы) Экспорт
	СистемнаяТаблица = 0;
	ВидДляПреобразования = ВидДанных;
	
	ТипДанных = СокрЛП(ТипДанных); 
	
	Если Лев(ТипДанных,3) = "_1S" Тогда
		СистемнаяТаблица = 1;
		ТипДанных = ?(ЭтоSQL = 1,"","_")+Лев(ТипДанных,3)+?(ЭтоSQL = 1,"","_")+Сред(ТипДанных,4);
	КонецЕсли;
	
	Если (ЭтоSQL = 0) и (ТипДанных = "__1S_JOURN") Тогда
		ТипДанных = "Журнал";
	КонецЕсли;
	
	ВидДляПреобразования = СокрЛП(ВидДляПреобразования); 
	Если (ЭтоSQL = 0) и (ПустоеЗначение(ВидДляПреобразования) = 0) Тогда
		ВидДляПреобразования = СтрЗаменить(ВидДляПреобразования,"_","__");
	КонецЕсли;
	ВидТаблицы = ?(ПустоеЗначение(ВидДляПреобразования) = 1,"",Разделитель+СокрЛП(ВидДляПреобразования));
	
	ПредставлениеТаблицы = СокрЛП(ПредставлениеТаблицы);
	
	ТекстПодключения = ?(СистемнаяТаблица = 1,"",Таблица)+ТипДанных+ВидТаблицы+" AS "+ПредставлениеТаблицы+НоуЛок;
	Возврат ТекстПодключения;
КонецФункции

//{ ============================================================ МЕТОДЫ ДЛЯ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЙ
Функция ПреобразоватьСтрокуВСписокЗначений(СтроковоеЗначение) Экспорт
	СтрокаПреобразования = СтроковоеЗначение;
	Если Найти(СтрокаПреобразования,",") > 0 Тогда
		Разделитель = ",";
	ИначеЕсли Найти(СтрокаПреобразования,";") > 0 Тогда
		Разделитель = ";";
	Иначе
		Разделитель = ",";
	КонецЕсли;
	
	СтроковоеЗначениеПодготовленное = """" + СтрЗаменить(СтроковоеЗначение,Разделитель,""",""") + """";
	СписокЗначений = СоздатьОбъект("СписокЗначений");
	СписокЗначений.ИзСтрокиСРазделителями(СтроковоеЗначениеПодготовленное);
	Возврат СписокЗначений;
КонецФункции	// ПреобразоватьСтрокуВСписокЗначений

Функция ПреобразоватьСписокЗначенийВАссоциативныйВектор(СписокЗначений) Экспорт
	АссоциативныйВектор = СоздатьОбъект("АссоциативныйВектор");
	Для НомерЗначения = 1 По СписокЗначений.РазмерСписка() Цикл
		Стр = ""; Значение = СписокЗначений.ПолучитьЗначение(НомерЗначения,Стр);
		Стр = ?(ПустоеЗначение(Стр) = 1,Значение,Стр);
		АссоциативныйВектор.Добавить(Значение,Стр);
	КонецЦикла;
	Возврат АссоциативныйВектор;
КонецФункции	// ПреобразоватьСписокЗначенийВАссоциативныйВектор

Функция ПреобразоватьСтрокуВАссоциативныйВектор(СтроковоеЗначение) Экспорт
	СписокЗначений = ПреобразоватьСтрокуВСписокЗначений(СтроковоеЗначение);
	АссоциативныйВектор = ПреобразоватьСписокЗначенийВАссоциативныйВектор(СписокЗначений);
	
	Возврат АссоциативныйВектор;
КонецФункции	// ПреобразоватьСтрокуВАссоциативныйВектор
//}

Функция ПолучитьИмяМетода(Идентификатор,ИмяМетода) Экспорт
	Возврат СокрЛП(Идентификатор) + СокрЛП(ИмяМетода);
КонецФункции

Функция ПолучитьСтильРеквизитаПоТипу(Тип) Экспорт
	// 0x00000004 - пропускать при вводе
	// 0x00000008 - быстрый выбор
	// 0x00000010 - описание в качестве подсказки
	// 0x00000200 - автовыбор отключен
	// 0x00100000 - автовыбор отключен
	Если Врег(Тип) = "СТРОКА" Тогда
		Возврат "0x00000008";
	Иначе
		Возврат "0x00000020";
	КонецЕсли;
КонецФункции	// ПолучитьСтильРеквизитаПоТипу

Функция ПолучитьЗаголовокКолонки(МетаРеквизит) Экспорт
	Если ПустоеЗначение(МетаРеквизит.Синоним) = 1 Тогда
		Возврат СокрЛП(МетаРеквизит.Идентификатор);
	Иначе
		Возврат СокрЛП(МетаРеквизит.Синоним);
	КонецЕсли;
КонецФункции

Функция ПолучитьДлинуЗначения(МетаРеквизит) Экспорт
	Если (МетаРеквизит.Тип = "Строка") или (МетаРеквизит.Тип = "Число") Тогда
		Длина = МетаРеквизит.Длина;
	ИначеЕсли (МетаРеквизит.Тип = "Справочник") или (МетаРеквизит.Тип = "Документ") или (МетаРеквизит.Тип = "Счет") Тогда
		Если ПустоеЗначение(МетаРеквизит.Вид) = 1 Тогда
			Длина = 13;
		Иначе
			Длина = 9;
		КонецЕсли;
	ИначеЕсли МетаРеквизит.Тип = "Неопределенный" Тогда
		Длина = 23;
	Иначе
		Длина = 9;
	КонецЕсли;
	Возврат Длина;	
КонецФункции

Функция ПолучитьТипизациюЗначения(МетаРеквизит) Экспорт
	ТипВид = МетаРеквизит.Тип + ?(ПустоеЗначение(МетаРеквизит.Вид) = 1,"",".") + МетаРеквизит.Вид;
	Если ЭтоSQL = 1 Тогда
		Возврат " $"+ТипВид;
	ИначеЕсли ЭтоSQL = 0 Тогда
		Возврат " :"+ТипВид+?(ТипВид = "Число","."+СокрЛП(МетаРеквизит.Длина)+"."+СокрЛП(МетаРеквизит.Точность),"");
	КонецЕсли;
КонецФункции

Функция ПолучитьМодификаторЗначения(Тип,Вид) Экспорт
	Если Врег(Тип) = "НЕОПРЕДЕЛЕННЫЙ" Тогда
		Возврат "*";
	ИначеЕсли Врег(Тип) = "ЧИСЛО" Тогда
		Возврат "";
	ИначеЕсли Врег(Тип) = "СТРОКА" Тогда
		Возврат "";
	ИначеЕсли Врег(Тип) = "ДАТА" Тогда
		Возврат "";
	ИначеЕсли Врег(Тип) = "ВРЕМЯ" Тогда
		Возврат "";
	ИначеЕсли ПустоеЗначение(Вид) = 1 Тогда
		Возврат "~";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция РазобратьТипизациюЗначения(Типизация) Экспорт
	ВекторТипизации = СоздатьОбъект("АссоциативныйВектор");
	ВекторТипизации.Добавить("","ТипВид");
	ВекторТипизации.Добавить("","Тип");
	ВекторТипизации.Добавить("","Вид");
	ВекторТипизации.Добавить("","Длина");
	ВекторТипизации.Добавить("","Точность");
	Если ТипЗначения(Типизация) <> 2 Тогда
		Возврат ВекторТипизации;
	КонецЕсли;
	
	СписокЗначений = СоздатьОбъект("СписокЗначений");
	ПодготовленнаяТипизация = """" + СтрЗаменить(Типизация,".",""",""") + """";
	СписокЗначений.ИзСтрокиСРазделителями(ПодготовленнаяТипизация);
	Для Н = СписокЗначений.РазмерСписка() По 4 Цикл
		СписокЗначений.ДобавитьЗначение("");
	КонецЦикла;
	Тип      = Врег(СписокЗначений.ПолучитьЗначение(1));
	Вид      = СписокЗначений.ПолучитьЗначение(2);
	Длина    = СписокЗначений.ПолучитьЗначение(3);
	Точность = СписокЗначений.ПолучитьЗначение(4);
	
	Если Тип = "СТРОКА" Тогда
		ВекторТипизации.Установить("Тип"  ,"СТРОКА");
		ВекторТипизации.Установить("Длина",Вид);
	ИначеЕсли Тип = "ЧИСЛО" Тогда
		ВекторТипизации.Установить("Тип"     ,"ЧИСЛО");
		ВекторТипизации.Установить("Длина"   ,Вид);
		ВекторТипизации.Установить("Точность",Длина);
	Иначе
		ВекторТипизации.Установить("Тип"     ,Тип);
		ВекторТипизации.Установить("Вид"     ,Врег(Вид));
		ВекторТипизации.Установить("Длина"   ,Длина);
		ВекторТипизации.Установить("Точность",Точность);
	КонецЕсли;
	
	ВекторТипизации.Установить("ТипВид",ВекторТипизации.Тип + ?(ПустоеЗначение(ВекторТипизации.Вид) = 1,"",".") + ВекторТипизации.Вид);
	
	Возврат ВекторТипизации;
КонецФункции // РазобратьТипизациюЗначения

//{ ============================================================ МЕТОДЫ ДЛЯ ВЫПОЛНЕНИЯ НАСТРОЕК
Процедура ВыполнитьНастройкуСписка() Экспорт
	ОткрытьФормуМодально("Отчет",ПараметрыНастройкиСписка,ПутьКФайлуНастройкиСписка);
	ПараметрыНастройкиСписка.Заголовки.Очистить();
	ПараметрыНастройкиСписка.НеУчитываемые.Очистить();
КонецПроцедуры

Процедура ВыполнитьПечатьСписка() Экспорт
	ОткрытьФормуМодально("Отчет",ПараметрыВыводаСписка,ПутьКФайлуВыводаСписка);
	ПараметрыВыводаСписка.Заголовки.Очистить();
	ПараметрыВыводаСписка.НеУчитываемые.Очистить();
	ПараметрыВыводаСписка.Контекст = "";
КонецПроцедуры

Процедура ВыполнитьНастройкуОтбора() Экспорт
	ОткрытьФормуМодально("Отчет",ПараметрыОтбораДанных,ПутьКФайлуНастройкиОтбора);
КонецПроцедуры
//}

Функция ВыбратьГруппуСправочника(ДанныеСправочник) Экспорт
	Реквизит = ДанныеСправочник;
	ОткрытьФормуМодально("Отчет",Реквизит,ПутьКФайлуВыбораГруппы);
	Возврат Реквизит;
КонецФункции

Функция УказатьПериод(ДатаНачала,ДатаОкончания) Экспорт
	ДатаНачала = ?(ПустоеЗначение(ДатаНачала) = 1,Дата(0001,01,01),ДатаНачала);
	ДатаОкончания = ?(ПустоеЗначение(ДатаОкончания) = 1,Дата(0001,12,31),ДатаОкончания);
	СписокДат = СоздатьОбъект("СписокЗначений");
	СписокДат.ДобавитьЗначение(ДатаНачала,"ДатаНачала");
	СписокДат.ДобавитьЗначение(ДатаОкончания,"ДатаОкончания");
	ОткрытьФормуМодально("Отчет",СписокДат,ПутьКФайлуНастройкиПериода);
	ДатаНачала = СписокДат.ПолучитьЗначение(1);
	ДатаОкончания = СписокДат.ПолучитьЗначение(2);
КонецФункции

Функция УказатьВремяДокумента(ДатаДокумента,ВремяДокумента) Экспорт
	ПараметрыФормы = СоздатьОбъект("АссоциативныйВектор");
	ПараметрыФормы.Добавить(-1,"ВремяИзменено");
	ПараметрыФормы.Добавить(ДатаДокумента,"ДатаДокумента");
	ПараметрыФормы.Добавить(ВремяДокумента,"ВремяДокумента");
	ОткрытьФормуМодально("Отчет",ПараметрыФормы,ПутьКФайлуВремяДокумента);
	ВремяДокумента = ПараметрыФормы.ВремяДокумента;
	Возврат ПараметрыФормы.ВремяИзменено;
КонецФункции // УказатьВремяДокумента

Процедура ОткрытьФормуДвиженийДокумента(ТекущийДокумент,ПрямойЗапрос) Экспорт
	АссВектор = СоздатьОбъект("АссоциативныйВектор");
	АссВектор.Добавить(ТекущийДокумент,"ТекущийДокумент");
	АссВектор.Добавить(ПрямойЗапрос,"ПрямойЗапрос");
	ОткрытьФормуМодально("Отчет#",АссВектор,ПутьКФайлуДвиженияДокумента);
КонецПроцедуры	// ОткрытьФормуДвиженийДокумента

Функция РедактироватьСписокЗначений(ОписаниеТипов,СписокЗначений) Экспорт
	Параметры = СоздатьОбъект("АссоциативныйВектор");
	Параметры.Добавить(ОписаниеТипов,"ОписаниеТипов");
	Параметры.Добавить(СписокЗначений,"СписокЗначений");
	ОткрытьФормуМодально("Отчет#",Параметры,ПутьКФайлуРедактированияСписка);
	СписокЗначений = Параметры.СписокЗначений;
КонецФункции	// РедактироватьСписокЗначений

Функция ВыбратьЗначение(СписокЗначений,ПараметрыЦвета = "") Экспорт
	Параметры = СоздатьОбъект("СписокЗначений");
	Если ТипЗначенияСтр(ПараметрыЦвета) = "АссоциативныйВектор" Тогда
		Если ПараметрыЦвета.ЦветФонаВыделения > -1 Тогда
			Параметры.Установить("ЦветФонаВыделения",ПараметрыЦвета.ЦветФонаВыделения);
		КонецЕсли;
		Если ПараметрыЦвета.ЦветШрифтаВыделения > -1 Тогда
			Параметры.Установить("ЦветШрифтаВыделения",ПараметрыЦвета.ЦветШрифтаВыделения);
		КонецЕсли;
		Если ПараметрыЦвета.ЦветРамкиВыделения > -1 Тогда
			Параметры.Установить("ЦветРамкиВыделения",ПараметрыЦвета.ЦветРамкиВыделения);
		КонецЕсли;
		Если ПараметрыЦвета.ЦветФона > -1 Тогда
			Параметры.Установить("ЦветФона",ПараметрыЦвета.ЦветФона);
		КонецЕсли;
		Если ПараметрыЦвета.ЦветШрифта > -1 Тогда
			Параметры.Установить("ЦветШрифта",ПараметрыЦвета.ЦветШрифта);
		КонецЕсли;
	КонецЕсли;
	СервисFormEx = СоздатьОбъект("Сервис");
	ВыбранноеЗначение = 0;
	СервисFormEx.ВыбратьЗначение(СписокЗначений,ВыбранноеЗначение,"",0,3,,Параметры);
	Возврат ВыбранноеЗначение;
КонецФункции

Функция РедактироватьИнтервалЗначений(Тип,Длина,Точность,ЗначениеС,ЗначениеПо) Экспорт
	Если Врег(Тип) = "ДАТА" Тогда
		УказатьПериод(ЗначениеС,ЗначениеПо);
	ИначеЕсли Врег(Тип) = "ЧИСЛО" Тогда
		ФормаПараметр = СоздатьОбъект("АссоциативныйВектор");
		ФормаПараметр.Добавить("Число","Тип");
		ФормаПараметр.Добавить(Длина,"Длина");
		ФормаПараметр.Добавить(Точность,"Точность");
		ФормаПараметр.Добавить(ЗначениеС,"ЗначениеС");
		ФормаПараметр.Добавить(ЗначениеПо,"ЗначениеПо");
		ОткрытьФормуМодально("Отчет",ФормаПараметр,ПутьКФайлуРедактированиеИнтервала);
		ЗначениеС = ФормаПараметр.ЗначениеС;
		ЗначениеПо = ФормаПараметр.ЗначениеПо;
	ИначеЕсли Врег(Тип) = "ВРЕМЯ" Тогда
		ФормаПараметр = СоздатьОбъект("АссоциативныйВектор");
		ФормаПараметр.Добавить("Время","Тип");
		ФормаПараметр.Добавить(ЗначениеС,"ЗначениеС");
		ФормаПараметр.Добавить(ЗначениеПо,"ЗначениеПо");
		ОткрытьФормуМодально("Отчет",ФормаПараметр,ПутьКФайлуРедактированиеИнтервала);
		ЗначениеС = ФормаПараметр.ЗначениеС;
		ЗначениеПо = ФормаПараметр.ЗначениеПо;
	КонецЕсли;			
КонецФункции

Функция ОткрытьФормуНастройки(Отбор) Экспорт
	ПараметрыОтбораДанных = СоздатьОбъект("АссоциативныйВектор");
	ПараметрыОтбораДанных.Добавить(Отбор,"Отбор");
	ПараметрыОтбораДанных.Добавить(0,"ДанныеИзменились");
	ОткрытьФормуМодально("Отчет#",ПараметрыОтбораДанных,ПутьКФайлуНастройкиОтбора);
	Возврат ПараметрыОтбораДанных.ДанныеИзменились;
КонецФункции // ОткрытьФормуНастройки

//{ ============================================================ МЕТОДЫ ДЛЯ РАБОТЫ СО ЗНАЧЕНИЯМИ ВРЕМЕНИ
Функция ПолучитьTimeИзСтроки(СтрокаВремя) Экспорт
	СтрокаВремяПодготовленная = я().СформироватьСтрокуВремя(СтрокаВремя);
	Часы = Лев(СтрокаВремяПодготовленная,2);
	Минуты = Сред(СтрокаВремяПодготовленная,4,2);
	Секунды = Сред(СтрокаВремяПодготовленная,7,2);
	
	КоличествоСекунд = Число(Часы)*3600+Число(Минуты)*60+Число(Секунды);
	СтрКоличествоСекунд = _IdToStr(КоличествоСекунд*10000);
	Возврат СтрКоличествоСекунд;
КонецФункции // ПолучитьTimeИзСтроки

Функция СформироватьСтрокуВремя(СтрокаВремя) Экспорт
	Если Найти(СтрокаВремя,":") > 0 Тогда
		Часы = Прав("00"+СокрЛП(Лев(СтрокаВремя,2)),2);
		Минуты = Прав("00"+СокрЛП(Сред(СтрокаВремя,4,2)),2);
		Секунды = Прав("00"+СокрЛП(Сред(СтрокаВремя,7,2)),2);
	Иначе
		Часы = Прав("00"+СокрЛП(Лев(СтрокаВремя,2)),2);
		Минуты = Прав("00"+СокрЛП(Сред(СтрокаВремя,3,2)),2);
		Секунды = Прав("00"+СокрЛП(Сред(СтрокаВремя,5,2)),2);
	КонецЕсли;
	
	
	ЧислоЧасы = Число(Часы);
	ЧислоМинуты = Число(Минуты);
	ЧислоСекунды = Число(Секунды);
	
	Если ЧислоЧасы > 23 Тогда
		Часы = "00";
	ИначеЕсли ЧислоЧасы < 0 Тогда
		Часы = "00";
	ИначеЕсли ЧислоМинуты > 59 Тогда
		Минуты = "00";
	ИначеЕсли ЧислоМинуты < 0 Тогда
		Минуты = "00";
	ИначеЕсли ЧислоСекунды > 59 Тогда
		Секунды = "00";
	ИначеЕсли ЧислоСекунды < 0 Тогда
		Секунды = "00";
	КонецЕсли;
	
	Возврат Часы + ":" + Минуты + ":" + Секунды;
КонецФункции // СформироватьСтрокуВремя
//}

//{ ============================================================ МЕТОДЫ ДЛЯ РАБОТЫ С ЗАПРОСАМИ
Функция СформироватьТекстОтбора(ЭлементОтбора,ПрямойЗапрос,ЗаполнятьПустойВид = 0) Экспорт
	Если ЭлементОтбора.Использование = 0 Тогда
		Возврат "";
	КонецЕсли;
	Если ПустоеЗначение(ЭлементОтбора.ПолеНастройки.ПолеЗапроса) = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	ВидСравнения        = ЭлементОтбора.ВидСравнения;
	ЗначениеСравнения   = ЭлементОтбора.Значение;
	ЗначениеСравненияC  = ЭлементОтбора.ЗначениеС;
	ЗначениеСравненияПо = ЭлементОтбора.ЗначениеПо;
	РеквизитЗапроса     = ЭлементОтбора.ПолеНастройки.ПолеЗапроса;
	
	// проверим колонки ПометкаУдаления и ЭтоГруппа чтобы избавиться от CASE
	Если Найти(РеквизитЗапроса,"ПометкаУдаления") > 0 Тогда
		РеквизитЗапроса = СтрЗаменить(СтрЗаменить(РеквизитЗапроса,"ПометкаУдаления","ismark"),"$","");
		Если ВидСравнения = "НеРавно" Тогда
			ВидСравнения = "Равно";
			ЗначениеСравнения = ?(ЗначениеСравнения = 1,0,1);
		КонецЕсли;
		ЗначениеСравнения = ?(ЗначениеСравнения = 1,?(ЭтоSQL = 1,"1","*"),?(ЭтоSQL = 1,"0","_Пробел_"));
	ИначеЕсли Найти(РеквизитЗапроса,"ЭтоГруппа") > 0 Тогда
		РеквизитЗапроса = СтрЗаменить(СтрЗаменить(РеквизитЗапроса,"ЭтоГруппа","isfolder"),"$","");
		Если ВидСравнения = "НеРавно" Тогда
			ВидСравнения = "Равно";
			ЗначениеСравнения = ?(ЗначениеСравнения = 1,0,1);
		КонецЕсли;
		Если ЭлементОтбора.Тип <> "Счет" Тогда
			ЗначениеСравнения = ?(ЗначениеСравнения = 1,1,2);
		КонецЕсли;
	ИначеЕсли Найти(РеквизитЗапроса,"Активность") > 0 Тогда
		РеквизитЗапроса = СтрЗаменить(СтрЗаменить(РеквизитЗапроса,"Активность","active"),"$","");
		Если ВидСравнения = "НеРавно" Тогда
			ВидСравнения = "Равно";
			ЗначениеСравнения = ?(ЗначениеСравнения = 1,0,1);
		КонецЕсли;
		ЗначениеСравнения = ?(ЗначениеСравнения = 1,"_Пробел_","*");
	КонецЕсли;
	
	// проверка интервала с пустыми датами полученными из типовой формы настройки периода
	Если (ВидСравнения = "Интервал") и (ТипЗначенияСтр(ЗначениеСравненияC) = "Дата") Тогда
		Если (ЗначениеСравненияC = Дата(0001,1,1)) и (ЗначениеСравненияПо = Дата(0001,12,31)) Тогда
			Возврат "";
		ИначеЕсли ЗначениеСравненияC = Дата(0001,1,1) Тогда
			ВидСравнения = "МеньшеИлиРавно";
			ЗначениеСравнения = ЗначениеСравненияПо;
		ИначеЕсли ЗначениеСравненияПо = Дата(0001,12,31) Тогда
			ВидСравнения = "БольшеИлиРавно";
			ЗначениеСравнения = ЗначениеСравненияC;
		КонецЕсли;
	КонецЕсли;
	
	// проверка типа Время и конвертация строки в 36-ю строку
	Если ЭлементОтбора.Тип = "Время" Тогда
		ЗначениеСравнения   = я().ПолучитьTimeИзСтроки(ЗначениеСравнения);
		ЗначениеСравненияC  = я().ПолучитьTimeИзСтроки(ЗначениеСравненияC);
		ЗначениеСравненияПо = я().ПолучитьTimeИзСтроки(ЗначениеСравненияПо);
	КонецЕсли;
	
	СтрокаУсловия = "";
	СтрокаЗначения = "";
	Тип = ЭлементОтбора.Тип;
	Вид = ЭлементОтбора.Вид;
	
	Если (ПустоеЗначение(Вид) = 1) и (ЗаполнятьПустойВид = 1) Тогда
		Вид = "НеПустойВид";
	КонецЕсли;
	
	// подставим типизированные пустые значения
	Если ПустоеЗначение(ЗначениеСравнения) = 1 Тогда
		Если Тип = "Дата" Тогда
			ЗначениеСравнения = ?(ЭтоSQL = 1,МетаДата.ПолучитьСтрИзДаты(Дата(1753,1,1)),"        ");
		Иначе
			ЗначениеСравнения = ПолучитьПустоеЗначение(ЭлементОтбора.ТипВид);
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(ЗначениеСравненияC) = 1 Тогда
		Если Тип = "Дата" Тогда
			ЗначениеСравненияC = ?(ЭтоSQL = 1,МетаДата.ПолучитьСтрИзДаты(Дата(1753,1,1)),"        ");
		Иначе
			ЗначениеСравненияC = ПолучитьПустоеЗначение(ЭлементОтбора.ТипВид);
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(ЗначениеСравненияПо) = 1 Тогда
		Если Тип = "Дата" Тогда
			ЗначениеСравненияПо = ?(ЭтоSQL = 1,МетаДата.ПолучитьСтрИзДаты(Дата(1753,1,1)),"        ");
		Иначе
			ЗначениеСравненияПо = ПолучитьПустоеЗначение(ЭлементОтбора.ТипВид);
		КонецЕсли;
	КонецЕсли;
	
	// заменим _Пробел_ на пустой пробел
	Если ТипЗначенияСтр(ЗначениеСравнения) = "Строка" Тогда
		ЗначениеСравнения = СтрЗаменить(ЗначениеСравнения,"_Пробел_"," ");
	КонецЕсли;
	
	// проверка видов сравнения и формирование текста отбора
	Если ВидСравнения = "НачинаетсяС" Тогда
		СтрокаУсловия = "=";
		ЗначениеСравнения = СокрЛП(ЗначениеСравнения);
		Длина = СтрДлина(ЗначениеСравнения);
		СтрокаЗначения = РеквизитЗапроса + " >= '"+ЗначениеСравнения+"' collate_1C
		|	and СРЕД("+РеквизитЗапроса+",1,"+Длина+") = '"+ЗначениеСравнения+"' collate_1C";
	ИначеЕсли (ВидСравнения = "Содержит") или (ВидСравнения = "НеСодержит") Тогда
		СтрокаУсловия = ?(ВидСравнения = "Содержит","like","not like");
		ЗначениеСравнения = СокрЛП(ЗначениеСравнения);
		Длина = СтрДлина(ЗначениеСравнения);
		СтрокаЗначения = РеквизитЗапроса+" "+СтрокаУсловия+" '%"+ЗначениеСравнения+"%'";
	ИначеЕсли Лев(ВидСравнения,8) = "Интервал" Тогда
		Идентификатор = ЭлементОтбора.Имя;
		
		СтрокаЗначения = РеквизитЗапроса+" between :p_start_"+Идентификатор+"
		|	and :p_end_"+Идентификатор+?((ЭтоSQL = 1) и (ВидСравнения = "ИнтервалВключаяОкончание"),"~","");
		
		ПрямойЗапрос.УстановитьТекстовыйПараметр("p_start_"+Идентификатор,ЗначениеСравненияC);
		ПрямойЗапрос.УстановитьТекстовыйПараметр("p_end_"+Идентификатор,ЗначениеСравненияПо);
	ИначеЕсли (ВидСравнения = "ВСписке") или (ВидСравнения = "НеВСписке") Тогда
		СтрокаУсловия = ?(ВидСравнения = "ВСписке","in","not in");
		ИмяВиртТаблицы = "#f_" + ЭлементОтбора.Имя;
		Если ТипЗначенияСтр(ЗначениеСравнения) <> "СписокЗначений" Тогда
			ЗначениеСравнения = СоздатьОбъект("СписокЗначений");
		КонецЕсли;
		
		Модификатор = "mod="+?(ПустоеЗначение(ПолучитьМодификаторЗначения(Тип,Вид)) = 1,"0","1");
		ТаблицаЗначений = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаЗначений.НоваяКолонка("val",ЭлементОтбора.ТипВид,ЭлементОтбора.Длина,ЭлементОтбора.Точность,Модификатор);
		Для Номер = 1 По ЗначениеСравнения.РазмерСписка() Цикл
			ТаблицаЗначений.НоваяСтрока();
			ТаблицаЗначений.val = ЗначениеСравнения.ПолучитьЗначение(Номер);
		КонецЦикла;
		ТаблицаЗначений.Свернуть("val","");
		
		ПрямойЗапрос.СброситьТаблицу(ИмяВиртТаблицы);
		ПрямойЗапрос.УложитьТаблицуЗначений(ТаблицаЗначений,ИмяВиртТаблицы);
		ПрямойЗапрос.ВыполнитьЗапрос("create index idx_val_"+ЭлементОтбора.Имя+" on " + ИмяВиртТаблицы + "(val)");
		
		СтрокаЗначения = РеквизитЗапроса+" "+СтрокаУсловия+" (select val from "+ИмяВиртТаблицы+")";
	Иначе
		Если (ВидСравнения = "Равно") или (ВидСравнения = "НеРавно") Тогда
			СтрокаУсловия = ?(ВидСравнения = "Равно","=","<>");
		ИначеЕсли (ВидСравнения = "Меньше") или (ВидСравнения = "МеньшеИлиРавно") Тогда
			СтрокаУсловия = ?(ВидСравнения = "Меньше","<","<=");
		ИначеЕсли  (ВидСравнения = "Больше") или (ВидСравнения = "БольшеИлиРавно") Тогда
			СтрокаУсловия = ?(ВидСравнения = "Больше",">",">=");
		КонецЕсли;
		
		Если ТипЗначенияСтр(ЗначениеСравнения) = "Метаданные" Тогда
			СтрокаЗначения = РеквизитЗапроса + " " + СтрокаУсловия + " :ВидДокумента."+ЗначениеСравнения.Идентификатор;
		ИначеЕсли ТипЗначения(ЗначениеСравнения) = 2 Тогда // строка
			СтрокаЗначения = РеквизитЗапроса + " " + СтрокаУсловия + " '" + ЗначениеСравнения + "' collate_1C";
		ИначеЕсли ТипЗначенияСтр(ЗначениеСравнения) = "ПланСчетов" Тогда
			СтрокаЗначения = РеквизитЗапроса + " " + СтрокаУсловия + " :ПланСчетов."+ЗначениеСравнения.Идентификатор();
		ИначеЕсли ТипЗначенияСтр(ЗначениеСравнения) = "ВидСубконто" Тогда
			СтрокаЗначения = РеквизитЗапроса + " " + СтрокаУсловия + " :ВидСубконто."+ЗначениеСравнения.Идентификатор();
		Иначе
			СтрокаЗначения = РеквизитЗапроса + " " + СтрокаУсловия + " :pf_" + ЭлементОтбора.Имя + ПолучитьМодификаторЗначения(Тип,Вид);
			
			ПрямойЗапрос.УстановитьТекстовыйПараметр("pf_"+ЭлементОтбора.Имя,ЗначениеСравнения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаЗначения;
КонецФункции

Функция ПолучитьСтрокуСоединений(Отбор) Экспорт
	ПоляНастройки = Отбор.ПолучитьДоступныеПоля();
	
	ТаблицаСоединений = СоздатьОбъект("ИндексированнаяТаблица");
	ТаблицаСоединений.НоваяКолонка("ТекстСоединений");
	КоличествоОтборов = Отбор.Количество()-1;
	Для Индекс = 0 По КоличествоОтборов Цикл
		ЭлементОтбора = Отбор.Получить(Индекс);
		Если (ЭлементОтбора.Использование = 1) и (ПустоеЗначение(ЭлементОтбора.ПолеНастройки.Соединение) = 0) Тогда
			ТаблицаСоединений.НоваяСтрока();
			ТаблицаСоединений.ТекстСоединений = ЭлементОтбора.ПолеНастройки.Соединение;
		КонецЕсли;
	КонецЦикла;
	ТаблицаСоединений.Свернуть("ТекстСоединений","");
	СтрСоединения = "";
	ТаблицаСоединений.ВыбратьСтроки();
	Пока ТаблицаСоединений.ПолучитьСтроку() = 1 Цикл
		СтрСоединения = СтрСоединения + ТаблицаСоединений.ТекстСоединений + "
		|";
	КонецЦикла;
	Возврат СтрСоединения;
КонецФункции // ПолучитьСтрокуСоединений

Функция ПолучитьТекстЗапросаПоискаЗначения(РеквизитЗапроса,Тип,Вид,Значение,ПрямойЗапрос,КлючевоеСлово = "where",ТочныйПоиск = 0) Экспорт
	ТекстЗапроса = "";
	Если ТипЗначенияСтр(Значение) = "Строка" Тогда
		Значение = СокрЛП(Значение);
		Если ТочныйПоиск = 1 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|"+КлючевоеСлово+" "+РеквизитЗапроса+" = '"+Нрег(Значение)+"' collate_1C
			|";
		ИначеЕсли ТочныйПоиск = 2 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|"+КлючевоеСлово+" "+РеквизитЗапроса+" like '%"+Нрег(Значение)+"%'
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|"+КлючевоеСлово+" "+РеквизитЗапроса+" >= '"+Нрег(Значение)+"' collate_1C
			|	and СРЕД("+РеквизитЗапроса+",1,"+СтрДлина(Значение)+")  = '"+Нрег(Значение)+"' collate_1C
			|";
		КонецЕсли;
		КлючевоеСлово = "and";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|"+КлючевоеСлово+" " + РеквизитЗапроса + " = :p_quicksearch" + ПолучитьМодификаторЗначения(Тип,Вид) + "
		|";
		ПрямойЗапрос.УстановитьТекстовыйПараметр("p_quicksearch",Значение);
		КлючевоеСлово = "and";
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаПоискаЗначения

Процедура ОбработкаБыстрогоПоиска() Экспорт
	ПараметрыПоискаЗначения.ФормаЗакрыта = 0;
	ОткрытьФормуМодально("Отчет#",ПараметрыПоискаЗначения,ПутьКФайлуПоискаЗначения);
	ЗначениеБыстрогоПоиска = ПараметрыПоискаЗначения.ЗначениеБыстрогоПоиска;
КонецПроцедуры	// ОбработкаБыстрогоПоиска

Функция ЭтоПолеБыстрогоПоиска(Тип) Экспорт
	Если СписокБыстрогоПоиска.НайтиКлюч(Врег(Тип),0) = -1 Тогда
		Возврат 0;
	Иначе
		Возврат СписокБыстрогоПоиска.Получить(Врег(Тип));
	КонецЕсли;
КонецФункции // ЭтоПолеБыстрогоПоиска

Функция ПолучитьТекстЗапросаБыстрогоПоиска(РеквизитЗапроса,Значение,Тип,Длина,КлючевоеСлово = "where") Экспорт
	ВрегТип = Врег(Тип);
	ТекстЗапроса = "";
	Если ВрегТип = "СТРОКА" Тогда
		Если Длина = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|"+КлючевоеСлово+" СРЕД("+РеквизитЗапроса+",1,"+СтрДлина(Значение)+") = '"+Значение+"' collate_1C
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|"+КлючевоеСлово+" "+РеквизитЗапроса+" >= '"+Значение+"' collate_1C
			|	and СРЕД("+РеквизитЗапроса+",1,"+СтрДлина(Значение)+") = '"+Значение+"' collate_1C
			|";
		КонецЕсли;
		КлючевоеСлово = "and";
	ИначеЕсли ВрегТип = "ЧИСЛО" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|"+КлючевоеСлово+" "+РеквизитЗапроса+" = "+Значение+"
		|";
		КлючевоеСлово = "and";
	ИначеЕсли ВрегТип = "ДАТА" Тогда
		Значение = СтрЗаменить(СокрЛП(Значение),".","");
		Значение = Лев(Значение+"        ",8);
		ДлинаДаты = СтрДлина(СокрЛП(Значение));
		ГГГГ = Прав(Значение,4);
		ММ = Сред(Значение,3,2);
		ДД = Лев(Значение,2);
		Значение = СокрЛП(ГГГГ+ММ+ДД);
		Если ДлинаДаты = 8 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|"+КлючевоеСлово+" "+РеквизитЗапроса+" = '"+Значение+"'
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|"+КлючевоеСлово+" substr"+?(ЭтоSQL = 1,"ing","")+"("+РеквизитЗапроса+","+(8-ДлинаДаты+1)+","+ДлинаДаты+") = '"+Значение+"'
			|";
		КонецЕсли;
		КлючевоеСлово = "and";
	ИначеЕсли ВрегТип = "ВРЕМЯ" Тогда
		ЗначениеВремя = СформироватьСтрокуВремя(Значение);
		НачЗначениеВремя36 = ПолучитьTimeИзСтроки(Значение);
		КонЗначениеВремя36 = ПолучитьTimeИзСтроки(Лев(ЗначениеВремя,2)+":59:59");
		ТекстЗапроса = ТекстЗапроса + "
		|"+КлючевоеСлово+" "+РеквизитЗапроса+" between '" + НачЗначениеВремя36 + "' and '" + КонЗначениеВремя36 + "'
		|";
		КлючевоеСлово = "and";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|"+КлючевоеСлово+" "+РеквизитЗапроса+" >= '"+Нрег(Значение)+"' collate_1C
		|	and СРЕД("+РеквизитЗапроса+",1,"+СтрДлина(Значение)+") = '"+Нрег(Значение)+"' collate_1C
		|";
		КлючевоеСлово = "and";
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаПоиска

Функция ПолучитьРеквизитЗапросаБыстрогоПоиска(ТекстСоединения = "",ВложеннаяСтруктура,Реквизит) Экспорт
	Тип = ВложеннаяСтруктура.Тип;
	Вид = ВложеннаяСтруктура.Вид;
	РеквизитЗапроса = "";
	ЭтоАгрегатныйТип = ?((Тип = "Справочник") или (Тип = "Перечисление") или (Тип = "ВидыДокументов"),1,0);
		
	Если (ЭтоАгрегатныйТип = 1) и (Тип <> "ВидыДокументов") и (ПустоеЗначение(Вид) = 1) Тогда
		Если ПустоеЗначение(Реквизит) = 1 Тогда
			Сообщить("Для поиска по реквизитам с типом '"+Тип+"' и неопределенным видом нажмите кнопку Ctrl+F.","i");
			Возврат 0;
		ИначеЕсли ПустоеЗначение(Реквизит.ВидыДляВыбора) = 1 Тогда
			Сообщить("Для поиска по реквизитам с типом '"+Тип+"' и неопределенным видом нажмите кнопку Ctrl+F.","i");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоАгрегатныйТип = 1 Тогда
		Если (ПустоеЗначение(Вид) = 1) и (Тип <> "ВидыДокументов") Тогда
			ВекторВидыДляВыбора = ПреобразоватьСтрокуВАссоциативныйВектор(Реквизит.ВидыДляВыбора);
			РеквизитЗапроса = ?(ВекторВидыДляВыбора.Количество() = 1,"","coalesce(");
			
			Для НомерЗначения = 0 По ВекторВидыДляВыбора.Количество()-1 Цикл
				ИдентификаторВида = ВекторВидыДляВыбора.Получить(НомерЗначения);
				
				ПараметрВида = ?(Тип = "Перечисление","ВидПеречисления","ВидСправочника");
				ПредставлениеТаблицы = "vt_ext_temp_"+НомерЗначения;
				
				ТекстСоединения = ТекстСоединения + ?(НомерЗначения = 0,"",РазделительСтрок) + "left join "+Тип+"."+ИдентификаторВида+" as "+ПредставлениеТаблицы+?(Тип = "Перечисление","","$nolock") + "
				|	on substr"+?(ЭтоSQL = 1,"ing","")+"("+ВложеннаяСтруктура.РеквизитЗапроса+",5,9) = "+ПредставлениеТаблицы+".id
				|	and substr"+?(ЭтоSQL = 1,"ing","")+"("+ВложеннаяСтруктура.РеквизитЗапроса+",1,4) = :"+ПараметрВида+"."+ИдентификаторВида;
				
				РеквизитЗапроса = РеквизитЗапроса + ?(НомерЗначения = 0,"",",") + ПредставлениеТаблицы+"."+?(Тип = "Справочник","descr","Представление");
			КонецЦикла;
			
			РеквизитЗапроса = РеквизитЗапроса + ?(ВекторВидыДляВыбора.Количество() = 1,"",")");
		Иначе
			ТекстСоединения = "left join "+Тип+?(ПустоеЗначение(Вид) = 1,"",".")+Вид+" as vt_ext_temp "+?((Тип = "Перечисление") или (Тип = "ВидыДокументов"),"","$nolock") + "
			|	on "+ВложеннаяСтруктура.РеквизитЗапроса+" = vt_ext_temp.id" + ?(Тип = "ВидыДокументов","docdef","");
			РеквизитЗапроса = "vt_ext_temp." + ?(Тип = "Справочник","descr","Представление");
		КонецЕсли;
	Иначе
		ТекстСоединения = "";
		РеквизитЗапроса = ВложеннаяСтруктура.РеквизитЗапроса;
	КонецЕсли;
	Возврат РеквизитЗапроса;
КонецФункции // ПолучитьРеквизитЗапросаБыстрогоПоиска
//}
