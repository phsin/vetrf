Перем ВыбРеквизит; //для выбора площадки

Процедура  ПриИзмененииПлощадки()
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);
КонецПроцедуры

Процедура ПриИзмененииФирмы()
	Если Метаданные.Справочник("Фирмы").Выбран() = 1 Тогда
		ГМ.Инициализация(Контекст);
		ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	КонецЕсли;
КонецПроцедуры

//======= ФУНКЦИИ ИНТЕРФЕЙСА ==============



Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагПродолжения)

	Если (ЭлементДиалога = "ФайлОтвета") Тогда
		иф=""; ик="";
		ФС.ВыбратьФайл(0,иф,ик,"Выберите файл с ответом Меркурия:","(*.xml)|*.xml","xml",60);
		ФайлОтвета = ик+иф;
		ФлагПродолжения = 0;
	ИначеЕсли ( ЭлементДиалога = "ФайлНомераМашин" ) Тогда
		иф=""; ик="";
		ФС.ВыбратьФайл(0,иф,ик,"Выберите файл с ответом Меркурия:","(*.xml)|*.xml","xml",60);
		ФайлНомераМашин = ик+иф;
		ФлагПродолжения = 0;
	//ИначеЕсли ЭлементДиалога = "ВыбПлощадка" Тогда
	//	ВремЭлем = ВыбХС;
	//	ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
	//	ФлагПродолжения = 0;
	КонецЕсли;

КонецПроцедуры


 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)

 	Если ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД");
 	ИначеЕсли ЗначениеЗакладки="ВСД_2" Тогда
		Форма.ИспользоватьСлой("Основной,ВСД_версия_2");
 	ИначеЕсли ЗначениеЗакладки="УсловияПеревозки" Тогда
		Форма.ИспользоватьСлой("Основной,УсловияПеревозки");
 	ИначеЕсли ЗначениеЗакладки="Продукция" Тогда
		Форма.ИспользоватьСлой("Основной,Продукция");
	ИначеЕсли ЗначениеЗакладки="Справочники" Тогда
		Форма.ИспользоватьСлой("Основной, Справочники");
	ИначеЕсли ЗначениеЗакладки="ХозСубъекты" Тогда
		Форма.ИспользоватьСлой("Основной, ХозСубъекты");
	ИначеЕсли ЗначениеЗакладки="Площадки" Тогда
		Форма.ИспользоватьСлой("Основной, Площадки");
	ИначеЕсли ЗначениеЗакладки="Партии" Тогда
		Форма.ИспользоватьСлой("Основной, Партии");
	ИначеЕсли ЗначениеЗакладки="Параметры" Тогда
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда

		Отправитель_Площадка = Элемент;
		//Если ПустоеЗначение(GUID_ОтправительПлощадка)=1 Тогда
		//	GUID_ОтправительПлощадка = Элемент.GUID;
		//Иначе
		//	Если НЕ(СокрЛП(GUID_ОтправительПлощадка) = СокрЛП(Элемент.GUID)) Тогда
		//		Сообщить("Ошибка в GUID_ОтправительПлощадка, должно быть "+Элемент.GUID,"!");
		//	Иначе
		//		Сообщить("GUID_ОтправительПлощадка - правильно "+Элемент.Адрес,"i");
		//	КонецЕсли;
		//КонецЕсли;

		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	//ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
	//	ВыбПлощадка = Элемент;
	//	КонтФормы.Форма.Закрыть();
	КонецЕсли;
	ПриИзмененииПлощадки();
КонецПроцедуры

Процедура ОткрытьПлощадкиПоХС( ВыбХС)

		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);

		СписокОтбора = СоздатьОбъект("СписокЗначений");

		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;

		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Процедура Клик_условия()
	текСтр = тзУсловияПеревозки.ТекущаяСтрока();
	текКол = тзУсловияПеревозки.ТекущаяКолонка();

	Если текКол="Пометка" Тогда
		Пометка = тзУсловияПеревозки.ПолучитьЗначение(ТекСтр,"Пометка");
		Если Пометка = 2 Тогда
			тзУсловияПеревозки.Пометка=1;
		Иначе
			тзУсловияПеревозки.Пометка=2;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// {=========================== ХозСубъекты =================================

Процедура СинхронизацияСпрХС()

	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_ХозСубъект.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_ХозСубъект.Guid;
	|Группировка id;
	|Без Итогов;
	|";

	//Если обновитьВсеХозСубъекты=0 Тогда
  	//	ТекстЗапроса=ТекстЗапроса+"Условие (СокрЛП(GuidХозСубъекта) = '');";
  	//КонецЕсли;

	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);

	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");

	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	  	Если обновитьВсеХозСубъекты=0 Тогда
	  		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
	  			Продолжить;
	  		КонецЕсли;
	  	КонецЕсли;

		ГМ.ХС_ПолучитьGuid(тз.id);

		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ГМ.НайтиПлощадкиПоНазванию(тз.id, 0 );
			ГМ.ЗагрузитьПлощадки( тз.id );
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// }

//======================= Тестирование \ Проверка ==========================

//_____________________________________________________________________________
//ТЕСТ  ЖД читаем из файла ответа
Процедура ПрочестьХМЛ2(докСсылка)
	ГМ2.ЗагрузитьXML_ВСД2(Сокрлп(ФайлОтвета), докссылка)
КонецПроцедуры


Процедура ПрочестьПартииХМЛ2(докСсылка)
	ГМ2.ЗагрузитьXML_Партии2(Сокрлп(ФайлОтвета), докссылка)
КонецПроцедуры

//=========================================================================


Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла) Экспорт

	Возврат ГМ2.ЗагрузитьXML_ПеревозкаРазрешена_2( имяФайла );

КонецФункции

//Регионализация
//тест с формы Чтение ответа
Процедура ПрочестьХМЛРегион()
	//ГМ2.ЗагрузитьXML_ПеревозкаРазрешена_2(ФайлОтвета);
	тз = ЗагрузитьXML_ПеревозкаРазрешена_2(ФайлОтвета);
	тзУсловияПеревозки.Загрузить(тз);
	тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");
	тзУсловияПеревозки.ТекущаяСтрока(1);
КонецПроцедуры

Процедура Регионализация()
	ТзУсловияПеревозки.УдалитьСтроки();
	Рез = ГМ2.ПроверитьВозможностьПеремещения( ВСД_транзакция_2 );
	Если ТипЗначенияСтр(Рез) = "ТаблицаЗначений" Тогда
	    тзУсловияПеревозки.Загрузить(Рез);
		тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");
		тзУсловияПеревозки.ТекущаяСтрока(1);
	КонецЕсли;
//	ФайлОтвета = ГМ.Компонента.LogFilename;
//	ПрочестьХМЛРегион();
КонецПроцедуры

Процедура ПриВыбореВСДТранзакция()
	тзУсловияПеревозки.УдалитьСтроки();
КонецПроцедуры

//Регионализация Конец

// *** Классификатор Форм Упаковки
Процедура  ЗаполнитьФормыУпаковки()

	ГМ.ЗаполнитьФормыУпаковки();

КонецПроцедуры


// ========================================================================
Процедура ПриОткрытии()

    ГМ.Инициализация(Контекст);

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Партии");
	Форма.Закладки.ДобавитьЗначение("Справочники");
	Форма.Закладки.ДобавитьЗначение("Продукция");
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты");
	Форма.Закладки.ДобавитьЗначение("ВСД_2");
	Форма.Закладки.ДобавитьЗначение("УсловияПеревозки");
	
	Форма.Закладки.ДобавитьЗначение("Параметры");

	Форма.ИспользоватьСлой("Основной, Партии");

КонецПроцедуры

Функция МаршрутСледования_из_XML(Routelist) Экспорт
    // Упрощенная схема - выбраны Площадки, а не ручная запись адреса
	//ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
	ТЗточкиМаршрута = ГМ2.СоздатьТзМаршрутСледования();

	//Попытка
	    Для l1 = 0 По Routelist.length - 1 Цикл
			Узел = Routelist.item(l1);
			ТЗточкиМаршрута.НоваяСтрока();
            //Попытка ТЗточкиМаршрута.UUID					 = 		Узел.selectSingleNode("uuid").text; Исключение КонецПопытки;
            ТЗточкиМаршрута.НомерТочки	= Узел.selectSingleNode("sqnId").text;
			//Площадка_GUID = Узел.selectSingleNode("enterprise").selectSingleNode("GUID").text;
			Площадка_GUID = Узел.selectSingleNode("enterprise").selectSingleNode("GUIDtest").text;
			Попытка ТЗточкиМаршрута.ВыбПлощадка	= ГМ.НайтиПлощадку( Площадка_GUID ); Исключение КонецПопытки;
			//Попытка ТЗточкиМаршрута.ПредприятиеНаименование	 =  	Узел.selectSingleNode("vd:enterprise").selectSingleNode("dt:name").text; Исключение КонецПопытки;
            ТЗточкиМаршрута.Перегрузка	= ?(Узел.selectSingleNode("transshipment").text = "true",1,0);
            ТЗточкиМаршрута.ТипТранспорта			 = 		Число(Узел.selectSingleNode("nextTransport").selectSingleNode("transportType").text);

			Если ТЗточкиМаршрута.ТипТранспорта = 1 Тогда
				Попытка ТЗточкиМаршрута.номеравто 		= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("vehicleNumber").text; Исключение КонецПопытки;
				Попытка ТЗточкиМаршрута.номерПрицепа 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("trailerNumber").text; Исключение КонецПопытки;;
				Попытка ТЗточкиМаршрута.номерКонтейнера = Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("containerNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 2 Тогда
				Попытка ТЗточкиМаршрута.номерВагона 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("wagonNumber").text; Исключение КонецПопытки;
			Иначеесли ТЗточкиМаршрута.ТипТранспорта = 3 Тогда
				Попытка ТЗточкиМаршрута.НомерАвиарейса 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("flightNumber").text; Исключение КонецПопытки;
			Иначеесли (ТЗточкиМаршрута.ТипТранспорта = 4) или (ТЗточкиМаршрута.ТипТранспорта = 5) или (ТЗточкиМаршрута.ТипТранспорта = 6) Тогда
				Попытка ТЗточкиМаршрута.НазваниеСудна 	= Узел.selectSingleNode("nextTransport").selectSingleNode("transportNumber").selectSingleNode("shipName").text; Исключение КонецПопытки;
//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;

			КонецЕсли;
            ТЗточкиМаршрута.НомерТС = СокрЛП(ТЗточкиМаршрута.номеравто) + СокрЛП(ТЗточкиМаршрута.номерВагона) + СокрЛП(ТЗточкиМаршрута.НомерАвиарейса)+ СокрЛП(ТЗточкиМаршрута.НазваниеСудна);; //Что-то тут не так
		КонецЦикла;
	//Исключение КонецПопытки;

	ТЗточкиМаршрута.Сортировать("+НомерТочки");

	Если ТЗточкиМаршрута.КоличествоСтрок()>0 Тогда
	    Возврат (ТЗточкиМаршрута);
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

//<issueDate>2018-08-09T00:00:00</issueDate>
Функция ДатаСтрока( ДатаСтр )
	год = лев(ДатаСтр,4);
	мес = сред(ДатаСтр,6,2);
	дат = сред(ДатаСтр,9,2);

	Возврат Дата(год, мес, дат);

КонецФункции

Процедура ЗагрузитьНомераАвто( ИмяФайла )
    objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.load(ИмяФайла);
	//objDom.setProperty("SelectionNamespaces", "
	//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	//	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	//	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	//	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	//	|xmlns:default='http://www.w3.org/2001/XMLSchema'
	//	|" );

	List = objDom.selectSingleNode("waybills").selectNodes("waybill");
	Для i1 = 0 По List.length - 1 Цикл
        waybill=List.item(i1);
		НомерДок = waybill.selectSingleNode("issueNumber").text;
		ДатаДок = ДатаСтрока( waybill.selectSingleNode("issueDate").text );
		Сообщить("№ "+НомерДок+" от "+ДатаДок);
		МаршрутСледования = МаршрутСледования_из_XML( waybill.selectSingleNode("shipmentRoute").selectNodes("routePoint"));
		МаршрутСледования.ВыбратьСтроку();
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьНомерАвто()

	рез = ГМ.Компонента.GetAvtoNumber("123", ТекущаяДата());
	Сообщить("1"+рез);

	//рез = ГМ.Компонента.GetAvtoNumber( "",  );
	//Сообщить("2 "+рез);

КонецПроцедуры

Процедура ПолучитьСписокВСД()
	ТипДок = VetDocumentType.ПолучитьЗначение( VetDocumentType.ТекущаяСтрока() ); 
	СтатусДок = VetDocumentStatus.ПолучитьЗначение( VetDocumentStatus.ТекущаяСтрока() );  
	
	спУсловия= СоздатьОбъект("СписокЗначений");
	спУсловия.ДобавитьЗначение(ТипДок, "vetDocumentType" );
	спУсловия.ДобавитьЗначение(СтатусДок, "vetDocumentStatus" );
	спУсловия.ДобавитьЗначение(НачДата, "НачДата");
	спУсловия.ДобавитьЗначение(КонДата, "КонДата");
	спУсловия.ДобавитьЗначение(Смещение, "Смещение");
	спУсловия.ДобавитьЗначение(Отправитель_Площадка, "Площадка");
	
	ГМ2.ПолучитьСписокВСД(спУсловия);
	
	ГМ2.ЗагрузитьXML_ВСД2(ГМ.Компонента.LogFilenameResponse);
КонецПроцедуры

Процедура УдалитьПартии()
	
	СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
	НачатьТранзакцию(); // Ускоримся
		Попытка		
			СпрПартия.ВыбратьЭлементы();
			Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
				Если ( СпрПартия.ПометкаУдаления()= 0 ) И ( СпрПартия.Получатель_Площадка = Отправитель_Площадка ) Тогда			
					СпрПартия.Удалить(0);
					Сообщить("["+СпрПартия.Код+"] помечена на удаление ");
				КонецЕсли;
			КонецЦикла;
		Исключение
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();
		КонецПопытки;
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры

Процедура ЗагрузитьУлицы()
	Если ПустоеЗначение(Город)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Город, 0 );
	ИначеЕсли ПустоеЗначение(Район)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Район, 0 );
	ИначеЕсли ПустоеЗначение(Регион)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Регион, 0 );
	Иначе
		Сообщить("Выберите город");
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьПартии2()
	
	спПараметры = СоздатьОбъект("СписокЗначений");	
	спПараметры.Установить("Отправитель_Площадка", Отправитель_Площадка);
	спПараметры.Установить("Отправитель_ХозСубъект", Отправитель_ХозСубъект);
	спПараметры.Установить("Смещение", 0);
	спПараметры.Установить("УдалятьПартии", ГМ.ПолучитьКонстанту("ОчищатьСправочникВСД_Партии") );		
	спПараметры.Установить("ПартииНачало", дтПартииНачало);
	спПараметры.Установить("ПартииОкончание", дтПартииОкончание);
	
	ГМ2.ПолучитьПартии2( спПараметры );	
	
КонецПроцедуры

Процедура ОбновитьПлощадки()
	
	Спр = СоздатьОбъект("Справочник.ВСД_Площадка");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		ГМ2.Площадка_ЗагрузитьПоGUID( Спр.ТекущийЭлемент(), Спр.GUID);
	КонецЦикла;
	
КонецПроцедуры

//{========================= Список изменений =================

Процедура ПриНажатииЛевойКнопки(Сост, х, у)
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
	Если ТипЗначенияСтр(Атр) = "АтрибутФормы" Тогда
		Если Атр.Идентификатор = "Версия" Тогда
			ЗапуститьПриложение(ГМ.ВерсияСсылка());
		КонецЕсли;  
	КонецЕсли;	
	
КонецПроцедуры

//}===========================================================

НачДата = ТекущаяДата();
КонДата = НачДата;

productType = 1; //мясо

Попытка
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
Исключение
	Сообщить("Ошибка при загрузке 1cpp.dll");
	Сообщить(ОписаниеОшибки());
КонецПопытки;

тзУсловияПеревозки.НоваяКолонка("Пометка");
тзУсловияПеревозки.НоваяКолонка("ВидПродукции");
тзУсловияПеревозки.НоваяКолонка("Решение");
тзУсловияПеревозки.НоваяКолонка("Название");
тзУсловияПеревозки.НоваяКолонка("UUID");
тзУсловияПеревозки.НоваяКолонка("GUID");
тзУсловияПеревозки.ВыводитьПиктограммы("Пометка");


 //{ VetDocumentType
    //    TRANSPORT, = 1	= Транспортный ВСД.
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}

	VetDocumentType.ДобавитьЗначение("TRANSPORT", "Транспортный ВСД");
	VetDocumentType.ДобавитьЗначение("PRODUCTIVE", "Производственный ВСД");
	VetDocumentType.ДобавитьЗначение("RETURNABLE", "Возвратный ВСД");
	VetDocumentType.ДобавитьЗначение("INCOMING", "Входящий ВСД");
	VetDocumentType.ДобавитьЗначение("OUTGOING", "Исходящий ВСД");

    //{ VetDocumentStatus
    //
    //    /// <remarks/>
    //    CREATED, = 1
    //
    //    /// <remarks/>
    //    CONFIRMED, = 2
    //
    //    /// <remarks/>
    //    WITHDRAWN, = 3
    //
    //    /// <remarks/>
    //    UTILIZED, = 4
    //}

VetDocumentStatus.ДобавитьЗначение("CREATED", "Созданные / CREATED");
VetDocumentStatus.ДобавитьЗначение("CONFIRMED", "Подтвержденные / CONFIRMED");
VetDocumentStatus.ДобавитьЗначение("WITHDRAWN", "Аннулированные / WITHDRAWN");
VetDocumentStatus.ДобавитьЗначение("UTILIZED", "Погашенные / UTILIZED");