// Гашение (подтвердение о приеме) входящих партий с возможностью оформления возврата поставщику
// для Ветис 2.*
//
// ===============================================================
//Авторы: 
// Жуков Дмитрий zhukov@kb99.pro
// Синявский Филипп phsin@kb99.pro
//
//**********
// ЗАМЕЧАНИЯ:
// * по импортным ВСД -> Форма упаковки без ГУИД - не гасится
//
// Считывание работает в 2 прохода
// 1 - считывает данные ответа в ТЗ
// 2 - обрабатывает загруженную ТЗ - Создает докумены ВСД2_Входящий (или перезаписывает), находит/создает по ГУИДам справочники в 1С
// Возможен вариант оформления входящей партии без записи в 1с документа ВСД2_Входящий

Перем тзВСД;
Перем тпВСД; //Табличное Поле ВСД документов

Перем тзСоответствия;
Перем тпСоответствия; //Табличное Поле Соответвия Номенклатуры 

Перем ВыбФирма Экспорт;
Перем оПривязки; //:Меркурий.Привязки

Перем тзВСД_Исходная; //для сохранения ТЗ при фильтрации

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции


Процедура Фильтровать() Далее


//******************************************************************************
// Описание:
//  Получаем список номеров ТТН из загружаемых ВСД
//
// [+]serpent, 17.10.2019
Процедура НомерТТН_Выбрать()
	Перем ТТН;
	
	Если тзВСД_Исходная.КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;

	сзТТН = СоздатьОбъект("СписокЗначений");
	
	тзВСД_Исходная.ВыбратьСтроки();
	Пока тзВСД_Исходная.ПолучитьСтроку() = 1 Цикл
		ТТН = СокрЛП(тзВСД_Исходная.ДокВСД.ТТННомер);
		Если сзТТН.НайтиЗначение(ТТН) = 0 Тогда
			сзТТН.ДобавитьЗначение(ТТН);
		КонецЕсли;
	КонецЦикла;
	
	локСервис = СоздатьОбъект("Сервис");
	ПараметрыРаскраски = СоздатьОбъект("СписокЗначений");
	ПараметрыРаскраски.Установить("ЦветФонаВыделения",10092441); 
	ПараметрыРаскраски.Установить("ЦветШрифтаВыделения",6710886);
	ПараметрыРаскраски.Установить("ЦветРамкиВыделения",255);
	ПараметрыРаскраски.Установить("ЦветФона",10092543);
	ПараметрыРаскраски.Установить("ЦветШрифта",0);
	
	ТТН = "";
	Если локСервис.ВыбратьЗначение(сзТТН, ТТН,"Найденные значения",0,0,,ПараметрыРаскраски) <> 1 Тогда
		Возврат;
	КонецЕсли;

    НомерТТН = ТТН;
	Фильтровать();
КонецПроцедуры


Функция Фасовка_в_XML(док)
	ТекстЗапроса = "
	|             <dt:packaging>
	|               <dt:packagingType>
	|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
	|               </dt:packagingType>
	|               <dt:quantity>"+док.ФасовкаКоличество +"</dt:quantity>
	|               <dt:volume>"+ док.ФасовкаОбъем +"</dt:volume>
	|               <dt:unit>
	|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
	|               </dt:unit>
	|             </dt:packaging>";

	Возврат ТекстЗапроса;
КонецФункции

Функция ProductItem_в_XML(док,НаименованиеПродукции = "")
	ТекстЗапроса = "
	|                <vd:productItem>";

	Если ПустоеЗначение(док.Продукция_Элемент.GUID) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
		//|              <bs:uuid>"+ СокрЛП(док.Продукция_Элемент.UUID) +"</bs:uuid>";
	КонецЕсли;

	Если ПустоеЗначение(НаименованиеПродукции) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|              <dt:name>"+ ГМ2.ЗаменитьСпецСимволы( НаименованиеПродукции ) +"</dt:name>";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|              <dt:name>"+ ГМ2.ЗаменитьСпецСимволы( док.Продукция_Элемент.Наименование ) +"</dt:name>";
	КонецЕсли;

// сведения о фасовке
	Если ПустоеЗначение(док.ФасовкаФормаУпаковки) = 0  Тогда
		ТекстЗапроса = ТекстЗапроса + Фасовка_в_XML(док);
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|            </vd:productItem>";
	Возврат ТекстЗапроса;
КонецФункции

Функция НомераПартий_в_XML( Основание )
    ТекстЗапроса = "";
	Если ПустоеЗначение( Основание.НомерПартии ) = 0 Тогда
		сзНомерПартии = Основание.НомерПартии;
		Если типЗначенияСтр(сзНомерПартии) = "СписокЗначений" Тогда

			для к = 1 по сзНомерПартии.РазмерСписка() Цикл
				ТекстЗапроса = ТекстЗапроса + "
				|			<vd:batchID>"+СокрЛП(сзНомерПартии.ПолучитьЗначение(к))+"</vd:batchID>";
			КонецЦикла;

		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|			<vd:batchID>"+СокрЛП(Основание.НомерПартии)+"</vd:batchID>";
		КонецЕсли;

	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция Производители_в_XML( Основание )
	ТекстЗапроса = "";
    //ВремТЗ = ЗначениеИзСтроки(Док.ПроизводителиСписок);
	ВремТЗ = Основание.тзПроизводители;
	Если типЗначенияСтр(ВремТЗ) = "ТаблицаЗначений" Тогда
   		ВремТЗ.ВыбратьСтроки();
       	Пока ВремТЗ.ПолучитьСтроку() = 1 Цикл

			ТекстЗапроса = ТекстЗапроса + "
			|        		<vd:producer>
			|          			<dt:enterprise>";
			Если ПустоеЗначение(ВремТЗ.Площадка) = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|            			<bs:guid>"+ СокрЛП(ВремТЗ.Площадка.GUID) +"</bs:guid>";
			КонецЕсли;
			Если ПустоеЗначение(ВремТЗ.Имя) = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|            			<dt:name>"+ СокрЛП(ВремТЗ.Имя) +"</dt:name>";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|          			</dt:enterprise>
			|					<dt:role>"+ СокрЛП(ВремТЗ.Роль) +"</dt:role>
			|        		</vd:producer>";
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция УровниУпаковки_в_XML( Основание )
	ТекстЗапроса = ""; 
	тзУровни = Основание.тзУровниУпаковки;
		//Если ТипЗначения(док) = 12 Тогда
		//	стрУровни = "";
		//	ЗначениеИзФайла(док.ИмяФайлаУровниУпаковки, стрУровни );
		//	тзУровни = ЗначениеИзСтроки( стрУровни );
		//Иначе
		//	ТЗУровни = ЗначениеИзСтроки(док.УровниУпаковки); // это ТЗ на форме обработки
		//КонецЕсли;
		
	Если ТипЗначенияСтр(ТЗУровни) = "ТаблицаЗначений" Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|                <vd:packageList>";

		ТЗУровни.ВыбратьСтроки();
		Пока ТЗУровни.ПолучитьСтроку()=1 Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|                  <dt:package>
			|                    <dt:level>"+ТЗУровни.НомерУровня+"</dt:level>
			|                    <dt:packingType>";
			Если ПустоеЗначение(ТЗУровни.Упаковка.GUID) = 0 Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|                      <bs:guid>"+ СокрЛП(ТЗУровни.Упаковка.GUID) +"</bs:guid>";
//			Иначе //было только наименование - переделывать ПолучитьФормуУпаковки????
//				Запрос=Запрос+"
//				|                      <bs:name>"+ СокрЛП(ТЗУровни.Упаковка.Наименование) +"</bs:name>";
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+"
			|                    </dt:packingType>
			|                    <dt:quantity>"+ ТЗУровни.Колво +"</dt:quantity>";
			СзМарк = ЗначениеИзСтроки(ТЗУровни.Маркировки);
			Если ТипЗначенияСтр(СзМарк) = "СписокЗначений" Тогда
			    кк=0;
				Для кк=1 по СзМарк.РазмерСписка() Цикл
					стрМарк="";
					ЗнМарк = СзМарк.ПолучитьЗначение(кк,стрМарк);

					ТекстЗапроса=ТекстЗапроса+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+"
       		|                  </dt:package>";

		КонецЦикла;
		ТекстЗапроса=ТекстЗапроса+"
		|                </vd:packageList>";

	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция Транспорт_в_XML(Док)
	ТекстЗапроса = "";
	Если ПустоеЗначение(СокрЛП(док.ТипТС))=0 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|        <vd:transportInfo>
		|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
		|          <vd:transportNumber>";

		Если СокрЛП(Док.ТипТС) = "1" Тогда
				// Странный важный момент - контейнер д.б. первым !
			Если ПустоеЗначение(док.номерКонтейнера)=0 Тогда
		    	ТекстЗапроса = ТекстЗапроса+"
				|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
				|";
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса+"
			|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
			|";
			Если ПустоеЗначение(док.номерПолуприцепа)=0 Тогда
		    	ТекстЗапроса = ТекстЗапроса+"
				|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
				|";
			КонецЕсли;

		иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
		    ТекстЗапроса = ТекстЗапроса+"
			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
			|";
		иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
		    ТекстЗапроса = ТекстЗапроса+"
			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
			|";
		иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
		    ТекстЗапроса = ТекстЗапроса+"
			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
			|";

		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|          </vd:transportNumber>
		|        </vd:transportInfo>";
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции

Функция УсловияПеревозки_в_XML(Док)
	ТекстЗапроса = "";
	//тзУсловияПеревозки = ЗначениеВСтроку(Док.УсловияПеревозки);
	Попытка
		ИмяФайла = СокрЛП(док.ИмяФайлаРегионализация);
		Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда
			ТзУсловияПеревозки = ЗначениеИзФайла(ИмяФайла);
		КонецЕсли;
	Исключение	КонецПопытки;

	Если ТипЗначенияСтр(тзУсловияПеревозки) = "ТаблицаЗначений" Тогда
		тзУсловияПеревозки.ВыбратьСтроки();
		Пока тзУсловияПеревозки.ПолучитьСтроку() = 1 Цикл
//			Если ((тзУсловияПеревозки.Пометка = 2) и (тзУсловияПеревозки.ВидПродукции = док.ВидПродукции)) Тогда
				ТекстЗапроса = ТекстЗапроса+"
				|<vd:r13nClause>
				|<vd:condition>
				|<bs:guid>" + тзУсловияПеревозки.GUID + "</bs:guid>
				|</vd:condition>
				|</vd:r13nClause>
				|";
//			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция СвязанныеДокументы_в_XML( Основание )
	ТекстЗапроса = "";
	//СвязДок = ЗначениеИзСтроки(док.СвязанныеДокументы);
	СвязДок = Основание.тзСвязанныеДокументы;
	
	Если ТипЗначенияСтр(СвязДок) = "ТаблицаЗначений" Тогда
		СвязДок.ВыбратьСтроки();
		Пока Связдок.ПолучитьСтроку() = 1 Цикл
	        ТекстЗапроса = ТекстЗапроса+ "
	        |        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(Связдок.НомерДокумента)+"</vd:issueNumber>
	        |          <vd:issueDate>"+ Связдок.ДатаДокумента +"</vd:issueDate>
    	    |          <vd:type>"+Связдок.ТипДокумента+"</vd:type>
        	|          <vd:relationshipType>"+Связдок.ТипОтношенияДок+"</vd:relationshipType>
	        |        </vd:relatedDocument>";
		КонецЦикла;
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции

Процедура ПроставитьНоменклатуруВТЗ(ВыбТЗ)
	тз = СоздатьОбъект("ТаблицаЗначений");
    ВыбТЗ.Выгрузить(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		Попытка			
			тзН = ГМ.ПолучитьСписок_Номенклатура_По_ВСД_Продукция_Элемент( тз.ДокВСД.Продукция_Элемент );
		Исключение
			тзН = ГМ.ПолучитьСписок_Номенклатура_По_ВСД_Продукция_Элемент( тз.Продукция_Элемент ); // !!!!
		КонецПопытки;
		тзН.ВыбратьСтроки();
		Если  тзН.ПолучитьСтроку() = 1 Тогда 
			тз.Номенклатура = тзН.Номенклатура;
		КонецЕсли;
	КонецЦикла;

	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку()=1 Цикл	    
		
		Для А=1 По тз.КоличествоКолонок() Цикл						
			Попытка
				Имя = тз.ПолучитьПараметрыКолонки(А);
				зн  = тз.ДокВСД.ПолучитьАтрибут( Имя );
				Если ПустоеЗначение(зн)=0 Тогда 
					тз.УстановитьЗначение( тз.НомерСтроки, А, зн ); 
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;		
		
		Попытка тз.НомерПартии = тз.ВСД_ЭкземплярКласса.НомерПартии; Исключение КонецПопытки;
	КонецЦикла;	
	
	ВыбТЗ.Загрузить(тз);
	
	Попытка тпСоответствия.ОбновитьСтроки(); Исключение КонецПопытки;	
		
КонецПроцедуры

Процедура ЗаписатьСоответствия()
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	тзСоответствия.Выгрузить(тз);
	тз.ВыбратьСтроки();

	Пока тз.ПолучитьСтроку() = 1 Цикл
	    Если ПустоеЗначение(тз.Номенклатура) = 1 Тогда
	        Продолжить;
		КонецЕсли;
	
		ГМ.УстановитьСоответсвие_Номенклатура_Продукция_Элемент( тз.Номенклатура, тз.Продукция_Элемент );
	КонецЦикла;
	
	ПроставитьНоменклатуруВТЗ(тзВСД);
	ПроставитьНоменклатуруВТЗ(тзСоответствия)	
КонецПроцедуры

Функция НайтиНоменклатуруПоРеквизиту(ВыбРеквизит,ЗначениеРеквизита)
	результат = "";
	Если ТипЗначенияСтр(ЗначениеРеквизита) = "Строка" Тогда
		Если НРег(СокрЛП(ВыбРеквизит)) = "код" Тогда
			ВыбРеквизит = "CODE";
		ИначеЕсли НРег(СокрЛП(ВыбРеквизит)) = "наименование" Тогда
			ВыбРеквизит = "descr";
		КонецЕсли;
	КонецЕсли;

	Если ГМ.ЭтоSQL=1 Тогда
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();

		ТекстЗапроса = "select
		|	СпрНом.ID [id $Справочник.Номенклатура],
		|	$СпрНом."+СокрЛП(ВыбРеквизит)+"
		|from $Справочник.Номенклатура as СпрНом
		|where
		|	$СпрНом."+СокрЛП(ВыбРеквизит)+"=:ЗначРеквизита
		|";
		RS.УстановитьТекстовыйПараметр("ЗначРеквизита", ЗначениеРеквизита);
		//RS.Отладка(1);
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);

	Иначе
		Запрос = ГМ.базаДанных.НовыйЗапрос();

		ТекстЗапроса = "select
		|	СпрНом.ID [id $Справочник.Номенклатура],
		|	СпрНом."+СокрЛП(ВыбРеквизит)+"
		|from [Справочник.Номенклатура] as СпрНом
		|where
		|	СпрНом."+СокрЛП(ВыбРеквизит)+"=:ЗначРеквизита
		|";

		Запрос.Подставлять("ЗначРеквизита", ЗначениеРеквизита);

		//тз.Отладка();
		ТЗ = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
	КонецЕсли;

	Тз.ВыбратьСтроки();
	Если ТЗ.ПолучитьСТроку()=1 Тогда
		результат = тз.id;
	КонецЕсли;

	Возврат результат;
КонецФункции

Функция НайтиНоменклатуруПоРеквизитуЗапрос1С(ВыбРеквизит,ЗначениеРеквизита)
	результат = "";
	
	запрос = СоздатьОбъект("Запрос");
	Текст = "
	|Спр = Справочник.Номенклатура.ТекущийЭлемент;
	|Группировка Спр Без Групп;
	|Условие ( СокрЛП(Спр." + СокрЛП(ВыбРеквизит) + ") = ЗначениеРеквизита );
	|";

	Если запрос.Выполнить( Текст )=0 Тогда 
		Сообщить("Ошибка в запросе "+ОписаниеОшибки());
	Иначе
		Если запрос.Группировка(1)=1 Тогда 
			результат = Запрос.Спр;
		КонецЕсли;
	КонецЕсли;
	
	Возврат результат;
КонецФункции

Процедура ОбработкаПодбора(ВыбЭлемент)
	Если ВыбЭлемент.Вид() = "Номенклатура" Тогда
		Если Форма.АктивныйЭлемент() = "Соответствия" Тогда
			тзСоответствия.Номенклатура = ВыбЭлемент;
			ГМ.УстановитьСоответсвие_Номенклатура_Продукция_Элемент( тзСоответствия.Номенклатура, тзСоответствия.Продукция_Элемент );
			//РаскраситьСоответствия();			
			тпСоответствия.ОбновитьСтроки();
		Иначе
			тзВСД.Номенклатура = ВыбЭлемент;			
			ГМ.УстановитьСоответсвие_Номенклатура_Продукция_Элемент( тзВСД.Номенклатура, тзВСД.ДокВСД.Продукция_Элемент );
			тпВСД.ОбновитьСтроки();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры


//Процедура ЗаполнитьТЗпоСправочнику()
//	
//	СтатусНовый = Перечисление.ВСД_СтатусВСД.CONFIRMED;
//	
//	Запрос = СоздатьОбъект("Запрос");
//	
//	ТекстЗапроса = "
//	|спр = Справочник.ВСД_Док.ТекущийЭлемент;
//	|Площадка = Справочник.ВСД_Док.Получатель_Площадка;
//	|ХС = Справочник.ВСД_Док.Получатель_ХозСубъект;
//	|СтатусВСД = Справочник.ВСД_Док.СтатусВСД;
//	|Статус = Справочник.ВСД_Док.Статус;
//	|
//	|Условие ( Площадка = Отправитель_Площадка );
//	|Условие ( ХС = Отправитель_ХозСубъект );
//	|Условие ( СтатусВСД = СтатусНовый);
//	|Условие ( СокрЛП(Статус) <> 'COMPLETED');
//	|
//	|Группировка Спр Упорядочить ПО Спр.Код;
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|";
//	
//	Запрос.Выполнить(ТекстЗапроса);
//	
//	Пока Запрос.Группировка(1)=1 Цикл
//		ВСД_ЭкземплярКласса = СоздатьОбъект("ВСД_vetDocument");
//		тзВСД.НоваяСтрока();
//		тзВСД.докВСД = Запрос.Спр;
//		тзВСД.ВСД_ЭкземплярКласса = ВСД_ЭкземплярКласса.ЗаполнитьПоВСД( тзВСД.докВСД );
//	КонецЦикла;
//		
//	ПроставитьНоменклатуруВТЗ(тзВСД);
//
//	тзВСД_Исходная = СоздатьОбъект("ТаблицаЗначений");
//	тзВСД.Выгрузить(тзВСД_Исходная);	
//	
//	Попытка	тпВСД.ОбновитьСтроки(); Исключение КонецПопытки;
//	
//КонецПроцедуры


Процедура ЗаполнитьТЗпоСправочнику_ПрямойЗапрос()
	
	тзВСД.УдалитьСтроки();
	
	СтатусНовый = Перечисление.ВСД_СтатусВСД.CONFIRMED;
	
	Если ГМ.ЭтоSQL=1 Тогда
		RS = СоздатьОбъект("ODBCRecordset");
		RS.УстБД1С();

		ТекстЗапроса = "select
		|	$ВСД_Док.ID [id $Справочник.ВСД_Док]
		|
		|from $Справочник.ВСД_Док as ВСД_Док
		|where
		|	$ВСД_Док.Получатель_Площадка = :Площадка AND
		|	$ВСД_Док.Получатель_ХозСубъект = :Получатель_ХозСубъект AND
		|	$ВСД_Док.СтатусВСД = :СтатусВСД AND
		|	$ВСД_Док.Статус <> 'COMPLETED' AND
		|	$ВСД_Док.ISMARK = 0
		|";
		
		RS.УстановитьТекстовыйПараметр("Площадка", Отправитель_Площадка);
		RS.УстановитьТекстовыйПараметр("Получатель_ХозСубъект", Отправитель_ХозСубъект);
		RS.УстановитьТекстовыйПараметр("СтатусВСД", Перечисление.ВСД_СтатусВСД.CONFIRMED);
		Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда  
			RS.Отладка(1);
		КонецЕсли;			
		тз = RS.ВыполнитьИнструкцию(ТекстЗапроса);

	Иначе
		
		Запрос = ГМ.базаДанных.НовыйЗапрос();

		ТекстЗапроса = "select
		|	ВСД_Док.ID [id $Справочник.ВСД_Док],
		|	ВСД_Док.ISMARK
		|
		|from [Справочник.ВСД_Док] as ВСД_Док
		|where
		|	ВСД_Док.Получатель_Площадка = :Площадка AND
		|	ВСД_Док.Получатель_ХозСубъект = :Получатель_ХозСубъект AND
		|	ВСД_Док.СтатусВСД = :СтатусВСД AND
		|	ВСД_Док.Статус <> 'COMPLETED' 
		|	AND ВСД_Док.ISMARK = ''
		|";

		Запрос.Подставлять("Площадка", Отправитель_Площадка);
		Запрос.Подставлять("Получатель_ХозСубъект", Отправитель_ХозСубъект);
		Запрос.Подставлять("СтатусВСД", Перечисление.ВСД_СтатусВСД.CONFIRMED);

		Если ГМ.ПолучитьКонстанту("ВыводитьПодробнуюИнформацию")=1 Тогда 
			Запрос.Отладка(1);
		КонецЕсли;		
		тз = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
		//ТЗ.ВыбратьСтроку();
		
	КонецЕсли;
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку()=1 Цикл
	
		ВСД_ЭкземплярКласса = СоздатьОбъект("ВСД_vetDocument");
		тзВСД.НоваяСтрока();
		тзВСД.докВСД = тз.id;
		тзВСД.ВСД_ЭкземплярКласса = ВСД_ЭкземплярКласса.ЗаполнитьПоВСД( тзВСД.докВСД );
		
	КонецЦикла;
		
	ПроставитьНоменклатуруВТЗ(тзВСД);

	тзВСД_Исходная = СоздатьОбъект("ТаблицаЗначений");
	тзВСД.Выгрузить(тзВСД_Исходная);	
	
	Попытка	тпВСД.ОбновитьСтроки(); Исключение КонецПопытки;
	
КонецПроцедуры


//{ ************* Вкладка Соответствия ************************

Процедура ПроставитьСПоискомПоРеквизиту(ВыбТЗ,ВыбРеквизит,ИмяРекв = "Артикул", функцияПоиска="НайтиБыстро")
	тз = СоздатьОбъект("ТаблицаЗначений");
    ВыбТЗ.Выгрузить(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
	    Если ПустоеЗначение(тз.Продукция_Элемент) = 1 Тогда
	        Продолжить;
	    КонецЕсли;
	    Если ПустоеЗначение(тз.Номенклатура) = 0 Тогда
	        Продолжить;
		КонецЕсли;
		Если ИмяРекв = "Артикул" Тогда
		    	ВыбЗначение = СокрЛП(тз.Артикул);
			Иначе
		    	ВыбЗначение = СокрЛП(тз.GTIN);
		КонецЕсли;
		Если ПустоеЗначение(ВыбЗначение) = 1 Тогда
		    //Сообщить("Не указано значение "+ИмяРекв+" у "+тз.Продукция_Элемент+" ->Пропускаю");
			Продолжить;
		КонецЕсли;
		
		Если функцияПоиска = "НайтиБыстро" Тогда
			тз.Номенклатура = НайтиНоменклатуруПоРеквизиту(ВыбРеквизит,ВыбЗначение);
		Иначе
			тз.Номенклатура = НайтиНоменклатуруПоРеквизитуЗапрос1С(ВыбРеквизит,ВыбЗначение);
		КонецЕсли;
		
		Если ПустоеЗначение( тз.Номенклатура )=0 Тогда 
			Сообщить("Найдена номенклатура ["+тз.Номенклатура +"] по ["+ВыбРеквизит+"] ="+ВыбЗначение,"i");
		Иначе
			Сообщить("Номенклатура по ["+ВыбРеквизит+"] ="+ВыбЗначение+" не найдена","!");
		КонецЕсли;
	КонецЦикла;
	ВыбТЗ.Загрузить(тз);
	//РаскраситьСоответствия();
	тпСоответствия.ОбновитьСтроки();
КонецПроцедуры

Процедура НайтиПоШК()
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("НайтиБыстро","Найти быстро (прямой запрос)");
	Меню.ДобавитьЗначение("Найти1С","Найти по реквизиту (например Единица.Штрихкод)");
	
	зн="";
	Если Меню.ВыбратьЗначение(зн,,,,1)=1 Тогда 
		ПроставитьСПоискомПоРеквизиту(тзСоответствия,РеквизитШК,"ШК", зн);
	КонецЕсли;	
 	
КонецПроцедуры


Процедура ЗагрузитьТЗСоответствий(СзЭлементов)
	//Заполняет таблицу соответствий из полученного параметра - СЗ ВСД_Продукция_Элемент
	тзСоответствия.УдалитьСтроки();
	к = 0;
	Для к=1 по СзЭлементов.РазмерСписка() Цикл //тз.ПолучитьСтроку() = 1 Цикл
		тзСоответствия.НоваяСтрока();
		тзСоответствия.Продукция_Элемент =  СзЭлементов.ПолучитьЗначение(к);
		тзСоответствия.Артикул = тзСоответствия.Продукция_Элемент.Артикул;
		тзСоответствия.GTIN = тзСоответствия.Продукция_Элемент.GTIN;
	    тзСоответствия.Производитель = тзСоответствия.Продукция_Элемент.Площадка;
	КонецЦикла;
	тзСоответствия.Свернуть("Продукция_Элемент,Номенклатура,Артикул,GTIN,Производитель,сЦвет","");
	ПроставитьНоменклатуруВТЗ(тзСоответствия);
	//РаскраситьСоответствия();	
	тпСоответствия.ОбновитьСтроки();	
КонецПроцедуры

Процедура ЗагрузитьИзСправочника()
	Перем Запрос, ТекстЗапроса;
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса =
	"//{{ЗАПРОС(ПродЭлементыВсе)
	|Обрабатывать НеПомеченныеНаУдаление;
	|ТекущийЭлемент = Справочник.ВСД_Продукция_Элемент.ТекущийЭлемент;
	|Группировка ТекущийЭлемент упорядочить по ТекущийЭлемент.Наименование;
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
    времТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(времТЗ,,0);
	ВремСз = СоздатьОбъект("СписокЗначений");
	времТЗ.Выгрузить(ВремСз,,,"ТекущийЭлемент");
	ЗагрузитьТЗСоответствий(ВремСз);
КонецПроцедуры


Процедура СкопироватьИзтзВСД()
	ВремСз = СоздатьОбъект("СписокЗначений");
	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку() = 1 Цикл
		ВремСз.ДобавитьЗначение( тзВСД.ДокВСД.Продукция_Элемент );
	КонецЦикла;
	
	Если ВремСз.РазмерСписка()>0 Тогда
		Сообщить("Соответствия заполняем по списку партий");
		ЗагрузитьТЗСоответствий(ВремСз);
	Иначе
		Сообщить("Соответствия заполняем по справочнику ВСД_Продукция_Элемент");
		ЗагрузитьИзСправочника();
	КонецЕсли;
КонецПроцедуры

//}****************************************************************************

Процедура  ПриИзмененииПлощадки()
	
	//В противном случае партии запишутся на первую попавшуюся площадку
	// когда у ХС их несколько !!!!
	//Необходимо учесть этот момент во всех обработках
	тзВСД.УдалитьСтроки();
	Попытка
		тпВСД.ОбновитьСтроки(); //[+]serpent, 16.05.2019
	Исключение
	КонецПопытки;
	ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);
	
	//ЗаполнитьТЗпоСправочнику();
	ЗаполнитьТЗпоСправочнику_ПрямойЗапрос();
	
КонецПроцедуры


//******************************************************************************
Процедура ОтменитьВсеДокументы()
	
	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку() = 1 Цикл
		тзВСД.Пометка=0;
	КонецЦикла;

	тпВСД.ОбновитьСтроки();

КонецПроцедуры

Процедура ВыделитьВсеДокументы()
	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(тзВСД.ДокВСД.ВидПродукции)=0 Тогда
			тзВСД.Пометка=1;
		КонецЕсли;
	КонецЦикла;

	тпВСД.ОбновитьСтроки();	
//	ОбновитьИнф();
КонецПроцедуры


Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)	
	Если ЗначениеЗакладки="Соответствия" Тогда 
		СкопироватьИзтзВСД();
	КонецЕсли;
	Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(НомерЗакладки));	
КонецПроцедуры


Функция УстановитьНомерАвтоВМаршрут(МаршрутСледования)
	// Через АПИ не работает - нельзя указать №№ авто при гашении
	//Переработать под обработку МеркурийМультимодальнаяПеревозка
	Рез = "";
	Сп = ЗначениеИзСтроки(МаршрутСледования);
	зн="";
	Если Сп.ВыбратьСтроку(зн,"Маршрут") = 1 Тогда
//		Сп.ПолучитьСтрокуПоНомеру(зн);
//		ТекНомерАвто = Сп.НомерАвто;
//		если ввестиСтроку(ТекНомерАвто,"номер Авто",30) = 1 Тогда
//			Сп.НомерАвто = СокрЛП(ТекНомерАвто);
//			Возврат ЗначениеВСтроку(Сп);
//		КонецЕсли;
	КонецЕсли;
	Возврат Рез;
КонецФункции


//***************************

Процедура Фильтровать()

	тзВСД.УдалитьСтроки();

	тз = СоздатьОбъект("ТаблицаЗначений");
	тзВСД_Исходная.Выгрузить(тз);

	тз.ВыбратьСтроки();
	ТекСтрока =тз.КоличествоСтрок();
	Пока ТекСтрока >0 Цикл

		ТекПоставщик 	= тз.ПолучитьЗначение(ТекСтрока, "Отправитель_ХозСубъект");
		//ТтнНомер 		= тз.ПолучитьЗначение(ТекСтрока, "ТтнНомер");
		ДокВСД 		= тз.ПолучитьЗначение(ТекСтрока, "ДокВСД");
		ТтнНомер = ДокВСД.ТтнНомер;

		если ПустоеЗначение(ВыбПоставщик)=0 Тогда
			Если ТекПоставщик <> ВыбПоставщик Тогда
				Сообщить("пропущен по поставщику: "+ ДокВСД.uuid +" ["+ Лев( СокрЛП(ДокВСД.НаименованиеПродукции),100) + "]");
				тз.УдалитьСтроку(ТекСтрока);
			КонецЕсли;
		ИначеЕсли Найти( ТтнНомер, НомерТТН )=0 Тогда
			Сообщить("пропущен по № ТТН: "+ ДокВСД.uuid +" ["+ Лев( СокрЛП(ДокВСД.НаименованиеПродукции),100) + "]");
			тз.УдалитьСтроку(ТекСтрока);
		КонецЕсли;

		ТекСтрока=ТекСтрока-1;
	КонецЦикла;
	
	тзВСД.Загрузить(тз);
			
	ПроставитьНоменклатуруВТЗ(тзВСД); //[+]serpent, 16.05.2019

	Попытка тпВСД.ОбновитьСтроки(); Исключение КонецПопытки;
КонецПроцедуры


Функция ЗагрузитьXML_ВСД2(ВремИмяФайла, докОснование="")

	тз = ГМ2.ЗагрузитьXML_ВСД2(ВремИмяФайла, докОснование, 1 );

	тзВСД_Исходная = СоздатьОбъект("ТаблицаЗначений");
	тз.Выгрузить(тзВСД_Исходная);

	ПроставитьНоменклатуруВТЗ(тзВСД_Исходная);
	
	Фильтровать();

	Возврат "";

КонецФункции



Процедура ПриНачалеВыбораЗначения(Элемент, ФлагПродолжения)

	Если Элемент = "СтрИмяФайла" Тогда
		иф=""; ик="";
		ФС.ВыбратьФайл(0,иф,ик,"Выберите файл с ответом Меркурия:","(*.xml)|*.xml","xml",60);
		СтрИмяФайла = ик+иф;
	КонецЕсли;

	Если Элемент = "Отправитель_Площадка" Тогда
		//ЖД отфильтруем наши площадки
		ТекХС = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
		Если ПустоеЗначение(ТекХС) = 1 Тогда
			Возврат;
		КонецЕсли;

		тз = ГМ.ВыбратьВсеПлощадкиХС(ТекХС);
		СписокОтбора = СоздатьОбъект("СписокЗначений");

		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;
        ОткрытьФорму("Справочник.ВСД_Площадка", СписокОтбора);
        ФлагПродолжения = 0;
		Возврат;

	ИначеЕсли Элемент = "НомерТТН" Тогда
		НомерТТН_Выбрать();
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьДанные()
	Если ФС.СуществуетФайл(СтрИмяФайла) = 0 Тогда
	    Сообщить("Отсутствует файл ответа");
		Возврат;
	КонецЕсли;
	ЗагрузитьXML_ВСД2(СтримяФайла); //Грузим в ТЗ
	
	//Если _НеЗагружать = 0 Тогда
	//	СоздатьВСД2Входящие();
	//КонецЕсли;
	//ПроставитьНоменклатуруВТЗ(тзВСД); //[-]serpent, 16.05.2019
	//РаскраситьСписокДокументов();
КонецПроцедуры

// ВСД Входящий

Функция Проверка_ВСД2_Входящий(док, ВСД_ЭкземплярКласса)

	//стандартное поведение функции
	Результат = 1; //все в порядке

	Если ПустоеЗначение(док.Отправитель_ХозСубъект.GUID)=1 Тогда
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
// Импортный ВСД
//	Если ПустоеЗначение(док.Отправитель_Площадка.GUID)=1 Тогда
//		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников","!");
//		результат = 0;
//	КонецЕсли;
	Если ПустоеЗначение(док.Получатель_ХозСубъект.GUID)=1 Тогда
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;
// Импортный ВСД
//	Если ПустоеЗначение(док.Получатель_Площадка.GUID)=1 Тогда
//		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников","!");
//		результат = 0;
//	КонецЕсли;
	Если ПустоеЗначение(ВСД_ЭкземплярКласса.тзПроизводители)=1 Тогда
		Сообщить("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников","!");
		результат = 0;
	КонецЕсли;

	Если док.ВидВСД = 1 Тогда
		//бумажный
		Если ПустоеЗначение(док.ВсдНомер)=1 Тогда
			Сообщить("Не указан ВсдНомер ","!");
			результат = 0;
		КонецЕсли;
		Если ПустоеЗначение(док.ВсдДата)=1 Тогда
			Сообщить("Не указан ВсдДата ","!");
			результат = 0;
		КонецЕсли;
	Иначе
		//электронный
		Если ПустоеЗначение(док.UUID)=1 Тогда
			Сообщить("Не указан UUID ","!");
			результат = 0;
		КонецЕсли;

	КонецЕсли;

	Если ПустоеЗначение(док.ЕдиницаИзмерения)=1 Тогда
		Сообщить("Не указана ЕдиницаИзмерения ","!");
		результат = 0;
	КонецЕсли;

	Возврат результат;
КонецФункции

Функция ВСД2_ВходящийБумажныйГашение_ЗапросXML( док, ВСД_ЭкземплярКласса )
	Запрос = "
    |              <vd:issueSeries>"+СокрЛП(док.ВСДСерия)+"</vd:issueSeries>
    |              <vd:issueNumber>"+СокрЛП(док.ВСДномер)+"</vd:issueNumber>
    |              <vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ВсдДата) +"</vd:issueDate>
    |              <vd:vetDForm>"+СокрЛП(док.ФормаВСД)+"</vd:vetDForm>
    |              <vd:certifiedConsignment>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>";
	Если ПустоеЗначение(док.Отправитель_Площадка) = 0 Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
    ВремПолучатель_Площадка = ?(ПустоеЗначение(док.Получатель_Площадка) = 0,док.Получатель_Площадка,ГМ.СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
	Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>";


	Если ПустоеЗначение(СокрЛП(док.Перевозчик_ХозСубъект))=0 Тогда  //ЖД
			Запрос=Запрос+"
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ПустоеЗначение(СокрЛП(док.ТипТС))=0 Тогда  //ЖД
			Запрос=Запрос + Транспорт_в_XML(док);
		КонецЕсли;
	Если ПустоеЗначение(док.ТермическоеСостояние) = 0 Тогда
	Запрос=Запрос+"

	|              <vd:transportStorageType>"+ док.ТермическоеСостояние.Идентификатор() +"</vd:transportStorageType>";
	КонецЕсли;

	Запрос=Запрос+"
	|              <vd:batch>
	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>";
//	|                <vd:productItem>";

// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code>
    Запрос = Запрос + ProductItem_в_XML(док, док.НаименованиеПродукции);
	Запрос = Запрос + "
			|            <vd:volume>"+ Док.КоличествоПринять +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
    Запрос = Запрос + ГМ.Изготовление_СрокГодности_в_XML(док, "vd"); //даты
    Запрос = Запрос + НомераПартий_в_XML( ВСД_ЭкземплярКласса ); //даты

//			|           <vd:batchID>BN-875999954</vd:batchID>    Уникальный идентификатор производственной партии продукции.
		Запрос = Запрос + "
			|			<vd:perishable>"+ГМ.булево(док.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ СокрЛП( док.Страна_GUID) +"</bs:guid>
//			|              <bs:uuid>"+ СокрЛП( ГМ.СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
			|            </vd:country>";

        Запрос = Запрос + Производители_в_XML( ВСД_ЭкземплярКласса );


		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+ГМ.булево(док.некачественный)+"</vd:lowGradeCargo>";
//<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
	Запрос = Запрос + УровниУпаковки_в_XML( ВСД_ЭкземплярКласса );

//		тзВСД.cargoInspected = ?(cargoInspected="true",1,0);//cargoInspected;
//		тзВСД.РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.ЗначениеПоИдентификатору(cargoExpertized);



		Запрос=Запрос+"
	|              </vd:batch>
	|              </vd:certifiedConsignment>
    |              <vd:authentication>
    |                <vd:purpose>
    |                  <bs:guid>"+ СокрЛП( док.Цель.Guid ) +"</bs:guid>
    |                </vd:purpose>
    |                <vd:cargoInspected>"+ ГМ.булево(док.cargoInspected) +"</vd:cargoInspected>
    |                <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
    |                <vd:locationProsperity>"+ ВСД_ЭкземплярКласса.locationProsperity +"</vd:locationProsperity>
    |                <vd:specialMarks>"+ ВСД_ЭкземплярКласса.specialMarks+"</vd:specialMarks>
    |              </vd:authentication>";
//    |              <vd:precedingVetDocuments>ВСД №5891</vd:precedingVetDocuments>

    Запрос = Запрос + СвязанныеДокументы_в_XML( ВСД_ЭкземплярКласса );
//Запрос=Запрос+"
//    |              <vd:referencedDocument>
//	|                <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
//   |                <vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ТтнДата) +"</vd:issueDate>
//    |                <vd:type>1</vd:type>
//    |                <vd:relationshipType>1</vd:relationshipType>
//    |              </vd:referencedDocument>


	Запрос=Запрос+"
    |              <vd:statusChange>
    |                <vd:status>CONFIRMED</vd:status>
    |                <vd:specifiedPerson>
    |                  <vd:fio>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_vetdoctor_fio")) +"</vd:fio>
    |                  <vd:post>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_vetdoctor_post")) +"</vd:post>
    |                </vd:specifiedPerson>
    |                <vd:actualDateTime>"+ ГМ.Преобразовать_Дата_в_Строка(док.ДатаДок,"T00:00:00") +"</vd:actualDateTime>
    |              </vd:statusChange>";


	Возврат Запрос;
КонецФункции


Функция ГашениеБлокВозвратXML(Док, ВСД_ЭкземплярКласса )
	ЗапросШапка = "
    |        <merc:returnedDelivery>";

	//Тут перевертыш - предусмотреть при оптимизации блока
	ЗапросШапка = ЗапросШапка +"
    |          <vd:consignor>
    |            <dt:businessEntity>
    |              <bs:guid>"+СокрЛП(Док.Получатель_ХозСубъект.GUID)+"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(Док.Получатель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignor>
    |          <vd:consignee>
    |            <dt:businessEntity>
    |              <bs:guid>"+ СокрЛП(Док.Отправитель_ХозСубъект.GUID) +"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(Док.Отправитель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignee>";

	consignment =  "
	|       <vd:consignment>";
	consignment =  consignment+"
	|                <vd:productType>"+ док.Продукция_Элемент.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>";

    consignment =  consignment+ ProductItem_в_XML(док, док.НаименованиеПродукции);


	consignment = consignment + "
			|            <vd:volume>"+ док.КоличествоВозврат +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";

	// даты
	consignment =  consignment+ ГМ.Изготовление_СрокГодности_в_XML(док, "vd"); //даты);
// №№ партий
	consignment =  consignment+ НомераПартий_в_XML( ВСД_ЭкземплярКласса );

	Попытка ГУИДСтраны = СокрЛП( док.Страна_GUID); Исключение ГУИДСтраны = СокрЛП( ГМ.СписокКонстант.Получить("Страна").GUID); КонецПопытки;

	consignment = consignment + "
		|			<vd:perishable>"+ГМ.Булево(док.скоропортящийся)+"</vd:perishable>
		|			<vd:origin>
		|            <vd:country>
		|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
		|            </vd:country>";

  // производители
	consignment = consignment + Производители_в_XML( ВСД_ЭкземплярКласса );
		consignment = consignment + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+ГМ.Булево(док.некачественный)+"</vd:lowGradeCargo>";
// маркировки
	consignment = consignment + УровниУпаковки_в_XML( ВСД_ЭкземплярКласса );

	consignment = consignment + "
    |          </vd:consignment>";


//****************
//	тзУпаковка = Док.УровниУпаковки.Выгрузить();
//	тзМаркировка = Док.Маркировка.Выгрузить();
//	consignment = consignment+  УровниУпаковки_в_XML(док,тзУпаковка,тзМаркировка);

	ЗапросПодвал = "";
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект) = 0 Тогда
	ЗапросПодвал = "
        |      <vd:broker>
        |        <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |      </vd:broker>";
	КонецЕсли;

	ЗапросПодвал = ЗапросПодвал + Транспорт_в_XML(док);

	ЗапросПодвал = ЗапросПодвал+"
        |      <vd:transportStorageType>"+ док.ТермическоеСостояние.Идентификатор() +"</vd:transportStorageType>";


	ЗапросПодвал = ЗапросПодвал+"
        |      <vd:accompanyingForms>";

	Если док.ТтнТип > 0 Тогда
	//Тип товарно-транспортной накладной.
    //Допустимые типы для waybill: 1, 2, 3, 4, 5
		ЗапросПодвал = ЗапросПодвал+"
       	|        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
   	    |          <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
       	|          <vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ТтнДата) +"</vd:issueDate>
        |          <vd:type>"+док.ТтнТип+"</vd:type>
   	    |        </vd:waybill>";
	КонецЕсли;

	ЗапросПодвал = ЗапросПодвал+"
        |        <vd:vetCertificate>
        |          <vd:authentication>
        |            <vd:purpose>
        |              <bs:guid>"+ СокрЛП( док.Цель.Guid ) +"</bs:guid>
        |            </vd:purpose>
        |            <vd:cargoInspected>"+ ГМ.Булево(док.cargoInspected) +"</vd:cargoInspected>";
		ЗапросПодвал = ЗапросПодвал+ "
		|            <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
		|            <vd:locationProsperity>"+ ВСД_ЭкземплярКласса.locationProsperity +"</vd:locationProsperity>";


		ЗапросПодвал = ЗапросПодвал + УсловияПеревозки_в_XML(Док);

		Если ПустоеЗначение( ВСД_ЭкземплярКласса.specialMarks )=0 Тогда
			ЗапросПодвал = ЗапросПодвал+" <vd:specialMarks>"+ ВСД_ЭкземплярКласса.specialMarks +"</vd:specialMarks>";
		КонецЕсли;

		ЗапросПодвал = ЗапросПодвал+ "
        |          </vd:authentication>
        |        </vd:vetCertificate>";

		//ЗапросПодвал = ЗапросПодвал + СвязанныеДокументы_в_XML(док);


	ЗапросПодвал = ЗапросПодвал+ "
    |          </vd:accompanyingForms>
    |        </merc:returnedDelivery>";

	Запрос = ЗапросШапка + consignment + ЗапросПодвал;
	Возврат Запрос;
КонецФункции


// Запрос на гашение ВСД входящего ЖД 30/01/2018
Функция ВСД2_входящийГашение_ЗапросXML(док, ВСД_ЭкземплярКласса)
	
	// обновим информацию из БД - возможно ее кто-то изменил
	ВСД_Док = СоздатьОбъект("Справочник.ВСД_Док");
	ВСД_Док.НайтиЭлемент(док);
	док = ВСД_Док.ТекущийЭлемент();	
	
	Если Док.КоличествоПринять = 0 Тогда
		Решение = "RETURN_ALL";
	ИначеЕсли Док.КоличествоВозврат = 0 Тогда
		Решение = "ACCEPT_ALL";
	Иначе
		Решение = "PARTIALLY";
	КонецЕсли;

		Запрос="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:processIncomingConsignmentRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>";

//deliveryDate - Дата оформления входящей партии. Заменил <vd:deliveryDate>" + ГМ.Преобразовать_Дата_в_Строка(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
	Запрос = запрос +"
	|            <merc:delivery>
	|              <vd:deliveryDate>" + ГМ.Преобразовать_Дата_в_Строка(ТекущаяДата(), "T00:00:00") + "</vd:deliveryDate>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>";
	Если ПустоеЗначение(док.Отправитель_Площадка) = 0 Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
    ВремПолучатель_Площадка = ?(ПустоеЗначение(док.Получатель_Площадка) = 0,док.Получатель_Площадка,ГМ.СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
	Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>";
	Если Док.КоличествоПринять > 0 Тогда
		Запрос = запрос +"
		|              <vd:consignment>
		|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
		|                <vd:product>
		|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
		|                </vd:product>
		|                <vd:subProduct>
		|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
		|                </vd:subProduct>";


		Запрос = Запрос + productItem_в_XML(док, док.НаименованиеПродукции);

		Запрос = Запрос + "
				|            <vd:volume>"+ Док.КоличествоПринять +"</vd:volume>
				|            <vd:unit>
				|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
				|            </vd:unit>";

		Запрос = Запрос + ГМ.Изготовление_СрокГодности_в_XML(док, "vd"); //даты);
		Запрос = Запрос + НомераПартий_в_XML( ВСД_ЭкземплярКласса );

		Запрос = Запрос + "
			|			<vd:perishable>"+ГМ.булево(док.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ СокрЛП( док.Страна_GUID) +"</bs:guid>
			|            </vd:country>";


	    Запрос = Запрос + Производители_в_XML( ВСД_ЭкземплярКласса );

		Запрос = Запрос + "
		|                </vd:origin>
		|                <vd:lowGradeCargo>"+ГМ.булево(док.некачественный)+"</vd:lowGradeCargo>";

		Запрос = Запрос + УровниУпаковки_в_XML( ВСД_ЭкземплярКласса );

		Запрос=Запрос+"
		|              </vd:consignment>";
	КонецЕсли; //ПринимаемоеКолво > 0
//*************************
	Если ПустоеЗначение(СокрЛП(док.Перевозчик_ХозСубъект))=0 Тогда
		Запрос=Запрос+"
		|        <vd:broker>
		|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
		|        </vd:broker>";
	КонецЕсли;

	Запрос = Запрос + Транспорт_в_XML(док);

	Если ПустоеЗначение(док.ТермическоеСостояние) = 0 Тогда
	Запрос=Запрос+"
	|              <vd:transportStorageType>"+ док.ТермическоеСостояние.Идентификатор() +"</vd:transportStorageType>";
	КонецЕсли;

	Запрос=Запрос+"
	|              <vd:accompanyingForms>";

	Если док.ТтнТип > 0 Тогда
	//Тип товарно-транспортной накладной.
    //Допустимые типы для waybill: 1, 2, 3, 4, 5
		Запрос=Запрос+"
       	|        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
   	    |          <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
       	|          <vd:issueDate>"+ ГМ.Преобразовать_Дата_в_Строка(док.ТтнДата) +"</vd:issueDate>
        |          <vd:type>"+док.ТтнТип+"</vd:type>
   	    |        </vd:waybill>";
	КонецЕсли;

	Запрос=Запрос+"
	|                <vd:vetCertificate>";
	//Если док.ВидВСД=1 Тогда
	//	Запрос = Запрос + ВСД2_ВходящийБумажныйГашение_ЗапросXML(док, док.НаименованиеПродукции);
	//Иначе
		Запрос=Запрос+"
		|                  <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>";
	//КонецЕсли;

	Запрос=Запрос+"
	|                </vd:vetCertificate>
	|              </vd:accompanyingForms>
	|            </merc:delivery>
	|            <merc:deliveryFacts>";
	//Если док.ВидВСД=1 Тогда
	//	Запрос=Запрос+"
	//	|              <vd:vetCertificatePresence>PAPER</vd:vetCertificatePresence>";
	//Иначе
		Запрос=Запрос+"
		|              <vd:vetCertificatePresence>ELECTRONIC</vd:vetCertificatePresence>";
	//КонецЕсли;

//	|";
//<vd:docInspection> 	vd:DeliveryInspection 	[1..1] 	Соответствуют ли сведения о партии, указанной в ВСД, фактическим.
//<vd:responsible> 	dt:User 					[1..1] 	Пользователь, указавший результат соответствия.
//<vd:login> 	xs:NCName 						[0..1] 	Логин пользователя, зарегистрированного в системе Меркурий. 	<vd:login>user_ab_150101</vd:login>
//</vd:responsible>
//·<vd:result> 	vd:DeliveryInspectionResult 	[1..1] 	Результат соответствия. 	<vd:result>CORRESPONDS</vd:result>
//</vd:docInspection>

	Запрос=Запрос+"
	|              <vd:docInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:docInspection>
	|              <vd:vetInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( ГМ.СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:vetInspection>
	|              <vd:decision>"+Решение+"</vd:decision>
	|            </merc:deliveryFacts>";

	// Акт несоотв.    - В реквизит вынести?
   	Если (_АктНесоотв = 1) или Не(Док.Количество = (Док.КоличествоПринять + Док.КоличествоВозврат)) Тогда
		Запрос = Запрос+"
		|            <merc:discrepancyReport>
	//	|              <vd:issueSeries>S1624387448</vd:issueSeries>  Для электронного акта несоответствия серия генерируется автоматически
	//	|              <vd:issueNumber>N1584929183</vd:issueNumber>
		|              <vd:issueDate>"+ ?(ПустоеЗначение(ДатаАкта) = 0,ГМ.Преобразовать_Дата_в_Строка(ДатаАкта),?(ПустоеЗначение(Док.ТтнДата) = 0,ГМ.Преобразовать_Дата_в_Строка(Док.ТтнДата),ГМ.Преобразовать_Дата_в_Строка(Док.ДатаДок))) +"</vd:issueDate>
		|              <vd:reason>
		|                <vd:name>"+?(ПустоеЗначение(СокрЛП(тПричинаАкта)) = 0,СокрЛП(тПричинаАкта),"несоответствие")+"</vd:name>
		|              </vd:reason>
		|              <vd:description>"+?(ПустоеЗначение(тОписаниеНесоответствия)=1,"несоответствие",СокрЛП(тОписаниеНесоответствия)) +"</vd:description>
		|            </merc:discrepancyReport>";
	КонецЕсли;

	// Возврат поставщику
	Если док.КоличествоВозврат > 0 Тогда //ЗначениеЗаполнено(ДокВозврат) Тогда
		Запрос = Запрос + ГашениеБлокВозвратXML(док, ВСД_ЭкземплярКласса);
	КонецЕсли;

	Запрос = Запрос+"
	|          </merc:processIncomingConsignmentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>
	|";

	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД2_ВходящийГашение(док, ВСД_ЭкземплярКласса, ПолучитьОтветВетис=1 )

	//стандартное поведение функции

	Если Проверка_ВСД2_Входящий(док, ВСД_ЭкземплярКласса )=0 Тогда
		Возврат 0;
	КонецЕсли;
	Если док.ВидВСД=1 Тогда
	    Сообщить("Гашение Бумажного ВСД не предусмотрено");
		//Возврат 0;
	КонецЕсли;
   	Если _АктНесоотв = 1 Тогда
   		Если (ПустоеЗначение(тПричинаАкта) = 1) или (ДатаАкта = Дата(0)) Тогда
	    	Сообщить("Не указана Причина составления Акта либо его Дата составления");
			Возврат 0;
   		КонецЕсли;
    КонецЕсли;

	// !!!! Важно. привязал к выбору площадки на форме Функция ПриИзмененииПлощадки(), чтобы при гашении Партии записались на выбранную площадку

	ЗапросXML = ВСД2_входящийГашение_ЗапросXML(док, ВСД_ЭкземплярКласса);
	метод = ГМ.Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);

	ГМ.СохранитьЗапросВДокументе( док, appID );

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
	
	Если ПолучитьОтветВетис=1 Тогда
		
		Если ПустоеЗначение(appID)=0 Тогда
	
			ВыбПартия = "";
			спПараметры = СоздатьОбъект("СписокЗначений");	
			спПараметры.Установить("applicationID", appID );
			спПараметры.Установить("докСсылка", док );
			Результат = ГМ2.ПолучитьРезультат_ВСД_2(спПараметры, 0, ВыбПартия);
			ВСД_ЭкземплярКласса.Партия = ВыбПартия;
						
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда
					ВыбПартия = "";
					Результат = ГМ2.ПолучитьРезультат_ВСД_2(спПараметры, 0, ВыбПартия);
					ВСД_ЭкземплярКласса.Партия = ВыбПартия;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат appID;

КонецФункции
	
//******************************************************************************
Процедура Отправка_Параллельно()

	// Проверка заполнения обязательных полей
	Если _АктНесоотв=1 Тогда 
		
		Если ПустоеЗначение(тОписаниеНесоответствия)=1 Тогда 
			Предупреждение("Заполните Описание несоответствия");
			Возврат;
		КонецЕсли;
		
		Если ПустоеЗначение(тПричинаАкта)=1 Тогда 
			Предупреждение("Заполните Причину несоответствия");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВремТЗ = СоздатьОбъект("ТаблицаЗначений");
	тзВСД.Выгрузить(ВремТЗ);
	ВремТЗ.ВыбратьСтроки();
	Отправлено = 0;
	Пока ВремТЗ.ПолучитьСтроку() = 1 Цикл
		
		Если НЕ(ВремТЗ.Пометка = 1) Тогда
		    Продолжить;
		КонецЕсли;

		Если ( СокрЛП(ВремТЗ.ДокВСД.Статус) = "IN_PROCESS") или 
			( СокрЛП(ВремТЗ.ДокВСД.Статус) = "ACCEPTED") Тогда 
			//ГМ.СообщитьИнфо("Документ "+ВремТЗ.ДокВСД+" уже отправлен, но ответ не получен.");
		    Продолжить;
		КонецЕсли;

		ВремТЗ.applicationID = Отправить_ВСД2_ВходящийГашение( ВремТЗ.ДокВСД, ВремТЗ.ВСД_ЭкземплярКласса, 0 ); 
		
		Отправлено = Отправлено + 1;
	КонецЦикла;

	ГМ.Пауза( );
	
	ВремТЗ.ВыбратьСтроки();
	Отправлено = 0;
	Пока ВремТЗ.ПолучитьСтроку() = 1 Цикл
		
		Если НЕ(ВремТЗ.Пометка = 1) Тогда
		    Продолжить;
		КонецЕсли;
				
		Если (ПустоеЗначение( ВремТЗ.applicationID ) = 0) Тогда
			
			ВыбПартия = "";
			спПараметры = СоздатьОбъект("СписокЗначений");	
			спПараметры.Установить("applicationID", ВремТЗ.applicationID );
			спПараметры.Установить("докСсылка", ВремТЗ.ДокВСД.ТекущийЭлемент() );
			Результат = ГМ2.ПолучитьРезультат_ВСД_2(спПараметры, 0, ВыбПартия);
			ВремТЗ.ВСД_ЭкземплярКласса.Партия = ВыбПартия;
			ВремТЗ.Партия = ВыбПартия;
						
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда
					Результат = ГМ2.ПолучитьРезультат_ВСД_2(спПараметры, 0, ВыбПартия);
					ВремТЗ.ВСД_ЭкземплярКласса.Партия = ВыбПартия;
					ВремТЗ.Партия = ВыбПартия;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Отправлено = Отправлено + 1;
		ВремТЗ.Пометка = 0;		
	КонецЦикла;
	
	Если Отправлено>0 Тогда
    	ВремТЗ.Выгрузить(тзВСД);
	КонецЕсли;

	Попытка тпВСД.ОбновитьСтроки(); Исключение КонецПопытки;
	
КонецПроцедуры 

Процедура Вернуть()
	
	ДокВСД = СоздатьОбъект("Справочник.ВСД_Док");
	
	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку() = 1 Цикл
		Если тзВСД.Пометка=1 Тогда
			
			ДокВСД.НайтиЭлемент( тзВСД.ДокВСД );
			ДокВСД.КоличествоВозврат = Число(ДокВСД.Количество);
			ДокВСД.КоличествоПринять  = 0;
			ДокВСД.Записать();
			тзВСД.ДокВСД = ДокВСД.ТекущийЭлемент(); 
		
		КонецЕсли;
	КонецЦикла;

	тпВСД.ОбновитьСтроки();
	
	Отправка_Параллельно();

КонецПроцедуры

// Получить ВСД для гашения от Меркурия

//*********************************

Функция  ПолучитьСписокВСД2_ОтветXML(appID)

	//стандартное поведение функции
	Если ПустоеЗначение(appID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	ГМ.Пауза( );

	Состояние("Отправляем запрос");
	Результат = ГМ.ПолучитьРезультатСервер( appID );

	СтрИмяФайла = ГМ.Компонента.LogFilename;

	ОбработатьДанные(); // Загрузить в ТЗ, обработать ТЗ

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Возврат Результат;
КонецФункции

Процедура УдалитьВСД( тзВСД )
	
	ОбъектВСД = СоздатьОбъект("Справочник.ВСД_Док");
	
	тзВСД.ВыбратьСтроки();
	Пока тзВСД.ПолучитьСтроку()=1 Цикл
		ОбъектВСД.НайтиЭлемент( тзВСД.ДокВСД );
		ОбъектВСД.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры

//	список ВСД может быть отфильтрован по следующим критериям
//	Тип ВСД:
//        входящий ВСД;				INCOMING
//        исходящий ВСД;			OUTGOING
//        производственный ВСД;		PRODUCTIVE
//        транспортный ВСД;			TRANSPORT
//        возвратный ВСД.			RETURNABLE
//    Статус ВСД:
//        оформлен;		CONFIRMED 	Оформлен. Действующий сертификат, по которому разрешено совершать транзакцию с грузом.
//        погашен;		UTILIZED 	Погашен. Действующий сертификат, по которому транзакция уже была совершена.
//        аннулирован.	WITHDRAWN 	Аннулирован. Не действующий более сертификат.
Функция  ПолучитьСписокВСД( )
	
	// загруженные ВСД помечаем на удаление, чтобы удалить погашенные на сайте 
	УдалитьВСД( тзВСД );
	
    тзВСД.УдалитьСтроки();

	спУсловия = СоздатьОбъект("СписокЗначений");
	спУсловия.ДобавитьЗначение(Отправитель_Площадка, "Площадка");
	спУсловия.ДобавитьЗначение("INCOMING", "vetDocumentType");
	спУсловия.ДобавитьЗначение("CONFIRMED", "vetDocumentStatus");
	спУсловия.ДобавитьЗначение(0, "Смещение");

	спУсловия.ДобавитьЗначение(ВыбПоставщик, "Поставщик_ХозСубъект");
	спУсловия.ДобавитьЗначение(ВыбПлощадка, "Поставщик_Площадка");

	спУсловия.ДобавитьЗначение(НомерДок, "НомерДок");
	спУсловия.ДобавитьЗначение(ДатаДок, "ДатаДок");
	спУсловия.ДобавитьЗначение(ТипДок, "ТипДок");

	спУсловия.ДобавитьЗначение(НачДата, "НачДата");
	спУсловия.ДобавитьЗначение(КонДата, "КонДата");

	Если ПустоеЗначение(Отправитель_Площадка.GUID)=1 Тогда
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	Результат = "";
	НомерЗапроса=0;
	Пока ( Результат<>"COMPLETED" ) и (НомерЗапроса < 10 ) Цикл
		
		ЗапросXML = ГМ2.ПолучитьСписокВСД2_ЗапросXML( спУсловия );
	
		метод = ГМ.Компонента.GetMethod();
		метод.Service = "platform/services/2.1/ApplicationManagementService";
	    метод.Action = "submitApplicationRequest";
	
		appID = ГМ.ОтправитьЗапросSoap(ЗапросXML, метод);
	
		ГМ.УдалитьXML( ГМ.Компонента.LogFilename);
		    
		Если ПустоеЗначение(appID)=0 Тогда
	
			Результат = ПолучитьСписокВСД2_ОтветXML(appID );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда
					Результат = ПолучитьСписокВСД2_ОтветXML( appID );
				КонецЕсли;
			КонецЦикла;
			если Результат="REJECTED" Тогда
				НомерЗапроса=НомерЗапроса+1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ГМ.УдалитьXML( ГМ.Компонента.LogFilename);

	Попытка тпВСД.ОбновитьСтроки(); Исключение КонецПопытки;
	
	//Возврат Результат;
КонецФункции

Процедура ПриИзмененииФирмы()	
	ГМ.Инициализация(Контекст);
	ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	ПриИзмененииПлощадки();
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииСФ()
	Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
		ПриИзмененииФирмы();
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСФ

Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	оПривязки.ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПослеОткрытия()
	ГМ._ПослеОткрытия(Контекст);
КонецПроцедуры

Процедура Привязки_Инит()
	Если Форма.МодальныйРежим() = 0 Тогда
		оПривязки.Привязка("ВСД", "H", "Форма", "W", "Форма");
		оПривязки.Привязка("Соответствия", "H", "Форма", "W", "Форма");
		оПривязки.Привязка("рамкаНайти, рамкаСохранить, текстШК,текстАртикул,РеквизитШК,РеквизитАртикул,кнНайтиШК,кнНайтиАртикул,
		|кнЗаписать, кнЗагрузитьСпр","T","Форма");
		оПривязки.Привязка("Версия","T","Форма");
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()

	ВыбФирма = "";
	ГМ._ПриОткрытии(Контекст);
	
    ДатаАкта = ТекущаяДата();

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	Форма.Закладки.ДобавитьЗначение("Соответствия");
	Форма.ИспользоватьСлой("Основной");

	// 3. Глобавльный модуль Ветис.2.0
	ГМ2.Инициализация(ГМ);

	//тзВСД = СоздатьОбъект("ТаблицаЗначений");
	тзВСД = ГМ2.СтруктуратзВСД2();
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="Документ" Тогда
		
		ВыбДокумент = (Парам);
		ВыбПоставщик = ГМ.НайтиХозСубъект( ВыбДокумент.Контрагент );
		//ЖД Необходимо при наличии нескольких ХС/Площадок
		ВыбФирма = ГМ.ПолучитьФирмуИзКонтекста(ВыбДокумент);
		ПриИзмененииФирмы();
		Попытка
			Отправитель_Площадка = ГМ.найтиПлощадкуПоСкладу(ВыбДокумент.Склад);
			Если ПустоеЗначение(Отправитель_Площадка) = 1 Тогда
			    Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
				Сообщить("Установлена Площадка по умолчанию");
			Иначе
				ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);
			КонецЕсли;
		Исключение КонецПопытки;
		
		ПолучитьСписокВСД( );
		
		//Отправка();
		Отправка_Параллельно();
		
	ИначеЕсли ТипЗначенияСтр(Парам)="Строка" Тогда
		СтрИмяФайла = СокрЛП(Парам);
		ОбработатьДанные();
	ИначеЕсли ТипЗначенияСтр(Парам)="СписокЗначений" Тогда

		СтрИмяФайла = Парам.Получить("ФайлОтвета");
		Если ПустоеЗначение(Парам.Получить("Фирма")) = 0 Тогда
			ВыбФирма = Парам.Получить("Фирма");
			ПриИзмененииФирмы();
		КонецЕсли;

		Если ПустоеЗначение(Парам.Получить("Отправитель_ХозСубъект")) = 0 Тогда
			Отправитель_ХозСубъект = Парам.Получить("Отправитель_ХозСубъект");
		КонецЕсли;

		Если ПустоеЗначение(Парам.Получить("Фирма")) = 1 Тогда
			ВыбФирма = ГМ.ПолучитьФирмуПоХС(Отправитель_ХозСубъект);
			ПриИзмененииФирмы();
		КонецЕсли;

		Если ПустоеЗначение(Парам.Получить("Отправитель_Площадка")) = 0 Тогда
			Отправитель_Площадка = Парам.Получить("Отправитель_Площадка");
			ГМ.СписокКонстант.Установить("Отправитель_Площадка",Отправитель_Площадка);
		КонецЕсли;
		
		ОбработатьДанные();
		
		Если ПустоеЗначение(Парам.Получить("ОтправитьВСД"))=0 Тогда 
			Если Парам.Получить("ОтправитьВСД")=1 Тогда 
				//Отправка();
				Отправка_Параллельно();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		//ЗаполнитьТЗпоСправочнику();
		ЗаполнитьТЗпоСправочнику_ПрямойЗапрос();
		
	КонецЕсли;

	//Повторно заполним реквизиты формы
	ГМ._ПриОткрытии(Контекст);	
	
	Привязки_Инит();

	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	ФормаРасш.УстановитьФорму(Форма);

КонецПроцедуры

Процедура ОбъединитьПартии()

	ОткрытьФорму("Документ.ВСД2_ОбъединениеПартий", тзВСД.ДокВСД.Продукция_Элемент, );

КонецПроцедуры

Процедура ПолучитьУсловияПеревозки() //!!!!

	тз = СоздатьОбъект("ТаблицаЗначений");
	тзВСД.Выгрузить(тз);

	тз.ВыбратьСтроки();
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		Если (тз.Пометка <> 1) Тогда
			Продолжить;
		КонецЕсли;
		Если ПустоеЗначение(тз.ДокВСД)=1 Тогда
			Сообщить("Документ ВСД2_Входящий не создан");
			продолжить;
		КонецЕсли;
		Рез = ГМ2.УсловияПеревозки_Получить( тз.ДокВСД );
		Если ТипЗначенияСтр(Рез) = "ТаблицаЗначений" Тогда
			ДокОб = СоздатьОбъект("Справочник.ВСД_Док");
			ДокОб.НайтиЭлемент( тз.ДокВСД );

			Если Рез.КоличествоСтрок() = 0 Тогда
				УсловияПеревозки = "";
				Сообщить("Перевозка разрешена без условий");
			Иначе
				ДокОб.ИмяФайлаРегионализация = ГМ2.ПолучитьИмяФайлаРегионализация( тз.ДокВСД );
				ЗначениеВФайл(ДокОб.ИмяФайлаРегионализация, Рез);
				ДокОб.Записать();
			КонецЕсли;
		Иначе
			Сообщить("Перевозка разрешена без условий");
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


//{========================= ТАБЛИЧНОЕ ПОЛЕ ДОКУМЕНТОВ =================

//{ --------- тпВСД -----------------------

Процедура ВсдПриАктивизацииСтроки(ТабличноеПоле)
	ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, тзВСД);
КонецПроцедуры

Процедура ВсдВыбор()
	
	ГМ.ПриАктивизацииСтрокиТП(тпВСД, тзВСД);
	ГМ.ПриАктивизацииКолонкиТП(тпВСД, тзВСД);
	
	текСтр=тзВСД.ТекущаяСтрока();
	Если текСтр=0 Тогда Возврат; КонецЕсли;
	текКол = тзВСД.ТекущаяКолонка();
	
	Эл = тзВСД.ПолучитьЗначение(текСтр, текКол);
	
	Если текКол = "Номенклатура" Тогда
		
		меню = СоздатьОбъект("СписокЗначений");
		меню.ДобавитьЗначение("Открыть","Открыть");
		меню.ДобавитьЗначение("Добавить","Добавить");
		меню.ДобавитьЗначение("Изменить","Изменить"); 
		меню.ДобавитьЗначение("Очистить","Очистить"); 
			
		стр=0; Зн="";
		Если меню.ВыбратьЗначение(Зн, "", стр, 60, 1) = 1 Тогда
							
			Если Зн ="Открыть"  Тогда 	
				
				ОткрытьФорму(тзВСД.Номенклатура);
				
			ИначеЕсли Зн ="Добавить"  Тогда

				ОткрытьПодбор("Справочник.Номенклатура","ДляВыбора",,0, тзВСД.Номенклатура);

			ИначеЕсли Зн ="Изменить"  Тогда 	

				Если (ПустоеЗначение(тзВСД.ДокВСД.Продукция_Элемент)=0) и (ПустоеЗначение(тзВСД.Номенклатура)=0) Тогда
					ГМ.УдалитьСоответсвие_Номенклатура_Продукция_Элемент( тзВСД.Номенклатура, тзВСД.ДокВСД.Продукция_Элемент);
					тзВСД.Номенклатура = "";
				КонецЕсли;
				ОткрытьПодбор("Справочник.Номенклатура","ДляВыбора",,0, тзВСД.Номенклатура);

			ИначеЕсли Зн ="Очистить"  Тогда 	

				Если (ПустоеЗначение(тзВСД.ДокВСД.Продукция_Элемент)=0) и (ПустоеЗначение(тзВСД.Номенклатура)=0) Тогда
					ГМ.УдалитьСоответсвие_Номенклатура_Продукция_Элемент( тзВСД.Номенклатура, тзВСД.ДокВСД.Продукция_Элемент);
					тзВСД.Номенклатура = "";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		тпВСД.ОбновитьСтроки();

	ИначеЕсли текКол = "Количество" Тогда
		// Менять нельзя
	ИначеЕсли (текКол = "КоличествоПринять") Тогда
		
		текЗн = тзВСД.ПолучитьЗначение(ТекСтр, текКол);
		ВвестиЧисло(текЗн, "",15,3);
		тзВСД.УстановитьЗначение(текСтр, текКол, текЗн);		
		тзВСД.Пометка=1;

		ДокВСД = СоздатьОбъект("Справочник.ВСД_Док");
		ДокВСД.НайтиЭлемент( тзВСД.ДокВСД );
		ДокВСД.КоличествоПринять = Число(тзВСД.КоличествоПринять);
		ДокВСД.Записать();
			
		тпВСД.ОбновитьСтроки();
		
	ИначеЕсли (текКол = "КоличествоВозврат") Тогда
		
		текЗн = тзВСД.ПолучитьЗначение(ТекСтр, текКол);
		ВвестиЧисло(текЗн, "",15,3);
		тзВСД.УстановитьЗначение(текСтр, текКол, текЗн);		
		тзВСД.Пометка=1;

		ДокВСД = СоздатьОбъект("Справочник.ВСД_Док");
		ДокВСД.НайтиЭлемент( тзВСД.ДокВСД );
		ДокВСД.КоличествоВозврат = текЗн;
		ДокВСД.КоличествоПринять  = Число(ДокВСД.Количество) - Число(ДокВСД.КоличествоВозврат);
		ДокВСД.Записать();
		
		тзВСД.УстановитьЗначение(текСтр, "КоличествоПринять", ДокВСД.КоличествоПринять);		
		
		тпВСД.ОбновитьСтроки();
		
	ИначеЕсли (текКол = "Партия") Тогда

		Эл = тзВСД.ПолучитьЗначение(текСтр, "Партия");
		ОткрытьФорму( Эл.ТекущийЭлемент() );		
		тпВСД.ОбновитьСтроки();
		
	Иначе
		
		Эл = тзВСД.ПолучитьЗначение(текСтр, "ДокВСД");
		ОткрытьФорму( Эл.ТекущийЭлемент() );		
		тпВСД.ОбновитьСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВСДПриВыводеСтроки(ТабличноеПоле,ОформлениеСтроки,ДанныеСтроки,ТипРегиона)

	Если ТипРегиона = 3 Тогда
		ГМ.ВывестиФлажок(ОформлениеСтроки, ДанныеСтроки, "Пометка");

		ДокВСД = СоздатьОбъект("Справочник.ВСД_Док");
		ДокВСД.НайтиЭлемент( ДанныеСтроки.ДокВСД );
		
		//ДанныеСтроки.КодТНВЭД = ДанныеСтроки.ВидПродукции.КодТНВЭД;
		//ОформлениеСтроки.Ячейки.КодТНВЭД.УстановитьТекст( СокрЛП(ДанныеСтроки.ВидПродукции.КодТНВЭД) );
		//Для А=1 По ОформлениеСтроки.Ячейки.Количество() Цикл						
		//	Попытка
		//		Ячейка=ОформлениеСтроки.Ячейки.Получить(А);
		//		зн = ДокВСД.ПолучитьАтрибут( Ячейка.Имя );
		//		Если ПустоеЗначение(зн)=0 Тогда 
		//			Ячейка.УстановитьТекст( СокрЛП(зн) ); 
		//		КонецЕсли;
		//	Исключение
		//	КонецПопытки;
		//КонецЦикла;
		
	
	 	//+Станислав, 2019-06-10 13:59:54
		кодТНВЭД=СокрЛП(ДокВСД.Продукция_Элемент.ВидПродукции.КодТНВЭД)+"/"+СокрЛП(ДокВСД.Продукция_Элемент.Продукция.КодТНВЭД);
		ОформлениеСтроки.Ячейки.КодТНВЭД.УстановитьТекст(кодТНВЭД); 
		
		РазрешенныйКодТНВЭД = ГМ.ПолучитьКонстанту("ПарамРазрешенныйТНВЭД");
		Если ПустоеЗначение(РазрешенныйКодТНВЭД)=0 Тогда  
			если Найти(РазрешенныйКодТНВЭД, кодТНВЭД)=0 Тогда //"2309/2309"
				ОформлениеСтроки.ЦветФона = ГМ.цвКрасный;	// Красный
				Сообщить("Запрещенный код ТНВЭД в строке "+ДанныеСтроки.НомерСтроки,"!");
			КонецЕсли;
		КонецЕсли;
	
		// Проверка Срок годности	
		Если ГМ.ПолучитьКонстанту("ПарамПроверятьСрокГодности")=1 Тогда
			СрокГодностиКоличествоДней = ГМ.ПолучитьКонстанту("ПарамПроверятьСрокГодностиКоличествоДней");
			ДатаСрокГодности1 = ГМ.Преобразовать_СтрокаДата_в_Дата( ДокВСД.ДатаСрокГодности1 );
			Если ( ДатаСрокГодности1 + СрокГодностиКоличествоДней ) <= ТекущаяДата() Тогда 
				ОформлениеСтроки.ЦветФона = ГМ.цвКрасный;	// Красный
				Сообщить("Просроченный товар в строке "+ДанныеСтроки.НомерСтроки,"!");
			КонецЕсли;
		КонецЕсли;
		
		
		Если (ДокВСД.Количество) <> (ДокВСД.КоличествоПринять) Тогда
			ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("Количество");
			ОбъектЯчейка.ЦветФона=ГМ.цвКрасный; 
			ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("КоличествоПринять");
			ОбъектЯчейка.ЦветФона=ГМ.цвКрасный; 
			ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("КоличествоВозврат");
			ОбъектЯчейка.ЦветФона=ГМ.цвКрасный; 
		КонецЕсли;

		//Если ДанныеСтроки.ПлощадкаИзПЭ <> ДанныеСтроки.ПлощадкаИзВСД Тогда
		//	ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("ПлощадкаИзПЭ");
		//	ОбъектЯчейка.ЦветФона=ГМ.цвЖелтый; 
		//	ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("ПлощадкаИзВСД");
		//	ОбъектЯчейка.ЦветФона=ГМ.цвЖелтый; 
		//КонецЕсли;

		
		ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("Продукция_Элемент");
		ОбъектЯчейка.УстановитьТекст( "[" +ДанныеСтроки.ДокВСД.Продукция_Элемент.Код +"] "+СокрЛП(ДанныеСтроки.ДокВСД.Продукция_Элемент.Наименование) );

		ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("Номенклатура");
		Если ПустоеЗначение(ДанныеСтроки.Номенклатура)=0 Тогда 
			ОбъектЯчейка.УстановитьТекст( "[" +ДанныеСтроки.Номенклатура.Код +"] "+СокрЛП(ДанныеСтроки.Номенклатура.Наименование) );
		КонецЕсли;
		
		
		Если СокрЛП(ДокВСД.Статус)="COMPLETED" Тогда
			ОформлениеСтроки.ЦветФона = ГМ.цвЗеленый;	
		иначеЕсли (ПустоеЗначение(ДокВСД.Статус)= 1) или (СокрЛП(ДокВСД.Статус)="CONFIRMED") Тогда
			//тз.сЦвет = "";
		иначе
			ОформлениеСтроки.ЦветФона = ГМ.цвЖелтый;	
		КонецЕсли;
		Если (ПустоеЗначение(ДанныеСтроки.докВСД.Отправитель_ХозСубъект) = 1) или
			(ПустоеЗначение(ДанныеСтроки.ВСД_ЭкземплярКласса.тзПроизводители) = 1) Тогда
			ОформлениеСтроки.ЦветФона = ГМ.цвКрасный;
			Сообщить("Не указан производитель с строке "+ДанныеСтроки.НомерСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВСДПриВыбореФлажка(ТабличноеПоле,Стр, Колонка, ТипРегиона)
	
	ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, тзВСД);
	тзВСД.Пометка = ?(тзВСД.Пометка = 1,0,1);
	ТабличноеПоле.ОбновитьСтроки();
	//ОбновитьИнф();

КонецПроцедуры

//} ----------- тпВСД

//{ ----------- тпСоответствия

Процедура СоответствияПриАктивизацииСтроки(ТабличноеПоле)
	ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, тзСоответствия);
КонецПроцедуры

Процедура СоответствияВыбор()
	ГМ.ПриАктивизацииСтрокиТП(тпСоответствия, тзСоответствия);
	ГМ.ПриАктивизацииКолонкиТП(тпСоответствия, тзСоответствия);
	
	текСтр=тзСоответствия.ТекущаяСтрока();
	Если текСтр=0 Тогда Возврат; КонецЕсли;
	текКол = тзСоответствия.ТекущаяКолонка();
	
	Эл = тзСоответствия.ПолучитьЗначение(текСтр, текКол);
		
	Если текКол = "ПроизводителиСписок" Тогда
		Сп = ЗначениеИзСтроки(тзСоответствия.ПроизводителиСписок);
		зн="";
		Сп.ВыбратьСтроку(зн,"Производители");
	ИначеЕсли текКол = "Продукция_Элемент" Тогда
		ОткрытьФорму(тзСоответствия.Продукция_элемент);
	ИначеЕсли текКол = "Производитель" Тогда
		ОткрытьФорму(тзСоответствия.Производитель);

	ИначеЕсли текКол = "Номенклатура" Тогда
		
		//Если (ПустоеЗначение(тзСоответствия.Продукция_Элемент)=0) и (ПустоеЗначение(тзСоответствия.Номенклатура)=0) Тогда
		//	Если Вопрос("Удалить текущее соответствие?",4)=6 Тогда
		//		ГМ.УдалитьСоответсвие_Номенклатура_Продукция_Элемент( тзСоответствия.Номенклатура, тзСоответствия.Продукция_Элемент);
		//	КонецЕсли;
		//КонецЕсли;
		//
		//ОткрытьПодбор("Справочник.Номенклатура","ДляВыбора",,0, тзСоответствия.Номенклатура);		
	
		меню = СоздатьОбъект("СписокЗначений");
		меню.ДобавитьЗначение("Открыть","Открыть");
		меню.ДобавитьЗначение("Добавить","Добавить");
		меню.ДобавитьЗначение("Изменить","Изменить"); 
		меню.ДобавитьЗначение("Очистить","Очистить"); 
			
		стр=0; Зн="";
		Если меню.ВыбратьЗначение(Зн, "", стр, 60, 1) = 1 Тогда
							
			Если Зн ="Открыть"  Тогда 	
				
				ОткрытьФорму(тзСоответствия.Номенклатура);
				
			ИначеЕсли Зн ="Добавить"  Тогда

				ОткрытьПодбор("Справочник.Номенклатура","ДляВыбора",,0, тзВСД.Номенклатура);

			ИначеЕсли Зн ="Изменить"  Тогда 	

				Если (ПустоеЗначение(тзСоответствия.Продукция_Элемент)=0) и (ПустоеЗначение(тзСоответствия.Номенклатура)=0) Тогда
					ГМ.УдалитьСоответсвие_Номенклатура_Продукция_Элемент( тзСоответствия.Номенклатура, тзСоответствия.Продукция_Элемент);
					тзСоответствия.Номенклатура = "";
				КонецЕсли;
				ОткрытьПодбор("Справочник.Номенклатура","ДляВыбора",,0, тзСоответствия.Номенклатура);

			ИначеЕсли Зн ="Очистить"  Тогда 	

				Если (ПустоеЗначение(тзСоответствия.Продукция_Элемент)=0) и (ПустоеЗначение(тзСоответствия.Номенклатура)=0) Тогда
					ГМ.УдалитьСоответсвие_Номенклатура_Продукция_Элемент( тзСоответствия.Номенклатура, тзСоответствия.Продукция_Элемент);
					тзСоответствия.Номенклатура = "";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		текЗн = тзСоответствия.ПолучитьЗначение(ТекСтр, текКол);
		ВвестиЗначение(текЗн, "","Строка",100);
		тзСоответствия.УстановитьЗначение(текСтр, текКол, текЗн);
	КонецЕсли;
	//РаскраситьСоответствия()
	
	Попытка тпСоответствия.ОбновитьСтроки(); Исключение КонецПопытки;	
		
КонецПроцедуры

Процедура СоответствияПриВыводеСтроки(ТабличноеПоле,ОформлениеСтроки,ДанныеСтроки,ТипРегиона)

	Если ТипРегиона = 3 Тогда
		
        Если ПустоеЗначение(ДанныеСтроки.Номенклатура) = 1 Тогда
        	ОформлениеСтроки.ЦветФона = ГМ.цвЖелтый;	// Желтый
		ИначеЕсли ПустоеЗначение(ДанныеСтроки.Продукция_Элемент) = 1 Тогда		    
			ОформлениеСтроки.ЦветФона = ГМ.цвКрасный;	// Красный
		Иначе
			ОформлениеСтроки.ЦветФона = ГМ.цвЗеленый; // Зеленый
        КонецЕсли;

		ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("Продукция_Элемент");
		ОбъектЯчейка.УстановитьТекст( "[" +ДанныеСтроки.Продукция_Элемент.Код +"] "+СокрЛП(ДанныеСтроки.Продукция_Элемент.Наименование) );

		ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("Номенклатура");
		Если ПустоеЗначение(ДанныеСтроки.Номенклатура)=0 Тогда 
			ОбъектЯчейка.УстановитьТекст( "[" +ДанныеСтроки.Номенклатура.Код +"] "+СокрЛП(ДанныеСтроки.Номенклатура.Наименование) );
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура тпСоответствияПриВыбореФлажка(ТабличноеПоле,Стр, Колонка, ТипРегиона)
//	ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, тзСоответствия);
//	тзСоответствия.Пометка = ?(тзСоответствия.Пометка = 1,0,1);
//	ТабличноеПоле.ОбновитьСтроки();
//	//ОбновитьИнф();
//
//КонецПроцедуры

//} ------ тпСоответствия

//}

//{========================= Список изменений =================

Процедура ПриНажатииЛевойКнопки(Сост, х, у)
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
	Если ТипЗначенияСтр(Атр) = "АтрибутФормы" Тогда
		Если Атр.Идентификатор = "Версия" Тогда
			ЗапуститьПриложение(ГМ.ВерсияСсылка());
		КонецЕсли;  
	КонецЕсли;	
	
КонецПроцедуры

//}===========================================================

//{========================= ADirks - сохранение настроек ТП =================
Процедура ПослеСозданияФормы()
	
//	тпВСД = ГМ.СоздатьТабличноеПоле( Сам(), "тпВСД", тзВСД, 1,1);
//	тпСоответствия = ГМ.СоздатьТабличноеПоле( Сам(), "тпСоответствия", тзСоответствия, 0, 1 );

        тпВСД = СоздатьОбъект("Меркурий.ТабличноеПоле.ТЗ");
        тпВСД.Инит( Сам(), "ВСД");
        тпВСД.ИмяНастройки = "Гашение2_тпВСД";
        тпВСД.УстановитьТЗ(тзВСД);
        тпВСД.Показать();

        тпСоответствия = СоздатьОбъект("Меркурий.ТабличноеПоле.ТЗ");
        тпСоответствия.Инит(Контекст, "Соответствия");
        тпСоответствия.ИмяНастройки = "Гашение2_тпСоответствия";
        тпСоответствия.УстановитьТЗ(тзСоответствия);
        тпСоответствия.Показать();
КонецПроцедуры

Процедура ПриЗакрытии()
        тпВСД.СохранитьНастройки();
        тпСоответствия.СохранитьНастройки();
КонецПроцедуры

Процедура ПриОтжатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО) Экспорт
        тпВСД._ПриОтжатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО);
        тпСоответствия._ПриОтжатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО);
КонецПроцедуры

Процедура ПриНажатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО) Экспорт
        тпВСД._ПриНажатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО);
        тпСоответствия._ПриНажатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО);
КонецПроцедуры
//}===========================================================


//******************************************************************************
Процедура ПоКнопкеПоиск(СтрокаПоиска="")
	Перем тз; //:ТаблицаЗначений
	
	Если СтрокаПоиска="" Тогда
		Если ВвестиСтроку(СтрокаПоиска,"Введите штрихкод",15,,30) = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Поз = 0; 
	Если тзВСД.НайтиЗначение(СтрокаПоиска,Поз,"GTIN") = 1 Тогда
		тпВСД.ТекущаяСтрока = Поз;
	КонецЕсли;
КонецПроцедуры                       

//******************************************************************************
// ПриИзмененииНомерТТН()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Получаем список номеров ТТН из загружаемых ВСД
//
// [+]serpent, 17.10.2019
Процедура ПриИзмененииНомерТТН()
	Фильтровать();
КонецПроцедуры // ПриИзмененииНомерТТН()

Процедура СписатьПартии()
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	тзВСД.Выгрузить( тз );
		
	ОткрытьФорму("Документ.ВСД2_Инвентаризация", тз, );

КонецПроцедуры

тзСоответствия = СоздатьОбъект("ТаблицаЗначений");
тзСоответствия.НоваяКолонка("сЦвет",,,,,,);
тзСоответствия.НоваяКолонка("Номенклатура","Справочник.Номенклатура",,,"Номенклатура",20);
тзСоответствия.НоваяКолонка("Продукция_Элемент","Справочник.ВСД_Продукция_Элемент",,,"ВСД_Продукция_Элемент",20);
тзСоответствия.НоваяКолонка("Артикул",,,,,10);
тзСоответствия.НоваяКолонка("GTIN",,,,"Штрихкод / GTIN",10);
тзСоответствия.НоваяКолонка("Производитель",,,,,20);

ТипДок = 1;
РеквизитАртикул = "Артикул";
РеквизитШК = "Артикул";
_НеЗагружать = 0;

Сервис = СоздатьОбъект("Сервис");
Сервис.ВключитьРаскраскуТаблиц();
Сервис.ИспользоватьПланРаскраски(0);
