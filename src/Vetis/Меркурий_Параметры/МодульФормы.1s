// Меркурий_Параметры.ert = Установка параметров модуля интеграции 
//
// ===============================================================
//Авторы:
// Синявский Филипп phsin@kb99.pro
// Жуков Дмитрий zhukov@kb99.pro

Перем ВыбРеквизит; //для выбора площадки
Перем ВыбФирма;
Перем ТПИнтеграция, ТЗИнтеграция;
Перем ТПСистема, ТЗСистема;
//Перем КаталогБиблиотек Экспорт;
Перем КаталогМодуля Экспорт;
Перем спКолонкаСортировкиПартииСписания;
Перем БылВыбор;
Перем оПривязки; //:Меркурий.Привязки

Функция ИмяDLL()
	
	Если ГМ.ПолучитьКонстанту("ТестовыйРежим")=0 Тогда 
		ИмяDLL = "SoapDLL_work";
	Иначе 
		ИмяDLL = "SoapDLL_test";
	КонецЕсли;
	Возврат ИмяDLL;
	
КонецФункции

Процедура ЗарегистрироватьDLL()

	Попытка
 		текстБАТ = Создатьобъект("Текст");
 		текстБАТ.Очистить();
 		текстБАТ.КодоваяСтраница(1);

 		текстБАТ.ДобавитьСтроку("
 		|%SystemRoot%\Microsoft.NET\Framework\v4.0.30319\regasm.exe """+ КаталогМодуля+ИмяDLL() +".dll"" /codebase
 		|pause
 		|");

 		текстБАТ.Записать(КаталогМодуля + "setupdll.bat");
 		ЗапуститьПриложение(КаталогМодуля+ "setupdll.bat");

 	Исключение
 		Сообщить(ОписаниеОшибки());
 	КонецПопытки;

КонецПроцедуры

Функция ПроверитьDll()
	Попытка
		ГМ.Инициализация(Контекст);

		//Предупреждение("Библиотека SoapDLL_test.dll зарегистрирована ");
		Попытка
			Предупреждение("Библиотека "+ ИмяDLL() +".dll зарегистрирована,
			|версия = "  + ГМ.Компонента.Version);
			Возврат 1;
		Исключение
			Предупреждение("Библиотека "+ИмяDLL() +" не зарегистрированна!");
			Сообщить(ОписаниеОшибки());
			Возврат 0;
		Конецпопытки;
	Исключение
		Предупреждение("Библиотека "+ ИмяDLL() +" не зарегистрированна!");
		Сообщить(ОписаниеОшибки());
		Возврат 0
	Конецпопытки;
КонецФункции

//{ Привязки 
Процедура Привязки_Инит()

	оПривязки.УстановитьФорму(Форма);
	оПривязки.Привязка("тпСистема,тСистемныеНастройки", "H", "Форма", "W", "Форма");
	оПривязки.Привязка("тпИнтеграция,тОбщиеПараметры", "H", "Форма", "W", "Форма");
	оПривязки.Привязка("ВСД_ОсобыеОтметки", "H", "Форма");

КонецПроцедуры

Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	оПривязки.ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры

Процедура ПослеОткрытия()
	оПривязки.ПослеОткрытия();
КонецПроцедуры
//}

Процедура ПриОткрытии()

	// класс Глобальный модуль Ветис.1.4
	ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");

	// класс Глобальный модуль Ветис.2.0
	ГМ2 = СоздатьОбъект("Меркурий_ГлобальныйМодуль2");
	ГМ2.Инициализация(ГМ);
	Попытка ГМ.Инициализация(Контекст); Исключение Конецпопытки;

	ГМ.КолонкаСортировкиПартииСписания.Выгрузить(спКолонкаСортировкиПартииСписания);
	Если ГМ.ИмяФайлаНастроек() = КаталогИБ()+"Меркурий_Параметры.cfg" Тогда
		флПараметры = 2;
	Иначе
		флПараметры = 1;
	КонецЕсли;

	ГМ.СписокФирм.Выгрузить(СписокФирм);
	Если СписокФирм.РазмерСписка() <> 0 Тогда
		СписокФирм.ТекущаяСтрока(1);
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
	КонецЕсли;

    ГМ.ЗагрузитьПараметрыВФорму(Контекст);

	Если ПустоеЗначение(КаталогМодуля) = 1 Тогда   //ЖД
	    ИмяФайла="";
		РасположениеФайла(КаталогМодуля, ИмяФайла);
	КонецЕсли;

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основные настройки");
	Форма.Закладки.ДобавитьЗначение("Дополнительные параметры");

	Форма.ИспользоватьСлой("Основной, Параметры1, Действия");

	ГМ._ПриОткрытии(Контекст); // инициализация привязок 
	Привязки_Инит();
КонецПроцедуры

//======================================================================
Процедура ДобавитьКонстантуВТЗ(ТЗ, ВыбЭлемент, ВыбКонстанта, ЗначениеТип = "Строка", Представление="")
	ТЗ.НоваяСтрока();
	ТЗ.Элемент = ВыбЭлемент;
	ТЗ.Константа = ВыбКонстанта;
	Если ВыбКонстанта="КаталогМодуля" Тогда
	    ТЗ.Значение = ГМ.СписокКонстант.Получить(ВыбКонстанта); // получаем необработанное значение "КаталогМодуля"
	Иначе
		ТЗ.Значение = ГМ.ПолучитьКонстанту(ВыбКонстанта);
	КонецЕсли;
	
	Тз.ЗначениеТип = ЗначениеТип;
	тз.Представление = Представление;
КонецПроцедуры // ДобавитьКонстантуВТЗ

//======================================================================
Процедура ЗаполнитьПараметрыТабличногоПоля()

	ТЗИнтеграция.УдалитьСтроки();
	
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "--- Реквизиты программы ---------------------------------------------------------------------------------------------------------------------------", "");

	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Вид справочника [Фирмы]", "НазваниеВидаСправочникаФирмы");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Вид документа [Реализация]", "НазваниеВидаДокументаРеализация");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Вид документа [ПеремещениеТМЦ]", "НазваниеВидаДокументаПеремещениеТМЦ");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Реквизит [Контрагент]", "НазваниеРеквизитаКонтрагент");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Реквизит [Грузополучатель]", "НазваниеРеквизитаГрузополучатель");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Реквизит [Номенклатура]", "НазваниеРеквизитаНоменклатура");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Реквизит [Количество]", "НазваниеРеквизитаКоличество");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Реквизит [КоличествоМест]", "НазваниеРеквизитаКоличествоМест");

	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "--- Номенклатура и партии -----------------------------------------------------------------------------------------------------------------------------------", "");
	
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Отправлять запросы без проверки статуса документа?", "ОтправлятьЗапросБезПроверкиСтатусаДок", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Контролировать остатки по регистру?", "КонтрольОстатковПоРегистру", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Загружать только активные партии (для Ветис.API версии >= 2.1)?", "ЗагружатьТолькоНеПустыеПартии", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Удалять ВСД_Партии перед загрузкой партий из Ветис?", "ОчищатьСправочникВСД_Партии", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Добавлять упаковки в ВСД?", "ДобавлятьУпаковки", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Пропускать Номенклатуру без соответствия при заполнении?", "ПропускатьПустыеСвойства", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Заполнять уровни упаковки из ВСД_Партии?", "ЗаполнятьУровниУпаковки", "Число", "флажок");

	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Добавлять номенклатуру в ВСД при отсутствии Партий?", "ПарамЗаполнятьВСДБезПартий", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Особые отметки загружать из параметров (для длинных строк)", "ОсобыеОтметкиЗагружатьИзПараметров", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Особые отметки добавлять из Входящей Партии", "ОсобыеОтметкиЗагружатьИзПартии", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Колонка сортировки ВСД_Партии", "ПарамКолонкаСортировкиПартииСписания");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Сортировать партии по убыванию?", "ПарамЗнакСортировкиУбывание", "Число", "флажок");
	
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Проверять при отправке заполнение маркировки и количество мест", "ПроверятьМаркировку", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Проверять срок годности при отправке и приеме продукции?", "ПарамПроверятьСрокГодности", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Минимальный срок годности товара (количество дней)", "ПарамПроверятьСрокГодностиКоличествоДней", "Число" );
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Гашение: Разрешенный ТНВЭД", "ПарамРазрешенныйТНВЭД" );
	
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Причина аннулирования ВСД", "ПарамПричинаАннулирования" );
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Инвентаризация - Причина расхождения", "ПарамПричинаРасхожденияВИнвентаризации" );
	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Инвентаризация - Описание несоответствия", "ПарамОписаниеНесоответствияВИнвентаризации" );

//	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "--- Основной поставщик -----------------------------------------------------------------------------------------------------------------------------------------", "");
//
//	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Поставщик Фирма", "Поставщик_Фирма", "Справочник");
//	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Поставщик ХозСубъект", "Поставщик_ХозСубъект", "Справочник.ВСД_ХозСубъект");
//	ДобавитьКонстантуВТЗ(ТЗИнтеграция, "Поставщик Площадка", "Поставщик_Площадка", "Справочник.ВСД_Площадка");

	ТЗСистема.УдалитьСтроки();
	ДобавитьКонстантуВТЗ(ТЗСистема, "Каталог модулей  и обработок", "КаталогМодуля");
	//ДобавитьКонстантуВТЗ(ТЗСистема, "Каталог библиотек", "КаталогБиблиотек");

	ДобавитьКонстантуВТЗ(ТЗСистема, "Тестовый режим", "ТестовыйРежим", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗСистема, "Отладка запросов XML", "ОтладкаЗапросовXML", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗСистема, "Выводить подробную информацию (для отладки)", "ВыводитьПодробнуюИнформацию", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗСистема, "Разрешить вводить много ВСД", "РазрешитьВводитьМногоВСД", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗСистема, "Пауза, сек", "ПаузаСек", "Число");
	ДобавитьКонстантуВТЗ(ТЗСистема, "Количество повторов отправки", "КоличествоПовторовОтправки", "Число");

	ДобавитьКонстантуВТЗ(ТЗСистема, "--- proxy ------------------------------------------------------------------------------------------------------------------------------------------------", "");
	ДобавитьКонстантуВТЗ(ТЗСистема, "proxy использовать? ", "proxy_enable", "Число", "флажок");
	ДобавитьКонстантуВТЗ(ТЗСистема, "proxy адрес", "proxy_url");
	ДобавитьКонстантуВТЗ(ТЗСистема, "proxy port", "proxy_port");
	ДобавитьКонстантуВТЗ(ТЗСистема, "proxy username", "proxy_username");
	ДобавитьКонстантуВТЗ(ТЗСистема, "proxy password", "proxy_password");
	
КонецПроцедуры

//======================================================================
Процедура ПослеСозданияФормы()

	ТЗИнтеграция = СоздатьОбъект("ТаблицаЗначений");
	ТЗИнтеграция.НоваяКолонка("Элемент",,,,"Представление реквизита",40);
	ТЗИнтеграция.НоваяКолонка("Значение",,,,"Значение",15);
	ТЗИнтеграция.НоваяКолонка("Константа");
	ТЗИнтеграция.НоваяКолонка("Представление",,,,,); //флажок
	ТЗИнтеграция.НоваяКолонка("ЗначениеТип",,,,,); // строка / число
	
	ТЗСистема = СоздатьОбъект("ТаблицаЗначений");
	ТЗИнтеграция.Выгрузить(ТЗСистема);
	ТЗСистема.УстановитьПараметрыКолонки("Элемент",,,,"Представление реквизита",30);
	ТЗСистема.УстановитьПараметрыКолонки("Значение",,,,"Значение",40);
	
	ЗаполнитьПараметрыТабличногоПоля();
	
	ТПИнтеграция=ГМ.СоздатьТабличноеПоле(Контекст, "ТПИнтеграция", ТЗИнтеграция, 0);
	ТПИнтеграция.Колонки.Получить("Значение").ЦветФона = 102100100;
	ТПИнтеграция.ОтображатьЗаголовки = 0;

	ТПСистема=ГМ.СоздатьТабличноеПоле(Контекст, "ТПСистема", ТЗСистема, 1);
	ТПСистема.Колонки.Получить("Значение").ЦветФона = 102100100;
	ТПСистема.ОтображатьЗаголовки = 0;
КонецПроцедуры

//======================================================================
Процедура тпИнтеграцияВыбор(ТабличноеПоле, Стр, Колонка, ТипРегиона)
	Если ТипРегиона = 3 Тогда
		ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, ТЗИнтеграция);

		КодКолонки = Колонка.Данные;
		_знач = Строка(ТЗИнтеграция.ПолучитьЗначение(Стр, КодКолонки) );

		Представление = Строка(ТЗИнтеграция.Представление);
		ВыбЗнач = ТЗИнтеграция.Константа;
		ЗначениеТип = ТЗИнтеграция.ЗначениеТип;
		
		Если КодКолонки = "Значение" Тогда
			Если ВыбЗнач = "ПарамКолонкаСортировкиПартииСписания" Тогда
				ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач,50,0, ВыбЗнач, "0x00000020");
			ИначеЕсли ВыбЗнач = "Поставщик_Фирма" Тогда
				Если ПустоеЗначение(_знач) = 0 Тогда
					ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач,50,0, ВыбЗнач, "0x00000020");
				Иначе
					Поз = 0;
					ТЗИнтеграция.НайтиЗначение("НазваниеВидаСправочникаФирмы",Поз,"Константа");
					ВидФирмы = ТЗИнтеграция.ПолучитьЗначение(Поз,"Значение");
					Если ПустоеЗначение(ВидФирмы) = 0 Тогда
						Попытка
							ПустаяФирма = ПолучитьПустоеЗначение("Справочник."+ВидФирмы);
							ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, ПустаяФирма,50,0, ВыбЗнач, "0x00000200");
						Исключение
							Предупреждение("Неверный вид справочника фирмы!");
						КонецПопытки;
					Иначе
						Предупреждение("Неверный вид справочника фирмы!");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВыбЗнач <> "" Тогда
				Если Представление <> "флажок" Тогда
					Если Нрег(ЗначениеТип) = "строка" Тогда
						ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач,50,0, ВыбЗнач, "0x100000");
					ИначеЕсли Нрег(ЗначениеТип) = "число" Тогда
						ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач,50,0, ВыбЗнач, "0x00000020");
					Иначе
						Если ПустоеЗначение(_знач) = 1 Тогда
							ПустоеЗнач = ПолучитьПустоеЗначение(ЗначениеТип);
							ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, ПустоеЗнач,50,0, ВыбЗнач, "0x00000200");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ТПИнтеграцияПриРедактированииЗначения(ТабличноеПоле, Стр, Колонка, ТипРегиона, __знач)
	Если ТипРегиона = 3 Тогда
		КодКолонки = Колонка.Данные;

		Если КодКолонки = "Значение" Тогда
			ТекЗнач = ТабличноеПоле.ТекущиеДанные.Значение;
			ВыбЗнач = ТЗИнтеграция.Константа;
			
			Если ВыбЗнач <> "ПарамКолонкаСортировкиПартииСписания" Тогда
				Если ТекЗнач <> __знач Тогда
					ТЗИнтеграция.УстановитьЗначение(ТабличноеПоле.ТекущаяСтрока,"Значение",__знач);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ТПИнтеграция.ОбновитьСтроки();
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ТПСистемаВыбор(ТабличноеПоле, Стр, Колонка, ТипРегиона)
	Если ТипРегиона = 3 Тогда
		ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, ТЗСистема);

		КодКолонки = Колонка.Данные;
		_знач = Строка(ТЗСистема.ПолучитьЗначение(Стр, КодКолонки) );

		Представление = Строка(ТЗСистема.Представление);
		ВыбЗнач = Строка(ТЗСистема.Константа);
		БылВыбор = 0;
		Если КодКолонки = "Значение" Тогда
			Если ( ВыбЗнач = "КаталогМодуля" ) или 
				 ( ВыбЗнач = "КаталогБиблиотек" ) Тогда
				ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач,100,0, ВыбЗнач+"1", "0x00000020");
			ИначеЕсли ВыбЗнач <> "" Тогда
				Если Представление <> "флажок" Тогда
					ТабличноеПоле.РедактироватьЗначение(Стр, Колонка, ТипРегиона, _знач,100,0, ВыбЗнач, "0x100000");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ТПСистемаПриРедактированииЗначения(ТабличноеПоле, Стр, Колонка, ТипРегиона, __знач)
	Если ТипРегиона = 3 Тогда
		КодКолонки = Колонка.Данные;

		Если КодКолонки = "Значение" Тогда
			ТекЗнач = ТабличноеПоле.ТекущиеДанные.Значение;
			
			ТекКонстанта = ТабличноеПоле.ТекущиеДанные.Константа;
			Если ТекКонстанта = "КаталогМодуля" Тогда
				Если БылВыбор = 1 Тогда
					__знач = КаталогМодуля;
				Иначе
					КаталогМодуля = __знач;
				КонецЕсли;
			//ИначеЕсли ТекКонстанта = "КаталогБиблиотек" Тогда
			//	Если БылВыбор = 1 Тогда
			//		__знач = КаталогБиблиотек;
			//	Иначе
			//		КаталогБиблиотек = __знач;
			//	КонецЕсли;
			КонецЕсли;

			Если ТекЗнач <> __знач Тогда
				ТЗСистема.УстановитьЗначение(ТабличноеПоле.ТекущаяСтрока,"Значение",__знач);
			КонецЕсли;
		КонецЕсли;
		ТПСистема.ОбновитьСтроки();
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ВыбРеквизит="Отправитель_Площадка"  Тогда
		Отправитель_Площадка = Элемент;
		КонтФормы.Форма.Закрыть();
		ВыбРеквизит="";
	ИначеЕсли Элемент.Вид()="ВСД_Площадка" Тогда
		ВыбПлощадка = Элемент;
		КонтФормы.Форма.Закрыть();
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьКаталогМодуля( )
	
	стр=0;
	Если тзСистема.НайтиЗначение("КаталогМодуля",стр, "Константа")=0 Тогда 
		Возврат 0;
	Иначе
		КаталогМодуля = СокрЛП(тзСистема.ПолучитьЗначение(стр, "Значение") ); 
	КонецЕсли;
	
	
	Если Прав( СокрЛП(КаталогМодуля),1 ) <> "\" Тогда 
		КаталогМодуля = КаталогМодуля+"\";
	КонецЕсли;
		
	Если ФС.СуществуетФайл( КаталогМодуля ) = 0 Тогда
		Если Вопрос("каталог ["+КаталогМодуля+"] не существует. Создать каталог?",4,30)=6 Тогда 
			ФС.СоздатьКаталог( КаталогМодуля );
		Иначе
			ГМ.СообщитьОбОшибке( "Каталог модуля не существует ["+КаталогМодуля+"]");
			
			Возврат 0;
			
		КонецЕсли;
	КонецЕсли;

	КаталогЛогов = КаталогМодуля+"logs\";
	Если ФС.СуществуетФайл( КаталогМодуля ) = 0 Тогда
		Если Вопрос("каталог ["+КаталогМодуля+"] не существует. Создать каталог?",4,30)=6 Тогда 
			ФС.СоздатьКаталог(КаталогМодуля);
		Иначе
			ГМ.СообщитьОбОшибке( "Каталог логов не существует ["+КаталогЛогов+"]");
			
			Возврат 0;
			
		КонецЕсли;
	КонецЕсли;

	тзСистема.УстановитьЗначение(стр, "Значение", КаталогМодуля);
	
	Возврат 1;
	
КонецФункции

//======================================================================
Процедура СохранитьПараметры()
	
	Если ПроверитьКаталогМодуля( )=0 Тогда 
		Предупреждение("Настройки не сохранены");
		Возврат;
	КонецЕсли;
	
	Поз = 0;
	НазваниеВидаСправочникаФирмы = "";
	Если ТЗИнтеграция.НайтиЗначение("НазваниеВидаСправочникаФирмы", Поз, "Константа") = 1 Тогда
		НазваниеВидаСправочникаФирмы = ТЗИнтеграция.ПолучитьЗначение(Поз, "Значение");
	КонецЕсли;

	Если ПустоеЗначение(НазваниеВидаСправочникаФирмы)=0 Тогда
		Если Метаданные.Справочник(НазваниеВидаСправочникаФирмы).Выбран() = 1 Тогда
			Если ПустоеЗначение(ВыбФирма) = 1 Тогда    //МногоФирм
			    Предупреждение("Укажите фирму!!!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СписокКонстант=СоздатьОбъект("СписокЗначений");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_username ), "param_username");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_password ) ,"param_password");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_issuer_id ), "param_issuer_id");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_api_key ), "param_api_key");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_intiator_login ), "param_intiator_login");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_vetdoctor_login ), "param_vetdoctor_login");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_vetdoctor_fio ), "param_vetdoctor_fio");
	СписокКонстант.ДобавитьЗначение( СокрЛП( param_vetdoctor_post ), "param_vetdoctor_post");
	СписокКонстант.ДобавитьЗначение( ( Отправитель_Площадка ), "Отправитель_Площадка");
	СписокКонстант.ДобавитьЗначение( ( Отправитель_ХозСубъект ), "Отправитель_ХозСубъект");
	СписокКонстант.ДобавитьЗначение( ( Страна ), "Страна");
	СписокКонстант.ДобавитьЗначение( ( Регион ), "Регион");
	СписокКонстант.ДобавитьЗначение( ( Город ), "Город");
	СписокКонстант.ДобавитьЗначение( СокрЛП( ВСД_Экспертиза ), "ВСД_Экспертиза");
	СписокКонстант.ДобавитьЗначение( СокрЛП( ВСД_Местность ), "ВСД_Местность");
	СписокКонстант.ДобавитьЗначение( СокрЛП( ВСД_ОсобыеОтметки ), "ВСД_ОсобыеОтметки");

	СписокКонстант.ДобавитьЗначение( ( Перевозчик_ХозСубъект ), "Перевозчик_ХозСубъект");
	СписокКонстант.ДобавитьЗначение( ( Цель ), "Цель");
	СписокКонстант.ДобавитьЗначение( ВСД_РезультатыИсследований, "ВСД_РезультатыИсследований");
	СписокКонстант.ДобавитьЗначение(ТермУсловияПеревозки, "ТермУсловияПеревозки");

	СписокКонстант.ДобавитьЗначение( ( Поставщик_Площадка ), "Поставщик_Площадка");
	СписокКонстант.ДобавитьЗначение( ( Поставщик_ХозСубъект ), "Поставщик_ХозСубъект");
	СписокКонстант.ДобавитьЗначение( ( Поставщик_Фирма ), "Поставщик_Фирма");
	
	ТЗИнтеграция.ВыбратьСтроки();
	Пока ТЗИнтеграция.ПолучитьСтроку() = 1 Цикл
		Если Врег(ТЗИнтеграция.ЗначениеТип)="ЧИСЛО" Тогда
			СписокКонстант.ДобавитьЗначение( Число(ТЗИнтеграция.Значение), ТЗИнтеграция.Константа);
		Иначе			
		    СписокКонстант.ДобавитьЗначение( СокрЛП(ТЗИнтеграция.Значение), ТЗИнтеграция.Константа);
		КонецЕсли;		
	КонецЦикла;
	
	тзСистема.ВыбратьСтроки();
	Пока ТЗСистема.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ТЗСистема.Константа)=1 Тогда
			Продолжить;
		КонецЕсли;		
		
		// проверка параметра "proxy_url"
		Если ТЗСистема.Константа = "proxy_url" Тогда
			Если ПустоеЗначение( ТЗСистема.Значение )=0 Тогда 
				Если ( Нрег(Лев(ТЗСистема.Значение,7)) <> "http://") Тогда
					ТЗСистема.Значение = "http://" + ТЗСистема.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Врег(ТЗСистема.ЗначениеТип)="ЧИСЛО" Тогда
			СписокКонстант.ДобавитьЗначение( Число(ТЗСистема.Значение), ТЗСистема.Константа);
		Иначе			
		    СписокКонстант.ДобавитьЗначение( СокрЛП(ТЗСистема.Значение), ТЗСистема.Константа);
		КонецЕсли;		
	КонецЦикла;

	ГМ.ПараметрыФирм.Установить(ЗначениеВСтрокуВнутр(ВыбФирма),СписокКонстант);

	ГМ.СохранитьПараметры();
	
	ГМ.ТекущаяИнициализированнаяФирма = "";
	ГМ.Инициализация(Контекст);

КонецПроцедуры

//======================================================================
Процедура ОткрытьПлощадкиПоХС(ВыбХС)

		тз = ГМ.ВыбратьВсеПлощадкиХС(ВыбХС);

		СписокОтбора = СоздатьОбъект("СписокЗначений");

		Тз.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСТроку()=1 Цикл
			СписокОтбора.ДобавитьЗначение(тз.id);
		КонецЦикла;

		ОткрытьПодбор("Справочник.ВСД_Площадка", ,СписокОтбора);

КонецПроцедуры

Функция НайтиФормуУпаковки(guid, name, uuid = "", КодУпаковки = "") Экспорт

	Рез="";
	Guid = СокрЛП(Guid);
	Если ПустоеЗначение(Guid)=0 Тогда
		Спр = СоздатьОбъект("Справочник.ВСД_ФормыУпаковки");
		Если Спр.НайтиПоРеквизиту("GUID",Guid,1)=1 Тогда
			Если НЕ(СокрЛП(name) = СокрЛП(Спр.Наименование)) Тогда
				Сообщить("ВСД_ФормыУпаковки "+ Спр.Наименование +" изменилось Наименование на ["+name+"] перезаписано");
				Спр.Наименование = name;
				Спр.Записать();
			КонецЕсли;
			Спр.СнятьПометкуУдаления();
			Рез = Спр.ТекущийЭлемент();
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать
			Спр.Новый();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = uuid;
			Попытка Спр.КодУпаковки = КодУпаковки; Исключение КонецПопытки; //Нет ревизита
			Спр.Записать();
			рез = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(Рез)=1 Тогда
		//Сообщить("Форма упаковки не определена "+guid+" = "+name,"!");
	КонецЕсли;

	Возврат Рез;

КонецФункции

//======================================================================
Процедура ИнициализацияХС()

	Если ПустоеЗначение(param_username)=1 Тогда
		Предупреждение("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(param_password)=1 Тогда
		Предупреждение("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(param_issuer_id)=1 Тогда
		Предупреждение("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;

	//при инициализации включим отладку...
	ГМ.СписокКонстант.Установить("ОтладкаЗапросовXML",1);
	
	Отправитель_ХозСубъект = ГМ.ЗагрузитьХСПоGUID(param_issuer_id);
	ИмяФайла = ГМ.Компонента.LogFilename;
		
	objDom=СоздатьОбъект("MSXML2.DOMDocument.6.0");
    objDom.setProperty("SelectionNamespaces", "
		|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
		|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
		|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
		|xmlns:default='http://www.w3.org/2001/XMLSchema'
		|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar' 
		|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
		|xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/enterprise/ws-definitions'
		|" );
		
    objDom.load(ИмяФайла);
	Попытка		
		businessEntity = objDom.selectSingleNode("//*[local-name() = 'businessEntity']");
	Исключение
		Сообщить("Получен пустой ответ сервера. Заполните параметры подключения.","!");
		Возврат;
	КонецПопытки;
	guid = businessEntity.selectSingleNode("*[local-name() = 'guid']").text;
	Попытка
		name = businessEntity.selectSingleNode("*[local-name() = 'name']").text;
	Исключение
		Попытка
			name = businessEntity.selectSingleNode("*[local-name() = 'fio']").text;
		Исключение
			Сообщить("Площадка не определена","!");
		КонецПопытки;
	КонецПопытки;
	country 	= businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'country']").selectSingleNode("*[local-name() = 'guid']").text;
	countryName = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'country']").selectSingleNode("*[local-name() = 'name']").text;		
	Страна 	= ГМ.НайтиСтрануПоGUID(country, countryName);

	НачатьТранзакцию();
	Попытка		
		ГМ.ПометитьНаУдалениеСправочник("ВСД_Регион");
		ГМ2.ИнициализацияХС_ЗагрузитьРегионы(Страна);
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();

	region 		= businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'region']").selectSingleNode("*[local-name() = 'guid']").text;
	regionName 	= businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("*[local-name() = 'region']").selectSingleNode("*[local-name() = 'name']").text;
	Регион 	= ГМ.Справочник_НайтиПоGUID( "ВСД_Регион", region, regionName, Страна);

	Попытка		
		locality = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("ikar:locality").selectSingleNode("bs:guid").text;
		localityName = businessEntity.selectSingleNode("*[local-name() = 'juridicalAddress']").selectSingleNode("ikar:locality").selectSingleNode("ikar:name").text;		
		Город 	= ГМ.Справочник_НайтиПоGUID( "ВСД_Город", locality, localityName, Регион);
	Исключение
		Сообщить("Город не указан в juridicalAddress
		|Загрузите города вручную");
	КонецПопытки;
	
	// загрузка справочников
	НачатьТранзакцию();
	Попытка		
		ГМ.ПометитьНаУдалениеСправочник("ВСД_ФормыУпаковки");
		ГМ2.ЗаполнитьФормыУпаковки();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;

    ЗафиксироватьТранзакцию();
		
	ГМ2.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();	

	НачатьТранзакцию();
	Попытка		
		ГМ.ПометитьНаУдалениеСправочник("ВСД_Цель");
		ГМ2.ИнициализацияХС_ЗагрузитьЦели();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;	
	ЗафиксироватьТранзакцию();

	НачатьТранзакцию();
	Попытка		
		ГМ.ПометитьНаУдалениеСправочник("ВСД_Страна");
		ГМ2.ИнициализацияХС_ЗагрузитьСтраны();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
    ЗафиксироватьТранзакцию();

	НачатьТранзакцию();
	Попытка		
		ГМ.ПометитьНаУдалениеСправочник("ВСД_Продукция");
		ГМ.ПометитьНаУдалениеСправочник("ВСД_ВидПродукции");
		Для А=1 По 8 Цикл
			ГМ2.ИнициализацияХС_ЗагрузитьПродукцию(А);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;	
	ЗафиксироватьТранзакцию();	

	// выбор  площадки по умолчанию
	ГМ2.ПолучитьПлощадкиПоХозсубъекту( Отправитель_ХозСубъект );	
	ВыбРеквизит = "Отправитель_Площадка";
	ОткрытьПлощадкиПоХС(Отправитель_ХозСубъект);
	
КонецПроцедуры

//======================================================================
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)

	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Основной, Параметры1, Действия");
	Иначе
		Форма.ИспользоватьСлой("Основной, Параметры2");
	КонецЕсли;

КонецПроцедуры

//======================================================================
Процедура ПриИзмененииФирмы()
	ГМ.Инициализация(Контекст);
	ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	//Если ПустоеЗначение(КаталогМодуля) = 1 Тогда   //ЖД
	//    ИмяФайла="";
	//	РасположениеФайла(КаталогМодуля, ИмяФайла);
	//КонецЕсли;

	ЗаполнитьПараметрыТабличногоПоля();
	ТПИнтеграция.ОбновитьСтроки();	
	ТПСистема.ОбновитьСтроки();
КонецПроцедуры

//======================================================================
Процедура ПриЗакрытии()
	ВидСтравочникаХС = Метаданные.Справочник("ВСД_ХозСубъект").Реквизит("Контрагент").Вид;
	ВидСтравочникаПЛ = Метаданные.Справочник("ВСД_Площадка").Реквизит("Контрагент").Вид;

	Если ВидСтравочникаХС <> ВидСтравочникаПЛ Тогда
		Если Метаданные.Справочник(ВидСтравочникаПЛ).Владелец.Выбран() = 1 Тогда
			Если Метаданные.Справочник(ВидСтравочникаПЛ).Владелец.Идентификатор <> ВидСтравочникаХС Тогда
				Предупреждение("Неверный реквизит Контрагент в справочнике ВСД_Площадка!"+РазделительСтрок+"Проверьте подчиненность справочника.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриЗакрытии

//======================================================================
Процедура ПоКнопкеОК()
	Если СписокФирм.РазмерСписка() <> 0 Тогда
		Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
			ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
			ПриИзмененииФирмы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПоКнопкеОК

//======================================================================
Процедура ДобавитьПараметры()
	Поз = 0;
	НазваниеВидаСправочникаФирмы = "";
	Если ТЗИнтеграция.НайтиЗначение("НазваниеВидаСправочникаФирмы", Поз, "Константа") = 1 Тогда
		НазваниеВидаСправочникаФирмы = ТЗИнтеграция.ПолучитьЗначение(Поз, "Значение");
	КонецЕсли;
	Если (ПустоеЗначение(НазваниеВидаСправочникаФирмы)=0) Тогда
		Если (Метаданные.Справочник(НазваниеВидаСправочникаФирмы).Выбран() = 1) Тогда
			Спр = СоздатьОбъект("Справочник."+НазваниеВидаСправочникаФирмы);
			Если Спр.Выбрать("Выберите фирму",) = 1 Тогда
				ВыбФирма = Спр.ТекущийЭлемент();
				СписокФирм.ДобавитьЗначение(ВыбФирма);
				СписокФирм.ТекущаяСтрока(СписокФирм.РазмерСписка());
				ПриИзмененииФирмы();

				СохранитьПараметры();
			КонецЕсли;
		Иначе
			Если СписокФирм.РазмерСписка() = 0 Тогда
				ВыбФирма = "";
				СписокФирм.ДобавитьЗначение(ВыбФирма, "-=Основная фирма=-");
				ПриИзмененииФирмы();

				СохранитьПараметры();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СписокФирм.РазмерСписка() = 0 Тогда
			ВыбФирма = "";
			СписокФирм.ДобавитьЗначение(ВыбФирма, "-=Основная фирма=-");
			ПриИзмененииФирмы();

			СохранитьПараметры();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДобавитьПараметры

//======================================================================
Процедура УдалитьПараметры()
	Если СписокФирм.РазмерСписка() <> 0 Тогда
		Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
			Если Вопрос("Вы уверены?","Да+Нет",30) = "Да" Тогда
				ВремФирма = ЗначениеВСтрокуВнутр(СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока()));
				ВремСтр = "";
				Для СЦ = 1 По ГМ.ПараметрыФирм.РазмерСписка() Цикл
					ГМ.ПараметрыФирм.ПолучитьЗначение(СЦ, ВремСтр);
					Если ВремСтр = ВремФирма Тогда
					    ГМ.ПараметрыФирм.УдалитьЗначение(СЦ);
						ГМ.СохранитьПараметры();

						Прервать;
					КонецЕсли;
				КонецЦикла;

				СписокФирм.УдалитьЗначение(СписокФирм.ТекущаяСтрока());
				Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
					ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
				Иначе
					ВыбФирма = "";
				КонецЕсли;
				ПриИзмененииФирмы();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьПараметры

//======================================================================
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога,ФлагСтандОбр)
	Сервис = СоздатьОбъект("Сервис");
	
	Если ЭлементДиалога = "Отправитель_Площадка" Тогда
		ВремЭлем = Отправитель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
	ИначеЕсли ЭлементДиалога = "Поставщик_Площадка" Тогда
		ВремЭлем = Поставщик_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
		
//		Поз = 0;
//		ТЗИнтеграция.НайтиЗначение("Поставщик_ХозСубъект",Поз,"Константа");
//		ВремЭлем = ТЗИнтеграция.ПолучитьЗначение(Поз,"Значение");
//
//		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
//		ФлагСтандОбр = 0;
	ИначеЕсли ЭлементДиалога = "ПарамКолонкаСортировкиПартииСписания" Тогда
		Зн = "";
		Если Сервис.ВыбратьЗначение(спКолонкаСортировкиПартииСписания,Зн,,0,) = 1 Тогда
			ТЗИнтеграция.Значение = Зн;
			ТПИнтеграция.ОтменитьРедактированиеЗначения();
			ТПИнтеграция.ОбновитьСтроки();
		КонецЕсли;
		ФлагСтандОбр = 0;
	ИначеЕсли ЭлементДиалога = "КаталогМодуля1" Тогда
		ИмяК = "";
		Если ФС.ВыбратьКаталог(ИмяК, "Выберите каталог модуля",) = 1 Тогда
			КаталогМодуля = ИмяК+"\";
			БылВыбор = 1;
			
			ТЗСистема.Значение = КаталогМодуля;
		КонецЕсли;
	ИначеЕсли ЭлементДиалога = "КаталогБиблиотек1" Тогда
		ИмяК = "";
		Если ФС.ВыбратьКаталог(ИмяК, "Выберите каталог библиотек",) = 1 Тогда
			КаталогБиблиотек = ИмяК+"\";
			БылВыбор = 1;
			
			ТЗСистема.Значение = КаталогБиблиотек;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

//======================================================================
Процедура ПриВыбореХС(Имя, ВыбХС)
	Если Имя = "Отправитель_ХозСубъект" Тогда
		Если Отправитель_Площадка.GuidХозСубъекта <> ВыбХС.GUID Тогда
			Отправитель_Площадка = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриВыбореХС

//======================================================================
Процедура ПриВыбореВидаПараметров()
	Если флПараметры = 1 Тогда
		
		//Личные параметры 
		ИмяФайлаЛичныеПараметры = КаталогИБ()+"Меркурий_Параметры_"+ИмяПользователя()+".cfg";
		Ф = СоздатьОбъект("Текст");
		Ф.Записать( ИмяФайлаЛичныеПараметры );
		
		//Если ФС.СуществуетФайл(КаталогИБ()+"Меркурий_Параметры.cfg") = 1 Тогда
		//	ФС.УдалитьФайл(КаталогИБ()+"Меркурий_Параметры.cfg");
		//КонецЕсли;
	Иначе
		//Общие настройки
		// удаляем личные параметры
		ИмяФайлаЛичныеПараметры = КаталогИБ()+"Меркурий_Параметры_"+ИмяПользователя()+".cfg";
		Если ФС.СуществуетФайл( ИмяФайлаЛичныеПараметры ) = 1 Тогда
			ФС.УдалитьФайл( ИмяФайлаЛичныеПараметры );
		КонецЕсли;		
	КонецЕсли;
	
	ГМ.СохранитьПараметры();
	
КонецПроцедуры // ПриВыбореВидаПараметров()

//======================================================================
Процедура ОткрытьСправкуПараметры()
	ЗапуститьПриложение("https://redmine.kb99.pro/projects/vsd_1c/wiki/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0_%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D0%BE%D0%B2#%D0%9F%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%8B");
КонецПроцедуры

//{ =============================  Табличное поле  - Оформление =============================

Процедура тпИнтеграцияПриВыводеСтроки(ТабличноеПоле,ОформлениеСтроки,ДанныеСтроки,ТипРегиона)
	Если ТипРегиона = 3 Тогда
		Если Нрег(ДанныеСтроки.Представление) = "флажок" Тогда
			ГМ.ВывестиФлажок(ОформлениеСтроки, ДанныеСтроки, "Значение");			
		ИначеЕсли ДанныеСтроки.Константа = "ПарамКолонкаСортировкиПартииСписания" Тогда
			ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить("Значение");
			Поз = спКолонкаСортировкиПартииСписания.НайтиЗначение(ДанныеСтроки.Значение);
			
			Надпись = "";
			Если Поз > 0 Тогда
				спКолонкаСортировкиПартииСписания.ПолучитьЗначение(Поз,Надпись);
			КонецЕсли;
			ОбъектЯчейка.УстановитьТекст(Надпись);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура тпИнтеграцияПриВыбореФлажка(ТабличноеПоле,Стр, Колонка, ТипРегиона)
	ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, тзИнтеграция);
	тзИнтеграция.Значение = ?(тзИнтеграция.Значение = 1,0,1);
	ТабличноеПоле.ОбновитьСтроки();
КонецПроцедуры

Процедура ТПСистемаПриВыводеСтроки(ТабличноеПоле,ОформлениеСтроки,ДанныеСтроки,ТипРегиона)
	Если ТипРегиона = 3 Тогда
		Если Нрег(ДанныеСтроки.Представление) = "флажок" Тогда
			ГМ.ВывестиФлажок(ОформлениеСтроки, ДанныеСтроки, "Значение");			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТПСистемаПриВыбореФлажка(ТабличноеПоле,Стр, Колонка, ТипРегиона)
	ГМ.ПриАктивизацииСтрокиТП(ТабличноеПоле, ТЗСистема);
	ТЗСистема.Значение = ?(ТЗСистема.Значение = 1,0,1);
	ТабличноеПоле.ОбновитьСтроки();
КонецПроцедуры

//}==========================================================================================

//{========================= Список изменений =================

Процедура ПриНажатииЛевойКнопки(Сост, х, у)
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
	Если ТипЗначенияСтр(Атр) = "АтрибутФормы" Тогда
		Если Атр.Идентификатор = "Версия" Тогда
			ЗапуститьПриложение(ГМ.ВерсияСсылка());
		КонецЕсли;  
	КонецЕсли;	
	
КонецПроцедуры

//}===========================================================

ВыбФирма = "";
